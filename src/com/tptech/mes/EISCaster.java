/*******************************************************************************
' EISCaster.java
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2017-01-18 15:55:11
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
*******************************************************************************/

package com.tptech.mes;

import com.miracom.oneoone.transceiverx.Message;
import com.miracom.oneoone.transceiverx.StreamTransformer;
import com.miracom.oneoone.transceiverx.parser.DeliveryType;
import com.miracom.oneoone.transceiverx.parser.StreamTransformerImpl;
import com.tptech.mes.EISType.*;


public class EISCaster
{
    private static String mEISChannel;
    private static int mEISTTL;

    public static String getEISChannel()
    {
        return mEISChannel;
    }
    public static void setEISChannel(String channel)
    {
        mEISChannel = channel;
    }
    public static int getEISTTL()
    {
        return mEISTTL;
    }
    public static void setEISTTL(int ttl)
    {
        mEISTTL = ttl;
    }

    public static boolean EIS_CUS_EQ_Dummy_Change_Clear(EIS_CUS_EQ_Dummy_Change_Clear_In_Tag EIS_CUS_EQ_Dummy_Change_Clear_In)
    {
        return EIS_CUS_EQ_Dummy_Change_Clear(EIS_CUS_EQ_Dummy_Change_Clear_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_Dummy_Change_Clear(EIS_CUS_EQ_Dummy_Change_Clear_In_Tag EIS_CUS_EQ_Dummy_Change_Clear_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_Dummy_Change_Clear");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_Dummy_Change_Clear_In_Tag(former, EIS_CUS_EQ_Dummy_Change_Clear_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Equipment_Status_History(CUS_Equipment_Status_History_In_Tag CUS_Equipment_Status_History_In)
    {
        return CUS_Equipment_Status_History(CUS_Equipment_Status_History_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Equipment_Status_History(CUS_Equipment_Status_History_In_Tag CUS_Equipment_Status_History_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Equipment_Status_History");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Equipment_Status_History_In_Tag(former, CUS_Equipment_Status_History_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Equipment_Process_State_His(CUS_Equipment_Process_State_His_In_Tag CUS_Equipment_Process_State_His_In)
    {
        return CUS_Equipment_Process_State_His(CUS_Equipment_Process_State_His_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Equipment_Process_State_His(CUS_Equipment_Process_State_His_In_Tag CUS_Equipment_Process_State_His_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Equipment_Process_State_His");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Equipment_Process_State_His_In_Tag(former, CUS_Equipment_Process_State_His_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Frame_Reject(EIS_CUS_Frame_Reject_In_Tag EIS_CUS_Frame_Reject_In)
    {
        return EIS_CUS_Frame_Reject(EIS_CUS_Frame_Reject_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Frame_Reject(EIS_CUS_Frame_Reject_In_Tag EIS_CUS_Frame_Reject_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Frame_Reject");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Frame_Reject_In_Tag(former, EIS_CUS_Frame_Reject_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_New_Mat(EIS_CUS_New_Mat_In_Tag EIS_CUS_New_Mat_In)
    {
        return EIS_CUS_New_Mat(EIS_CUS_New_Mat_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_New_Mat(EIS_CUS_New_Mat_In_Tag EIS_CUS_New_Mat_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_New_Mat");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_New_Mat_In_Tag(former, EIS_CUS_New_Mat_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_CCS_Send(EIS_CUS_CCS_Send_In_Tag EIS_CUS_CCS_Send_In)
    {
        return EIS_CUS_CCS_Send(EIS_CUS_CCS_Send_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_CCS_Send(EIS_CUS_CCS_Send_In_Tag EIS_CUS_CCS_Send_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_CCS_Send");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_CCS_Send_In_Tag(former, EIS_CUS_CCS_Send_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_CCS_Approve(EIS_CUS_CCS_Approve_In_Tag EIS_CUS_CCS_Approve_In)
    {
        return EIS_CUS_CCS_Approve(EIS_CUS_CCS_Approve_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_CCS_Approve(EIS_CUS_CCS_Approve_In_Tag EIS_CUS_CCS_Approve_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_CCS_Approve");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_CCS_Approve_In_Tag(former, EIS_CUS_CCS_Approve_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_DA_Current_Lot_Info_Req(EIS_CUS_DA_Current_Lot_Info_Req_In_Tag EIS_CUS_DA_Current_Lot_Info_Req_In)
    {
        return EIS_CUS_DA_Current_Lot_Info_Req(EIS_CUS_DA_Current_Lot_Info_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_DA_Current_Lot_Info_Req(EIS_CUS_DA_Current_Lot_Info_Req_In_Tag EIS_CUS_DA_Current_Lot_Info_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_DA_Current_Lot_Info_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_DA_Current_Lot_Info_Req_In_Tag(former, EIS_CUS_DA_Current_Lot_Info_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_DA_Current_Lot_Info_Rep(EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag EIS_CUS_DA_Current_Lot_Info_Rep_In)
    {
        return EIS_CUS_DA_Current_Lot_Info_Rep(EIS_CUS_DA_Current_Lot_Info_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_DA_Current_Lot_Info_Rep(EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag EIS_CUS_DA_Current_Lot_Info_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_DA_Current_Lot_Info_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag(former, EIS_CUS_DA_Current_Lot_Info_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAPEIS_EMS_Fail(EAPEIS_EMS_Fail_In_Tag EAPEIS_EMS_Fail_In)
    {
        return EAPEIS_EMS_Fail(EAPEIS_EMS_Fail_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAPEIS_EMS_Fail(EAPEIS_EMS_Fail_In_Tag EAPEIS_EMS_Fail_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAPEIS_EMS_Fail");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAPEIS_EMS_Fail_In_Tag(former, EAPEIS_EMS_Fail_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Lot_Start_Req(EAP_EIS_Lot_Start_Req_In_Tag EAP_EIS_Lot_Start_Req_In)
    {
        return EAP_EIS_Lot_Start_Req(EAP_EIS_Lot_Start_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Lot_Start_Req(EAP_EIS_Lot_Start_Req_In_Tag EAP_EIS_Lot_Start_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Lot_Start_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Lot_Start_Req_In_Tag(former, EAP_EIS_Lot_Start_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Lot_Start_Rep(EIS_EAP_Lot_Start_Rep_In_Tag EIS_EAP_Lot_Start_Rep_In)
    {
        return EIS_EAP_Lot_Start_Rep(EIS_EAP_Lot_Start_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Lot_Start_Rep(EIS_EAP_Lot_Start_Rep_In_Tag EIS_EAP_Lot_Start_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Lot_Start_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Lot_Start_Rep_In_Tag(former, EIS_EAP_Lot_Start_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAPEIS_OVEN_Lot_Start_Req(EAPEIS_OVEN_Lot_Start_Req_In_Tag EAPEIS_OVEN_Lot_Start_Req_In)
    {
        return EAPEIS_OVEN_Lot_Start_Req(EAPEIS_OVEN_Lot_Start_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAPEIS_OVEN_Lot_Start_Req(EAPEIS_OVEN_Lot_Start_Req_In_Tag EAPEIS_OVEN_Lot_Start_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAPEIS_OVEN_Lot_Start_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAPEIS_OVEN_Lot_Start_Req_In_Tag(former, EAPEIS_OVEN_Lot_Start_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EISEAP_OVEN_Lot_Start_Rep(EISEAP_OVEN_Lot_Start_Rep_In_Tag EISEAP_OVEN_Lot_Start_Rep_In)
    {
        return EISEAP_OVEN_Lot_Start_Rep(EISEAP_OVEN_Lot_Start_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EISEAP_OVEN_Lot_Start_Rep(EISEAP_OVEN_Lot_Start_Rep_In_Tag EISEAP_OVEN_Lot_Start_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EISEAP_OVEN_Lot_Start_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EISEAP_OVEN_Lot_Start_Rep_In_Tag(former, EISEAP_OVEN_Lot_Start_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAPEIS_OVEN_Lot_End_Req(EAPEIS_OVEN_Lot_End_Req_In_Tag EAPEIS_OVEN_Lot_End_Req_In)
    {
        return EAPEIS_OVEN_Lot_End_Req(EAPEIS_OVEN_Lot_End_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAPEIS_OVEN_Lot_End_Req(EAPEIS_OVEN_Lot_End_Req_In_Tag EAPEIS_OVEN_Lot_End_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAPEIS_OVEN_Lot_End_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAPEIS_OVEN_Lot_End_Req_In_Tag(former, EAPEIS_OVEN_Lot_End_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EISEAP_OVEN_Lot_End_Rep(EISEAP_OVEN_Lot_End_Rep_In_Tag EISEAP_OVEN_Lot_End_Rep_In)
    {
        return EISEAP_OVEN_Lot_End_Rep(EISEAP_OVEN_Lot_End_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EISEAP_OVEN_Lot_End_Rep(EISEAP_OVEN_Lot_End_Rep_In_Tag EISEAP_OVEN_Lot_End_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EISEAP_OVEN_Lot_End_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EISEAP_OVEN_Lot_End_Rep_In_Tag(former, EISEAP_OVEN_Lot_End_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Lot_End_Req(EAP_EIS_Lot_End_Req_In_Tag EAP_EIS_Lot_End_Req_In)
    {
        return EAP_EIS_Lot_End_Req(EAP_EIS_Lot_End_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Lot_End_Req(EAP_EIS_Lot_End_Req_In_Tag EAP_EIS_Lot_End_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Lot_End_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Lot_End_Req_In_Tag(former, EAP_EIS_Lot_End_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Lot_End_Rep(EIS_EAP_Lot_End_Rep_In_Tag EIS_EAP_Lot_End_Rep_In)
    {
        return EIS_EAP_Lot_End_Rep(EIS_EAP_Lot_End_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Lot_End_Rep(EIS_EAP_Lot_End_Rep_In_Tag EIS_EAP_Lot_End_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Lot_End_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Lot_End_Rep_In_Tag(former, EIS_EAP_Lot_End_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Label_Create(EAP_EIS_Label_Create_In_Tag EAP_EIS_Label_Create_In)
    {
        return EAP_EIS_Label_Create(EAP_EIS_Label_Create_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Label_Create(EAP_EIS_Label_Create_In_Tag EAP_EIS_Label_Create_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Label_Create");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Label_Create_In_Tag(former, EAP_EIS_Label_Create_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Label_Validation_Fail(EAP_EIS_Label_Validation_Fail_In_Tag EAP_EIS_Label_Validation_Fail_In)
    {
        return EAP_EIS_Label_Validation_Fail(EAP_EIS_Label_Validation_Fail_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Label_Validation_Fail(EAP_EIS_Label_Validation_Fail_In_Tag EAP_EIS_Label_Validation_Fail_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Label_Validation_Fail");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Label_Validation_Fail_In_Tag(former, EAP_EIS_Label_Validation_Fail_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Windows_Time_Over(EAP_EIS_Windows_Time_Over_In_Tag EAP_EIS_Windows_Time_Over_In)
    {
        return EAP_EIS_Windows_Time_Over(EAP_EIS_Windows_Time_Over_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Windows_Time_Over(EAP_EIS_Windows_Time_Over_In_Tag EAP_EIS_Windows_Time_Over_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Windows_Time_Over");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Windows_Time_Over_In_Tag(former, EAP_EIS_Windows_Time_Over_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_DA_Start(EAP_EIS_DA_Start_In_Tag EAP_EIS_DA_Start_In)
    {
        return EAP_EIS_DA_Start(EAP_EIS_DA_Start_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_DA_Start(EAP_EIS_DA_Start_In_Tag EAP_EIS_DA_Start_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_DA_Start");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_DA_Start_In_Tag(former, EAP_EIS_DA_Start_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_DA_Run_Down(EAP_EIS_DA_Run_Down_In_Tag EAP_EIS_DA_Run_Down_In)
    {
        return EAP_EIS_DA_Run_Down(EAP_EIS_DA_Run_Down_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_DA_Run_Down(EAP_EIS_DA_Run_Down_In_Tag EAP_EIS_DA_Run_Down_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_DA_Run_Down");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_DA_Run_Down_In_Tag(former, EAP_EIS_DA_Run_Down_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Count_Verification_Fail(EAP_EIS_Count_Verification_Fail_In_Tag EAP_EIS_Count_Verification_Fail_In)
    {
        return EAP_EIS_Count_Verification_Fail(EAP_EIS_Count_Verification_Fail_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Count_Verification_Fail(EAP_EIS_Count_Verification_Fail_In_Tag EAP_EIS_Count_Verification_Fail_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Count_Verification_Fail");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Count_Verification_Fail_In_Tag(former, EAP_EIS_Count_Verification_Fail_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Lot_Start_Multi_Req(EAP_EIS_Lot_Start_Multi_Req_In_Tag EAP_EIS_Lot_Start_Multi_Req_In)
    {
        return EAP_EIS_Lot_Start_Multi_Req(EAP_EIS_Lot_Start_Multi_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Lot_Start_Multi_Req(EAP_EIS_Lot_Start_Multi_Req_In_Tag EAP_EIS_Lot_Start_Multi_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Lot_Start_Multi_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Lot_Start_Multi_Req_In_Tag(former, EAP_EIS_Lot_Start_Multi_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Lot_Start_Multi_Rep(EIS_EAP_Lot_Start_Multi_Rep_In_Tag EIS_EAP_Lot_Start_Multi_Rep_In)
    {
        return EIS_EAP_Lot_Start_Multi_Rep(EIS_EAP_Lot_Start_Multi_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Lot_Start_Multi_Rep(EIS_EAP_Lot_Start_Multi_Rep_In_Tag EIS_EAP_Lot_Start_Multi_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Lot_Start_Multi_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Lot_Start_Multi_Rep_In_Tag(former, EIS_EAP_Lot_Start_Multi_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Lot_End_Multi_Req(EAP_EIS_Lot_End_Multi_Req_In_Tag EAP_EIS_Lot_End_Multi_Req_In)
    {
        return EAP_EIS_Lot_End_Multi_Req(EAP_EIS_Lot_End_Multi_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Lot_End_Multi_Req(EAP_EIS_Lot_End_Multi_Req_In_Tag EAP_EIS_Lot_End_Multi_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Lot_End_Multi_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Lot_End_Multi_Req_In_Tag(former, EAP_EIS_Lot_End_Multi_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Lot_End_Multi_Rep(EIS_EAP_Lot_End_Multi_Rep_In_Tag EIS_EAP_Lot_End_Multi_Rep_In)
    {
        return EIS_EAP_Lot_End_Multi_Rep(EIS_EAP_Lot_End_Multi_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Lot_End_Multi_Rep(EIS_EAP_Lot_End_Multi_Rep_In_Tag EIS_EAP_Lot_End_Multi_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Lot_End_Multi_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Lot_End_Multi_Rep_In_Tag(former, EIS_EAP_Lot_End_Multi_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Wafer_Angle_Compare_Fail(EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag EAP_EIS_Wafer_Angle_Compare_Fail_In)
    {
        return EAP_EIS_Wafer_Angle_Compare_Fail(EAP_EIS_Wafer_Angle_Compare_Fail_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Wafer_Angle_Compare_Fail(EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag EAP_EIS_Wafer_Angle_Compare_Fail_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Wafer_Angle_Compare_Fail");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag(former, EAP_EIS_Wafer_Angle_Compare_Fail_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean RFIDEIS_Read_Req(RFIDEIS_Read_Req_In_Tag RFIDEIS_Read_Req_In)
    {
        return RFIDEIS_Read_Req(RFIDEIS_Read_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean RFIDEIS_Read_Req(RFIDEIS_Read_Req_In_Tag RFIDEIS_Read_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "RFIDEIS_Read_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_RFIDEIS_Read_Req_In_Tag(former, RFIDEIS_Read_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EISRFID_Read_Rep(EISRFID_Read_Rep_In_Tag EISRFID_Read_Rep_In)
    {
        return EISRFID_Read_Rep(EISRFID_Read_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EISRFID_Read_Rep(EISRFID_Read_Rep_In_Tag EISRFID_Read_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EISRFID_Read_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EISRFID_Read_Rep_In_Tag(former, EISRFID_Read_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean RFIDEIS_Lot_Id_Req(RFIDEIS_Lot_Id_Req_In_Tag RFIDEIS_Lot_Id_Req_In)
    {
        return RFIDEIS_Lot_Id_Req(RFIDEIS_Lot_Id_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean RFIDEIS_Lot_Id_Req(RFIDEIS_Lot_Id_Req_In_Tag RFIDEIS_Lot_Id_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "RFIDEIS_Lot_Id_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_RFIDEIS_Lot_Id_Req_In_Tag(former, RFIDEIS_Lot_Id_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EISRFID_Lot_Id_Rep(EISRFID_Lot_Id_Rep_In_Tag EISRFID_Lot_Id_Rep_In)
    {
        return EISRFID_Lot_Id_Rep(EISRFID_Lot_Id_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EISRFID_Lot_Id_Rep(EISRFID_Lot_Id_Rep_In_Tag EISRFID_Lot_Id_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EISRFID_Lot_Id_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EISRFID_Lot_Id_Rep_In_Tag(former, EISRFID_Lot_Id_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean AMC_EIS_Feeder_Status(AMC_EIS_Feeder_Status_In_Tag AMC_EIS_Feeder_Status_In)
    {
        return AMC_EIS_Feeder_Status(AMC_EIS_Feeder_Status_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean AMC_EIS_Feeder_Status(AMC_EIS_Feeder_Status_In_Tag AMC_EIS_Feeder_Status_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "AMC_EIS_Feeder_Status");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_AMC_EIS_Feeder_Status_In_Tag(former, AMC_EIS_Feeder_Status_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean AMC_EIS_Lock_Cmd_Req(AMC_EIS_Lock_Cmd_Req_In_Tag AMC_EIS_Lock_Cmd_Req_In)
    {
        return AMC_EIS_Lock_Cmd_Req(AMC_EIS_Lock_Cmd_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean AMC_EIS_Lock_Cmd_Req(AMC_EIS_Lock_Cmd_Req_In_Tag AMC_EIS_Lock_Cmd_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "AMC_EIS_Lock_Cmd_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_AMC_EIS_Lock_Cmd_Req_In_Tag(former, AMC_EIS_Lock_Cmd_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_AMC_Lock_Cmd_Rep(EIS_AMC_Lock_Cmd_Rep_In_Tag EIS_AMC_Lock_Cmd_Rep_In)
    {
        return EIS_AMC_Lock_Cmd_Rep(EIS_AMC_Lock_Cmd_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_AMC_Lock_Cmd_Rep(EIS_AMC_Lock_Cmd_Rep_In_Tag EIS_AMC_Lock_Cmd_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_AMC_Lock_Cmd_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_AMC_Lock_Cmd_Rep_In_Tag(former, EIS_AMC_Lock_Cmd_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Tool_Change_Req(EAP_EIS_Tool_Change_Req_In_Tag EAP_EIS_Tool_Change_Req_In)
    {
        return EAP_EIS_Tool_Change_Req(EAP_EIS_Tool_Change_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Tool_Change_Req(EAP_EIS_Tool_Change_Req_In_Tag EAP_EIS_Tool_Change_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Tool_Change_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Tool_Change_Req_In_Tag(former, EAP_EIS_Tool_Change_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Tool_Change_Rep(EIS_EAP_Tool_Change_Rep_In_Tag EIS_EAP_Tool_Change_Rep_In)
    {
        return EIS_EAP_Tool_Change_Rep(EIS_EAP_Tool_Change_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Tool_Change_Rep(EIS_EAP_Tool_Change_Rep_In_Tag EIS_EAP_Tool_Change_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Tool_Change_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Tool_Change_Rep_In_Tag(former, EIS_EAP_Tool_Change_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Locking_Start_Req(EAP_EIS_Locking_Start_Req_In_Tag EAP_EIS_Locking_Start_Req_In)
    {
        return EAP_EIS_Locking_Start_Req(EAP_EIS_Locking_Start_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Locking_Start_Req(EAP_EIS_Locking_Start_Req_In_Tag EAP_EIS_Locking_Start_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Locking_Start_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Locking_Start_Req_In_Tag(former, EAP_EIS_Locking_Start_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Locking_Start_Rep(EIS_EAP_Locking_Start_Rep_In_Tag EIS_EAP_Locking_Start_Rep_In)
    {
        return EIS_EAP_Locking_Start_Rep(EIS_EAP_Locking_Start_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Locking_Start_Rep(EIS_EAP_Locking_Start_Rep_In_Tag EIS_EAP_Locking_Start_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Locking_Start_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Locking_Start_Rep_In_Tag(former, EIS_EAP_Locking_Start_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Tray_Full_Req(EAP_EIS_Tray_Full_Req_In_Tag EAP_EIS_Tray_Full_Req_In)
    {
        return EAP_EIS_Tray_Full_Req(EAP_EIS_Tray_Full_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Tray_Full_Req(EAP_EIS_Tray_Full_Req_In_Tag EAP_EIS_Tray_Full_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Tray_Full_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Tray_Full_Req_In_Tag(former, EAP_EIS_Tray_Full_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Tray_Full_Rep(EIS_EAP_Tray_Full_Rep_In_Tag EIS_EAP_Tray_Full_Rep_In)
    {
        return EIS_EAP_Tray_Full_Rep(EIS_EAP_Tray_Full_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Tray_Full_Rep(EIS_EAP_Tray_Full_Rep_In_Tag EIS_EAP_Tray_Full_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Tray_Full_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Tray_Full_Rep_In_Tag(former, EIS_EAP_Tray_Full_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_Locking_Message(EIS_CUS_EQ_Locking_Message_In_Tag EIS_CUS_EQ_Locking_Message_In)
    {
        return EIS_CUS_EQ_Locking_Message(EIS_CUS_EQ_Locking_Message_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_Locking_Message(EIS_CUS_EQ_Locking_Message_In_Tag EIS_CUS_EQ_Locking_Message_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_Locking_Message");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_Locking_Message_In_Tag(former, EIS_CUS_EQ_Locking_Message_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_ALARM_Event(EIS_CUS_EQ_ALARM_Event_In_Tag EIS_CUS_EQ_ALARM_Event_In)
    {
        return EIS_CUS_EQ_ALARM_Event(EIS_CUS_EQ_ALARM_Event_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_ALARM_Event(EIS_CUS_EQ_ALARM_Event_In_Tag EIS_CUS_EQ_ALARM_Event_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_ALARM_Event");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_ALARM_Event_In_Tag(former, EIS_CUS_EQ_ALARM_Event_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Mode_Change(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In)
    {
        return EIS_CUS_Mode_Change(EIS_CUS_Mode_Change_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Mode_Change(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Mode_Change");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Mode_Change_In_Tag(former, EIS_CUS_Mode_Change_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Status_Change(EIS_CUS_Status_Change_In_Tag EIS_CUS_Status_Change_In)
    {
        return EIS_CUS_Status_Change(EIS_CUS_Status_Change_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Status_Change(EIS_CUS_Status_Change_In_Tag EIS_CUS_Status_Change_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Status_Change");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Status_Change_In_Tag(former, EIS_CUS_Status_Change_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_Collect_Data(EIS_Collect_Data_In_Tag EIS_Collect_Data_In)
    {
        return EIS_Collect_Data(EIS_Collect_Data_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_Collect_Data(EIS_Collect_Data_In_Tag EIS_Collect_Data_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_Collect_Data");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_Collect_Data_In_Tag(former, EIS_Collect_Data_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_EQ_Status_Info_Request(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In)
    {
        return CUS_EQ_Status_Info_Request(EIS_CUS_Mode_Change_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_EQ_Status_Info_Request(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_EQ_Status_Info_Request");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Mode_Change_In_Tag(former, EIS_CUS_Mode_Change_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_EQ_Terminal_Message_Send(CUS_EQ_Terminal_Message_Send_In_Tag CUS_EQ_Terminal_Message_Send_In)
    {
        return CUS_EQ_Terminal_Message_Send(CUS_EQ_Terminal_Message_Send_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_EQ_Terminal_Message_Send(CUS_EQ_Terminal_Message_Send_In_Tag CUS_EQ_Terminal_Message_Send_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_EQ_Terminal_Message_Send");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_EQ_Terminal_Message_Send_In_Tag(former, CUS_EQ_Terminal_Message_Send_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_EQ_Mode_Change_Send(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In)
    {
        return CUS_EQ_Mode_Change_Send(EIS_CUS_Mode_Change_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_EQ_Mode_Change_Send(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_EQ_Mode_Change_Send");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Mode_Change_In_Tag(former, EIS_CUS_Mode_Change_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Current_Lot_Info_Req(EIS_CUS_Current_Lot_Info_Req_In_Tag EIS_CUS_Current_Lot_Info_Req_In)
    {
        return EIS_CUS_Current_Lot_Info_Req(EIS_CUS_Current_Lot_Info_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Current_Lot_Info_Req(EIS_CUS_Current_Lot_Info_Req_In_Tag EIS_CUS_Current_Lot_Info_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Current_Lot_Info_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Current_Lot_Info_Req_In_Tag(former, EIS_CUS_Current_Lot_Info_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Last_Dev_Chg_Info_Req(EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag EIS_CUS_Last_Dev_Chg_Info_Req_In)
    {
        return EIS_CUS_Last_Dev_Chg_Info_Req(EIS_CUS_Last_Dev_Chg_Info_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Last_Dev_Chg_Info_Req(EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag EIS_CUS_Last_Dev_Chg_Info_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Last_Dev_Chg_Info_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag(former, EIS_CUS_Last_Dev_Chg_Info_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Lot_Start_Info(CUS_Lot_Start_Info_In_Tag CUS_Lot_Start_Info_In)
    {
        return CUS_Lot_Start_Info(CUS_Lot_Start_Info_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Lot_Start_Info(CUS_Lot_Start_Info_In_Tag CUS_Lot_Start_Info_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Lot_Start_Info");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Lot_Start_Info_In_Tag(former, CUS_Lot_Start_Info_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Last_Dev_Chg_Info_Rep(CUS_Last_Dev_Chg_Info_Rep_In_Tag CUS_Last_Dev_Chg_Info_Rep_In)
    {
        return CUS_Last_Dev_Chg_Info_Rep(CUS_Last_Dev_Chg_Info_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Last_Dev_Chg_Info_Rep(CUS_Last_Dev_Chg_Info_Rep_In_Tag CUS_Last_Dev_Chg_Info_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Last_Dev_Chg_Info_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Last_Dev_Chg_Info_Rep_In_Tag(former, CUS_Last_Dev_Chg_Info_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Current_Lot_Info_Rep(CUS_Current_Lot_Info_Rep_In_Tag CUS_Current_Lot_Info_Rep_In)
    {
        return CUS_Current_Lot_Info_Rep(CUS_Current_Lot_Info_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Current_Lot_Info_Rep(CUS_Current_Lot_Info_Rep_In_Tag CUS_Current_Lot_Info_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Current_Lot_Info_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Current_Lot_Info_Rep_In_Tag(former, CUS_Current_Lot_Info_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_Status_Event(EIS_CUS_EQ_Status_Event_In_Tag EIS_CUS_EQ_Status_Event_In)
    {
        return EIS_CUS_EQ_Status_Event(EIS_CUS_EQ_Status_Event_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_Status_Event(EIS_CUS_EQ_Status_Event_In_Tag EIS_CUS_EQ_Status_Event_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_Status_Event");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_Status_Event_In_Tag(former, EIS_CUS_EQ_Status_Event_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_Lot_Status_Req(EIS_CUS_EQ_Lot_Status_Req_In_Tag EIS_CUS_EQ_Lot_Status_Req_In)
    {
        return EIS_CUS_EQ_Lot_Status_Req(EIS_CUS_EQ_Lot_Status_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_Lot_Status_Req(EIS_CUS_EQ_Lot_Status_Req_In_Tag EIS_CUS_EQ_Lot_Status_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_Lot_Status_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_Lot_Status_Req_In_Tag(former, EIS_CUS_EQ_Lot_Status_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_Lot_Status_Rep(EIS_CUS_EQ_Lot_Status_Rep_In_Tag EIS_CUS_EQ_Lot_Status_Rep_In)
    {
        return EIS_CUS_EQ_Lot_Status_Rep(EIS_CUS_EQ_Lot_Status_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_Lot_Status_Rep(EIS_CUS_EQ_Lot_Status_Rep_In_Tag EIS_CUS_EQ_Lot_Status_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_Lot_Status_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_Lot_Status_Rep_In_Tag(former, EIS_CUS_EQ_Lot_Status_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_Lot_Count_Event(EIS_CUS_EQ_Lot_Count_Event_In_Tag EIS_CUS_EQ_Lot_Count_Event_In)
    {
        return EIS_CUS_EQ_Lot_Count_Event(EIS_CUS_EQ_Lot_Count_Event_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_Lot_Count_Event(EIS_CUS_EQ_Lot_Count_Event_In_Tag EIS_CUS_EQ_Lot_Count_Event_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_Lot_Count_Event");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_Lot_Count_Event_In_Tag(former, EIS_CUS_EQ_Lot_Count_Event_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Lot_End_Info(CUS_Lot_End_Info_In_Tag CUS_Lot_End_Info_In)
    {
        return CUS_Lot_End_Info(CUS_Lot_End_Info_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Lot_End_Info(CUS_Lot_End_Info_In_Tag CUS_Lot_End_Info_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Lot_End_Info");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Lot_End_Info_In_Tag(former, CUS_Lot_End_Info_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Maint_End_Info(CUS_Maint_End_Info_In_Tag CUS_Maint_End_Info_In)
    {
        return CUS_Maint_End_Info(CUS_Maint_End_Info_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Maint_End_Info(CUS_Maint_End_Info_In_Tag CUS_Maint_End_Info_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Maint_End_Info");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Maint_End_Info_In_Tag(former, CUS_Maint_End_Info_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean FMB_EIS_CUS_STATUS_CHANGE(FMB_EIS_CUS_STATUS_CHANGE_IN_TAG FMB_EIS_CUS_STATUS_CHANGE_IN)
    {
        return FMB_EIS_CUS_STATUS_CHANGE(FMB_EIS_CUS_STATUS_CHANGE_IN, "", 0, DeliveryType.UNICAST);
    }
    public static boolean FMB_EIS_CUS_STATUS_CHANGE(FMB_EIS_CUS_STATUS_CHANGE_IN_TAG FMB_EIS_CUS_STATUS_CHANGE_IN, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "FMB_EIS_CUS_STATUS_CHANGE");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_FMB_EIS_CUS_STATUS_CHANGE_IN_TAG(former, FMB_EIS_CUS_STATUS_CHANGE_IN);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_OnOff_Event(EIS_CUS_EQ_OnOff_Event_In_Tag EIS_CUS_EQ_OnOff_Event_In)
    {
        return EIS_CUS_EQ_OnOff_Event(EIS_CUS_EQ_OnOff_Event_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_OnOff_Event(EIS_CUS_EQ_OnOff_Event_In_Tag EIS_CUS_EQ_OnOff_Event_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_OnOff_Event");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_OnOff_Event_In_Tag(former, EIS_CUS_EQ_OnOff_Event_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_BPCS_Fail(EIS_CUS_BPCS_Fail_In_Tag EIS_CUS_BPCS_Fail_In)
    {
        return EIS_CUS_BPCS_Fail(EIS_CUS_BPCS_Fail_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_BPCS_Fail(EIS_CUS_BPCS_Fail_In_Tag EIS_CUS_BPCS_Fail_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_BPCS_Fail");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_BPCS_Fail_In_Tag(former, EIS_CUS_BPCS_Fail_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_CCS_Fail(CUS_Eap_CCS_Fail_In_Tag CUS_Eap_CCS_Fail_In)
    {
        return CUS_Eap_CCS_Fail(CUS_Eap_CCS_Fail_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_CCS_Fail(CUS_Eap_CCS_Fail_In_Tag CUS_Eap_CCS_Fail_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_CCS_Fail");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_CCS_Fail_In_Tag(former, CUS_Eap_CCS_Fail_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_Chip_Cnt_Diff(CUS_Eap_Chip_Cnt_Diff_In_Tag CUS_Eap_Chip_Cnt_Diff_In)
    {
        return CUS_Eap_Chip_Cnt_Diff(CUS_Eap_Chip_Cnt_Diff_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_Chip_Cnt_Diff(CUS_Eap_Chip_Cnt_Diff_In_Tag CUS_Eap_Chip_Cnt_Diff_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_Chip_Cnt_Diff");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_Chip_Cnt_Diff_In_Tag(former, CUS_Eap_Chip_Cnt_Diff_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_CCS_EQ_Data(CUS_Eap_CCS_EQ_Data_In_Tag CUS_Eap_CCS_EQ_Data_In)
    {
        return CUS_Eap_CCS_EQ_Data(CUS_Eap_CCS_EQ_Data_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_CCS_EQ_Data(CUS_Eap_CCS_EQ_Data_In_Tag CUS_Eap_CCS_EQ_Data_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_CCS_EQ_Data");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_CCS_EQ_Data_In_Tag(former, CUS_Eap_CCS_EQ_Data_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_release_EQ(CUS_Eap_release_EQ_In_Tag CUS_Eap_release_EQ_In)
    {
        return CUS_Eap_release_EQ(CUS_Eap_release_EQ_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_release_EQ(CUS_Eap_release_EQ_In_Tag CUS_Eap_release_EQ_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_release_EQ");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_release_EQ_In_Tag(former, CUS_Eap_release_EQ_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_MesEap_Inhibit_EQ(CUS_MesEap_Inhibit_EQ_In_Tag CUS_MesEap_Inhibit_EQ_In)
    {
        return CUS_MesEap_Inhibit_EQ(CUS_MesEap_Inhibit_EQ_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_MesEap_Inhibit_EQ(CUS_MesEap_Inhibit_EQ_In_Tag CUS_MesEap_Inhibit_EQ_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_MesEap_Inhibit_EQ");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_MesEap_Inhibit_EQ_In_Tag(former, CUS_MesEap_Inhibit_EQ_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_LOT_Release_Data(CUS_Eap_LOT_Release_Data_In_Tag CUS_Eap_LOT_Release_Data_In)
    {
        return CUS_Eap_LOT_Release_Data(CUS_Eap_LOT_Release_Data_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_LOT_Release_Data(CUS_Eap_LOT_Release_Data_In_Tag CUS_Eap_LOT_Release_Data_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_LOT_Release_Data");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_LOT_Release_Data_In_Tag(former, CUS_Eap_LOT_Release_Data_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_Communication_ON(CUS_Eap_Communication_ON_In_Tag CUS_Eap_Communication_ON_In)
    {
        return CUS_Eap_Communication_ON(CUS_Eap_Communication_ON_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_Communication_ON(CUS_Eap_Communication_ON_In_Tag CUS_Eap_Communication_ON_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_Communication_ON");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_Communication_ON_In_Tag(former, CUS_Eap_Communication_ON_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_Communication_OFF(CUS_Eap_Communication_OFF_In_Tag CUS_Eap_Communication_OFF_In)
    {
        return CUS_Eap_Communication_OFF(CUS_Eap_Communication_OFF_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_Communication_OFF(CUS_Eap_Communication_OFF_In_Tag CUS_Eap_Communication_OFF_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_Communication_OFF");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_Communication_OFF_In_Tag(former, CUS_Eap_Communication_OFF_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_Material_Attach(CUS_Eap_Material_Attach_In_Tag CUS_Eap_Material_Attach_In)
    {
        return CUS_Eap_Material_Attach(CUS_Eap_Material_Attach_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_Material_Attach(CUS_Eap_Material_Attach_In_Tag CUS_Eap_Material_Attach_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_Material_Attach");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_Material_Attach_In_Tag(former, CUS_Eap_Material_Attach_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_RasData_Change(CUS_Eap_RasData_Change_In_Tag CUS_Eap_RasData_Change_In)
    {
        return CUS_Eap_RasData_Change(CUS_Eap_RasData_Change_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_RasData_Change(CUS_Eap_RasData_Change_In_Tag CUS_Eap_RasData_Change_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_RasData_Change");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_RasData_Change_In_Tag(former, CUS_Eap_RasData_Change_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean CUS_Eap_RasData_Req(CUS_Eap_RasData_Req_In_Tag CUS_Eap_RasData_Req_In)
    {
        return CUS_Eap_RasData_Req(CUS_Eap_RasData_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean CUS_Eap_RasData_Req(CUS_Eap_RasData_Req_In_Tag CUS_Eap_RasData_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "CUS_Eap_RasData_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_CUS_Eap_RasData_Req_In_Tag(former, CUS_Eap_RasData_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_CAPY_change(EIS_CUS_CAPY_change_In_Tag EIS_CUS_CAPY_change_In)
    {
        return EIS_CUS_CAPY_change(EIS_CUS_CAPY_change_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_CAPY_change(EIS_CUS_CAPY_change_In_Tag EIS_CUS_CAPY_change_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_CAPY_change");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_CAPY_change_In_Tag(former, EIS_CUS_CAPY_change_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_CAPY_change_end(EIS_CUS_CAPY_change_end_In_Tag EIS_CUS_CAPY_change_end_In)
    {
        return EIS_CUS_CAPY_change_end(EIS_CUS_CAPY_change_end_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_CAPY_change_end(EIS_CUS_CAPY_change_end_In_Tag EIS_CUS_CAPY_change_end_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_CAPY_change_end");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_CAPY_change_end_In_Tag(former, EIS_CUS_CAPY_change_end_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Update_CRASEQPHIS(EIS_CUS_Update_CRASEQPHIS_In_Tag EIS_CUS_Update_CRASEQPHIS_In)
    {
        return EIS_CUS_Update_CRASEQPHIS(EIS_CUS_Update_CRASEQPHIS_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Update_CRASEQPHIS(EIS_CUS_Update_CRASEQPHIS_In_Tag EIS_CUS_Update_CRASEQPHIS_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Update_CRASEQPHIS");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_Update_CRASEQPHIS_In_Tag(former, EIS_CUS_Update_CRASEQPHIS_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQMessage_EQStop(EIS_CUS_EQMessage_EQStop_In_Tag EIS_CUS_EQMessage_EQStop_In)
    {
        return EIS_CUS_EQMessage_EQStop(EIS_CUS_EQMessage_EQStop_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQMessage_EQStop(EIS_CUS_EQMessage_EQStop_In_Tag EIS_CUS_EQMessage_EQStop_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQMessage_EQStop");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQMessage_EQStop_In_Tag(former, EIS_CUS_EQMessage_EQStop_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQDataRequest(EIS_CUS_EQDataRequest_In_Tag EIS_CUS_EQDataRequest_In)
    {
        return EIS_CUS_EQDataRequest(EIS_CUS_EQDataRequest_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQDataRequest(EIS_CUS_EQDataRequest_In_Tag EIS_CUS_EQDataRequest_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQDataRequest");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQDataRequest_In_Tag(former, EIS_CUS_EQDataRequest_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_SW_Event(EIS_CUS_SW_Event_In_Tag EIS_CUS_SW_Event_In)
    {
        return EIS_CUS_SW_Event(EIS_CUS_SW_Event_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_SW_Event(EIS_CUS_SW_Event_In_Tag EIS_CUS_SW_Event_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_SW_Event");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_SW_Event_In_Tag(former, EIS_CUS_SW_Event_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Get_Eqp_Info(EIS_CUS_MOLD_Get_Eqp_Info_In_Tag EIS_CUS_MOLD_Get_Eqp_Info_In)
    {
        return EIS_CUS_Get_Eqp_Info(EIS_CUS_MOLD_Get_Eqp_Info_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Get_Eqp_Info(EIS_CUS_MOLD_Get_Eqp_Info_In_Tag EIS_CUS_MOLD_Get_Eqp_Info_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Get_Eqp_Info");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Get_Eqp_Info_In_Tag(former, EIS_CUS_MOLD_Get_Eqp_Info_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_Set_Eqp_Info(EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag EIS_CUS_MOLD_Set_Eqp_Info_Out)
    {
        return EIS_CUS_Set_Eqp_Info(EIS_CUS_MOLD_Set_Eqp_Info_Out, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_Set_Eqp_Info(EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag EIS_CUS_MOLD_Set_Eqp_Info_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_Set_Eqp_Info");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag(former, EIS_CUS_MOLD_Set_Eqp_Info_Out);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Send_Comm_State(EIS_CUS_MOLD_Send_Comm_State_In_Tag EIS_CUS_MOLD_Send_Comm_State_In)
    {
        return EIS_CUS_MOLD_Send_Comm_State(EIS_CUS_MOLD_Send_Comm_State_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Send_Comm_State(EIS_CUS_MOLD_Send_Comm_State_In_Tag EIS_CUS_MOLD_Send_Comm_State_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Send_Comm_State");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Send_Comm_State_In_Tag(former, EIS_CUS_MOLD_Send_Comm_State_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Send_Eqp_State(EIS_CUS_MOLD_Send_Eqp_State_In_Tag EIS_CUS_MOLD_Send_Eqp_State_In)
    {
        return EIS_CUS_MOLD_Send_Eqp_State(EIS_CUS_MOLD_Send_Eqp_State_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Send_Eqp_State(EIS_CUS_MOLD_Send_Eqp_State_In_Tag EIS_CUS_MOLD_Send_Eqp_State_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Send_Eqp_State");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Send_Eqp_State_In_Tag(former, EIS_CUS_MOLD_Send_Eqp_State_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Send_Sort_No(EIS_CUS_MOLD_Send_Sort_No_In_Tag EIS_CUS_MOLD_Send_Sort_No_In)
    {
        return EIS_CUS_MOLD_Send_Sort_No(EIS_CUS_MOLD_Send_Sort_No_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Send_Sort_No(EIS_CUS_MOLD_Send_Sort_No_In_Tag EIS_CUS_MOLD_Send_Sort_No_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Send_Sort_No");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Send_Sort_No_In_Tag(former, EIS_CUS_MOLD_Send_Sort_No_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Send_Set_Para(EIS_CUS_MOLD_Send_Set_Para_In_Tag EIS_CUS_MOLD_Send_Set_Para_In)
    {
        return EIS_CUS_MOLD_Send_Set_Para(EIS_CUS_MOLD_Send_Set_Para_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Send_Set_Para(EIS_CUS_MOLD_Send_Set_Para_In_Tag EIS_CUS_MOLD_Send_Set_Para_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Send_Set_Para");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Send_Set_Para_In_Tag(former, EIS_CUS_MOLD_Send_Set_Para_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Send_Real_Para(EIS_CUS_MOLD_Send_Real_Para_In_Tag EIS_CUS_MOLD_Send_Real_Para_In)
    {
        return EIS_CUS_MOLD_Send_Real_Para(EIS_CUS_MOLD_Send_Real_Para_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Send_Real_Para(EIS_CUS_MOLD_Send_Real_Para_In_Tag EIS_CUS_MOLD_Send_Real_Para_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Send_Real_Para");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Send_Real_Para_In_Tag(former, EIS_CUS_MOLD_Send_Real_Para_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EISSPC_TRACE_DATA_SEND(EISSPC_TRACE_DATA_SEND_In_Tag EISSPC_TRACE_DATA_SEND_In)
    {
        return EISSPC_TRACE_DATA_SEND(EISSPC_TRACE_DATA_SEND_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EISSPC_TRACE_DATA_SEND(EISSPC_TRACE_DATA_SEND_In_Tag EISSPC_TRACE_DATA_SEND_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EISSPC_TRACE_DATA_SEND");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EISSPC_TRACE_DATA_SEND_In_Tag(former, EISSPC_TRACE_DATA_SEND_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Set_Mes_Release(EIS_CUS_MOLD_Set_Mes_Release_In_Tag EIS_CUS_MOLD_Set_Mes_Release_In)
    {
        return EIS_CUS_MOLD_Set_Mes_Release(EIS_CUS_MOLD_Set_Mes_Release_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Set_Mes_Release(EIS_CUS_MOLD_Set_Mes_Release_In_Tag EIS_CUS_MOLD_Set_Mes_Release_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Set_Mes_Release");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Set_Mes_Release_In_Tag(former, EIS_CUS_MOLD_Set_Mes_Release_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Set_Mes_Lock(EIS_CUS_MOLD_Set_Mes_Lock_In_Tag EIS_CUS_MOLD_Set_Mes_Lock_In)
    {
        return EIS_CUS_MOLD_Set_Mes_Lock(EIS_CUS_MOLD_Set_Mes_Lock_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Set_Mes_Lock(EIS_CUS_MOLD_Set_Mes_Lock_In_Tag EIS_CUS_MOLD_Set_Mes_Lock_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Set_Mes_Lock");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Set_Mes_Lock_In_Tag(former, EIS_CUS_MOLD_Set_Mes_Lock_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Lot_Start(EIS_CUS_MOLD_Lot_Start_In_Tag EIS_CUS_MOLD_Lot_Start_In)
    {
        return EIS_CUS_MOLD_Lot_Start(EIS_CUS_MOLD_Lot_Start_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Lot_Start(EIS_CUS_MOLD_Lot_Start_In_Tag EIS_CUS_MOLD_Lot_Start_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Lot_Start");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Lot_Start_In_Tag(former, EIS_CUS_MOLD_Lot_Start_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Func_Authority_Req(EIS_CUS_MOLD_Func_Authority_Req_In_Tag EIS_CUS_MOLD_Func_Authority_Req_In)
    {
        return EIS_CUS_MOLD_Func_Authority_Req(EIS_CUS_MOLD_Func_Authority_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Func_Authority_Req(EIS_CUS_MOLD_Func_Authority_Req_In_Tag EIS_CUS_MOLD_Func_Authority_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Func_Authority_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Func_Authority_Req_In_Tag(former, EIS_CUS_MOLD_Func_Authority_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_MOLD_Func_Authority_Rep(EIS_CUS_MOLD_Func_Authority_Rep_In_Tag EIS_CUS_MOLD_Func_Authority_Rep_In)
    {
        return EIS_CUS_MOLD_Func_Authority_Rep(EIS_CUS_MOLD_Func_Authority_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_MOLD_Func_Authority_Rep(EIS_CUS_MOLD_Func_Authority_Rep_In_Tag EIS_CUS_MOLD_Func_Authority_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_MOLD_Func_Authority_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_MOLD_Func_Authority_Rep_In_Tag(former, EIS_CUS_MOLD_Func_Authority_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_RFID_UID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return EIS_RFID_UID_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean EIS_RFID_UID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_RFID_UID_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_RFID_Write_Magazine_ID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return EIS_RFID_Write_Magazine_ID_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean EIS_RFID_Write_Magazine_ID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_RFID_Write_Magazine_ID_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_RFID_Write_Lot_ID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return EIS_RFID_Write_Lot_ID_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean EIS_RFID_Write_Lot_ID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_RFID_Write_Lot_ID_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean RFID_EIS_Start_Magazine_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return RFID_EIS_Start_Magazine_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean RFID_EIS_Start_Magazine_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "RFID_EIS_Start_Magazine_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean RFID_EIS_End_Magazine_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return RFID_EIS_End_Magazine_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean RFID_EIS_End_Magazine_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "RFID_EIS_End_Magazine_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Down_Req(EIS_EAP_Res_Down_In_Tag EIS_EAP_Res_Down_In)
    {
        return EIS_EAP_Down_Req(EIS_EAP_Res_Down_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Down_Req(EIS_EAP_Res_Down_In_Tag EIS_EAP_Res_Down_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Down_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Res_Down_In_Tag(former, EIS_EAP_Res_Down_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Terminal_Msg_Req(EIS_EAP_Res_Terminal_Msg_In_Tag EIS_EAP_Res_Terminal_Msg_In)
    {
        return EIS_EAP_Terminal_Msg_Req(EIS_EAP_Res_Terminal_Msg_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Terminal_Msg_Req(EIS_EAP_Res_Terminal_Msg_In_Tag EIS_EAP_Res_Terminal_Msg_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Terminal_Msg_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Res_Terminal_Msg_In_Tag(former, EIS_EAP_Res_Terminal_Msg_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Lot_Data_Req(EIS_EAP_Res_Lot_Data_In_Tag EIS_EAP_Res_Lot_Data_In)
    {
        return EIS_EAP_Lot_Data_Req(EIS_EAP_Res_Lot_Data_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Lot_Data_Req(EIS_EAP_Res_Lot_Data_In_Tag EIS_EAP_Res_Lot_Data_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Lot_Data_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Res_Lot_Data_In_Tag(former, EIS_EAP_Res_Lot_Data_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean RFID_EIS_Rewrite_Success_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return RFID_EIS_Rewrite_Success_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean RFID_EIS_Rewrite_Success_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "RFID_EIS_Rewrite_Success_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Lot_Info_Req(EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In)
    {
        return EAP_EIS_Lot_Info_Req(EIS_EAP_Lot_Info_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Lot_Info_Req(EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Lot_Info_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Lot_Info_In_Tag(former, EIS_EAP_Lot_Info_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_Lot_Info_Rep(EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In)
    {
        return EIS_EAP_Lot_Info_Rep(EIS_EAP_Lot_Info_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_Lot_Info_Rep(EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_Lot_Info_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_Lot_Info_In_Tag(former, EIS_EAP_Lot_Info_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_RFID_Read_Cmp(EIS_EAP_RFID_Read_Cmp_In_Tag EIS_EAP_RFID_Read_Cmp_In)
    {
        return EIS_EAP_RFID_Read_Cmp(EIS_EAP_RFID_Read_Cmp_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_RFID_Read_Cmp(EIS_EAP_RFID_Read_Cmp_In_Tag EIS_EAP_RFID_Read_Cmp_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_RFID_Read_Cmp");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_RFID_Read_Cmp_In_Tag(former, EIS_EAP_RFID_Read_Cmp_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_Equipment_Event(EAP_EIS_Equipment_Event_In_Tag EAP_EIS_Equipment_Event_In)
    {
        return EAP_EIS_Equipment_Event(EAP_EIS_Equipment_Event_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_Equipment_Event(EAP_EIS_Equipment_Event_In_Tag EAP_EIS_Equipment_Event_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_Equipment_Event");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_Equipment_Event_In_Tag(former, EAP_EIS_Equipment_Event_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean RFID_EIS_Erase_Fail_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return RFID_EIS_Erase_Fail_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean RFID_EIS_Erase_Fail_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "RFID_EIS_Erase_Fail_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean RFID_EIS_Write_Fail_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out)
    {
        return RFID_EIS_Write_Fail_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean RFID_EIS_Write_Fail_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "RFID_EIS_Write_Fail_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_CUS_EQ_Status_Event_Rep(EIS_CUS_EQ_Status_Event_Rep_In_Tag EIS_CUS_EQ_Status_Event_Rep_In)
    {
        return EIS_CUS_EQ_Status_Event_Rep(EIS_CUS_EQ_Status_Event_Rep_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_CUS_EQ_Status_Event_Rep(EIS_CUS_EQ_Status_Event_Rep_In_Tag EIS_CUS_EQ_Status_Event_Rep_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_CUS_EQ_Status_Event_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_CUS_EQ_Status_Event_Rep_In_Tag(former, EIS_CUS_EQ_Status_Event_Rep_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean MES_EIS_Terminal_Msg(MES_EIS_Terminal_Msg_In_Tag MES_EIS_Terminal_Msg_In)
    {
        return MES_EIS_Terminal_Msg(MES_EIS_Terminal_Msg_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean MES_EIS_Terminal_Msg(MES_EIS_Terminal_Msg_In_Tag MES_EIS_Terminal_Msg_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "MES_EIS_Terminal_Msg");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_MES_EIS_Terminal_Msg_In_Tag(former, MES_EIS_Terminal_Msg_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_GW_Info_Req(EAP_EIS_GW_Info_Req_In_Tag EAP_EIS_GW_Info_Req_In)
    {
        return EAP_EIS_GW_Info_Req(EAP_EIS_GW_Info_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_GW_Info_Req(EAP_EIS_GW_Info_Req_In_Tag EAP_EIS_GW_Info_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_GW_Info_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_GW_Info_Req_In_Tag(former, EAP_EIS_GW_Info_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_GW_Info_Rep(EIS_EAP_GW_Info_Rep_Out_Tag EIS_EAP_GW_Info_Rep_Out)
    {
        return EIS_EAP_GW_Info_Rep(EIS_EAP_GW_Info_Rep_Out, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_GW_Info_Rep(EIS_EAP_GW_Info_Rep_Out_Tag EIS_EAP_GW_Info_Rep_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_GW_Info_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_GW_Info_Rep_Out_Tag(former, EIS_EAP_GW_Info_Rep_Out);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EAP_EIS_GW_Trans_Req(EAP_EIS_GW_Trans_Req_In_Tag EAP_EIS_GW_Trans_Req_In)
    {
        return EAP_EIS_GW_Trans_Req(EAP_EIS_GW_Trans_Req_In, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EAP_EIS_GW_Trans_Req(EAP_EIS_GW_Trans_Req_In_Tag EAP_EIS_GW_Trans_Req_In, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EAP_EIS_GW_Trans_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EAP_EIS_GW_Trans_Req_In_Tag(former, EAP_EIS_GW_Trans_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean EIS_EAP_GW_Trans_Rep(EIS_EAP_GW_Trans_Rep_Out_Tag EIS_EAP_GW_Trans_Rep_Out)
    {
        return EIS_EAP_GW_Trans_Rep(EIS_EAP_GW_Trans_Rep_Out, "", 0, DeliveryType.UNICAST);
    }
    public static boolean EIS_EAP_GW_Trans_Rep(EIS_EAP_GW_Trans_Rep_Out_Tag EIS_EAP_GW_Trans_Rep_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "EIS_EAP_GW_Trans_Rep");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_EIS_EAP_GW_Trans_Rep_Out_Tag(former, EIS_EAP_GW_Trans_Rep_Out);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean BETSEIS_Lot_Start_Req(BETSEIS_Lot_Start_Req_In_Tag BETSEIS_Lot_Start_Req_In, BETSEIS_Lot_Start_Req_Out_Tag BETSEIS_Lot_Start_Req_Out)
    {
        return BETSEIS_Lot_Start_Req(BETSEIS_Lot_Start_Req_In, BETSEIS_Lot_Start_Req_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean BETSEIS_Lot_Start_Req(BETSEIS_Lot_Start_Req_In_Tag BETSEIS_Lot_Start_Req_In, BETSEIS_Lot_Start_Req_Out_Tag BETSEIS_Lot_Start_Req_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "BETSEIS_Lot_Start_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Lot_Start_Req_In_Tag(former, BETSEIS_Lot_Start_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_BETSEIS_Lot_Start_Req_Out_Tag(former, BETSEIS_Lot_Start_Req_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean BETSEIS_Lot_End_Req(BETSEIS_Lot_End_Req_In_Tag BETSEIS_Lot_End_Req_In, BETSEIS_Lot_End_Req_Out_Tag BETSEIS_Lot_End_Req_Out)
    {
        return BETSEIS_Lot_End_Req(BETSEIS_Lot_End_Req_In, BETSEIS_Lot_End_Req_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean BETSEIS_Lot_End_Req(BETSEIS_Lot_End_Req_In_Tag BETSEIS_Lot_End_Req_In, BETSEIS_Lot_End_Req_Out_Tag BETSEIS_Lot_End_Req_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "BETSEIS_Lot_End_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Lot_End_Req_In_Tag(former, BETSEIS_Lot_End_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_BETSEIS_Lot_End_Req_Out_Tag(former, BETSEIS_Lot_End_Req_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean BETSEIS_Lot_Info_Req(BETSEIS_Lot_Info_Req_In_Tag BETSEIS_Lot_Info_Req_In, BETSEIS_Lot_Info_Req_Out_Tag BETSEIS_Lot_Info_Req_Out)
    {
        return BETSEIS_Lot_Info_Req(BETSEIS_Lot_Info_Req_In, BETSEIS_Lot_Info_Req_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean BETSEIS_Lot_Info_Req(BETSEIS_Lot_Info_Req_In_Tag BETSEIS_Lot_Info_Req_In, BETSEIS_Lot_Info_Req_Out_Tag BETSEIS_Lot_Info_Req_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "BETSEIS_Lot_Info_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Lot_Info_Req_In_Tag(former, BETSEIS_Lot_Info_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_BETSEIS_Lot_Info_Req_Out_Tag(former, BETSEIS_Lot_Info_Req_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }

    public static boolean BETSEIS_Hold_Req(BETSEIS_Hold_Req_In_Tag BETSEIS_Hold_Req_In, BETSEIS_Hold_Req_Out_Tag BETSEIS_Hold_Req_Out)
    {
        return BETSEIS_Hold_Req(BETSEIS_Hold_Req_In, BETSEIS_Hold_Req_Out, "", 0, DeliveryType.REQUEST);
    }
    public static boolean BETSEIS_Hold_Req(BETSEIS_Hold_Req_In_Tag BETSEIS_Hold_Req_In, BETSEIS_Hold_Req_Out_Tag BETSEIS_Hold_Req_Out, String channel, int ttl, short mode)
    {
        try
        {
            if (null == channel || channel.trim().equals(""))
            {
                if (null == getEISChannel() || getEISChannel().trim().equals(""))
                    throw new Exception("Invalid Channel!");

                channel = getEISChannel();
            }
            ttl = ttl <= 0 ? getEISTTL() : ttl;

            Message msg = h101stub.getInstance().createMessage();
            msg.putProperty(h101stub.XGEN_TAG_VERSION, h101stub.XGEN_VERSION);
            msg.putProperty(h101stub.XGEN_TAG_MODULE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_INTERFACE, "EIS");
            msg.putProperty(h101stub.XGEN_TAG_OPERATION, "BETSEIS_Hold_Req");

            StreamTransformer former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Hold_Req_In_Tag(former, BETSEIS_Hold_Req_In);
            msg.putData(former.getBytes());

            Message rep = h101stub.getInstance().sendMessage(msg, channel, ttl, mode);
            
            if (DeliveryType.REQUEST == mode) /* Just RequestReply */
            {
                if(null == rep)
                    throw new Exception("Invalid Message!");

                former = new StreamTransformerImpl((byte[]) rep.getData());
                EISType.transform_BETSEIS_Hold_Req_Out_Tag(former, BETSEIS_Hold_Req_Out);
            }

	    	return true;
	    }
        catch(Exception e)
        {
            h101stub.setMessage(e.getMessage());
            return false;
        }
    }


}

