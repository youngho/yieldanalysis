/*******************************************************************************
' EISType.cs
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2017-01-18 15:55:11
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

package com.tptech.mes;

import com.miracom.oneoone.transceiverx.StreamTransformer;

public class EISType extends h101type
{
    public static class EIS_CUS_EQ_ALARM_Event_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  alarm_category;
        public String  alarm_id;
        public String  alarm_msg;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
        public String  tran_comment;
    }

    public static class EIS_CUS_Mode_Change_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  res_ctrl_mode;
        public String  res_proc_mode;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_Status_Change_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  res_ctrl_mode;
        public String  res_proc_mode;
        public String  process_state;
        public String  equipment_mode;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_Collect_Data_In_Tag_data_list_value_list
    {
        public String  value;
    }

    public static class EIS_Collect_Data_In_Tag_data_list
    {
        public String  char_id;
        public String  unit_id;
        public int     value_count;
        public int     _size_value_list;
        public EIS_Collect_Data_In_Tag_data_list_value_list[] value_list;
    }

    public static class EIS_Collect_Data_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public String  h_channel;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public int     count;
        public int     _size_data_list;
        public EIS_Collect_Data_In_Tag_data_list[] data_list;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_EQ_Terminal_Message_Send_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  message;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_Current_Lot_Info_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Lot_Start_Info_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Last_Dev_Chg_Info_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  recipe_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Current_Lot_Info_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  recipe_id;
        public char    eq_state;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_EQ_Status_Event_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  event_code;
        public char    up_down_flag;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
        public String  tran_comment;
    }

    public static class EIS_CUS_EQ_Lot_Status_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_EQ_Lot_Status_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list
    {
        public String  value;
    }

    public static class EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list
    {
        public String  char_id;
        public String  unit_id;
        public int     value_count;
        public int     _size_value_list;
        public EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list[] value_list;
    }

    public static class EIS_CUS_EQ_Lot_Count_Event_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  lot_id;
        public String  res_id;
        public String  mat_id;
        public String  oper;
        public int     chip_cnt;
        public int     mg_cnt;
        public int     resv_qty_1;
        public int     resv_qty_2;
        public int     resv_qty_3;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  update_time;
        public String  update_user;
        public int     count;
        public int     _size_data_list;
        public EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list[] data_list;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Lot_End_Info_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Maint_End_Info_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  maint_code;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class FMB_EIS_CUS_STATUS_CHANGE_IN_TAG
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  control_state;
        public String  process_state;
        public String  equipment_mode;
        public String  light_tower_state;
        public String  inloadport_state;
        public String  inunloadport_state;
        public String  outloadport_state;
        public String  outunloadport_state;
        public String  operation_mode;
        public String  ppexec_name;
        public String  zone1_temp;
        public String  zone2_temp;
        public String  zone3_temp;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_EQ_OnOff_Event_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  action;
        public String  tran_time;
        public String  res_model;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
        public String  tran_comment;
    }

    public static class EIS_CUS_BPCS_Fail_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  recipe_id;
        public String  res_model;
        public String  message;
        public String  tran_time;
        public String  bpcs_down_code;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
        public String  tran_comment;
    }

    public static class CUS_Eap_CCS_Fail_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Eap_Chip_Cnt_Diff_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Eap_CCS_EQ_Data_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public String  resv_1;
        public String  resv_2;
        public String  resv_3;
        public String  resv_4;
        public String  resv_5;
        public String  resv_6;
        public String  resv_7;
        public String  resv_8;
        public String  resv_9;
        public String  resv_10;
    }

    public static class CUS_Eap_release_EQ_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_MesEap_Inhibit_EQ_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Eap_LOT_Release_Data_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public String  resv_1;
        public String  resv_2;
        public String  resv_3;
        public String  resv_4;
        public String  resv_5;
        public String  resv_6;
        public String  resv_7;
        public String  resv_8;
        public String  resv_9;
        public String  resv_10;
    }

    public static class CUS_Eap_Communication_ON_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Eap_Communication_OFF_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class CUS_Eap_Material_Attach_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  mat_id;
        public String  oper;
        public int     qty;
        public int     max_qty;
    }

    public static class CUS_Eap_RasData_Change_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  res_desc;
        public String  res_type;
        public String  res_grp_1;
        public String  res_grp_2;
        public String  res_grp_3;
        public String  res_grp_4;
        public String  res_grp_5;
        public String  res_grp_6;
        public String  res_grp_7;
        public String  res_grp_8;
        public String  res_grp_9;
        public String  res_grp_10;
        public char    use_fac_prt_flag;
        public String  res_sts_prt_1;
        public String  res_sts_prt_2;
        public String  res_sts_prt_3;
        public String  res_sts_prt_4;
        public String  res_sts_prt_5;
        public String  res_sts_prt_6;
        public String  res_sts_prt_7;
        public String  res_sts_prt_8;
        public String  res_sts_prt_9;
        public String  res_sts_prt_10;
        public String  res_cmf_1;
        public String  res_cmf_2;
        public String  res_cmf_3;
        public String  res_cmf_4;
        public String  res_cmf_5;
        public String  res_cmf_6;
        public String  res_cmf_7;
        public String  res_cmf_8;
        public String  res_cmf_9;
        public String  res_cmf_10;
        public String  res_cmf_11;
        public String  res_cmf_12;
        public String  res_cmf_13;
        public String  res_cmf_14;
        public String  res_cmf_15;
        public String  res_cmf_16;
        public String  res_cmf_17;
        public String  res_cmf_18;
        public String  res_cmf_19;
        public String  res_cmf_20;
        public String  area_id;
        public String  sub_area_id;
        public String  res_location;
        public char    proc_rule;
        public int     max_proc_count;
        public String  batch_cond_1;
        public String  batch_cond_2;
        public char    pm_sch_enable_flag;
        public char    unit_base_st_flag;
        public char    sec_chk_flag;
        public char    gather_alarm_flag;
        public char    delete_flag;
        public String  delete_user_id;
        public String  delete_time;
        public String  create_user_id;
        public String  create_time;
        public String  update_user_id;
        public String  update_time;
        public char    res_up_down_flag;
        public String  res_pri_sts;
        public String  res_sts_1;
        public String  res_sts_2;
        public String  res_sts_3;
        public String  res_sts_4;
        public String  res_sts_5;
        public String  res_sts_6;
        public String  res_sts_7;
        public String  res_sts_8;
        public String  res_sts_9;
        public String  res_sts_10;
        public String  lot_id;
        public String  sublot_id;
        public String  crr_id;
        public String  res_ctrl_mode;
        public String  res_proc_mode;
        public String  last_recipe_id;
        public int     proc_count;
        public String  last_start_time;
        public String  last_end_time;
        public String  last_down_time;
        public int     last_down_hist_seq;
        public String  last_event_id;
        public String  last_event_time;
        public int     last_active_hist_seq;
        public int     last_hist_seq;
        public int     window_time;
    }

    public static class CUS_Eap_RasData_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
    }

    public static class EIS_CUS_CAPY_change_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  message;
        public String  tran_time;
        public String  bpcs_down_code;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  tran_comment;
    }

    public static class EIS_CUS_CAPY_change_end_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  message;
        public String  tran_time;
        public String  bpcs_down_code;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  tran_comment;
    }

    public static class EIS_CUS_Update_CRASEQPHIS_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  state;
        public String  pre_state;
    }

    public static class EIS_CUS_EQMessage_EQStop_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  message;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_SW_Event_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  message;
        public String  tran_time;
        public String  sw_down_code;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  tran_comment;
    }

    public static class EIS_CUS_MOLD_Get_Eqp_Info_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list
    {
        public int     eqp_module_no;
        public int     prev_shotcount;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list
    {
        public String  plc_data_kind;
        public String  plc_mem_type;
        public int     plc_addr;
        public int     plc_read_len;
        public String  plc_mask;
        public String  plc_data_ward;
        public char    plc_clear_after_read;
        public int     plc_data_decimal;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list
    {
        public String  plc_mem_type;
        public int     plc_addr;
        public int     plc_read_len;
        public int     err_start_no;
        public int     err_end_no;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list
    {
        public String  error_no;
        public String  error_start_time;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list
    {
        public String  plc_mem_type;
        public int     plc_addr;
        public int     plc_read_len;
        public int     alm_start_no;
        public int     alm_end_no;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list
    {
        public String  alarm_no;
        public String  alarm_start_time;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list
    {
        public String  para_kind;
        public int     para_item_no;
        public String  para_name;
        public String  plc_mem_type;
        public int     plc_addr;
        public int     plc_read_len;
        public String  plc_data_ward;
        public int     plc_divide;
        public int     eqp_module_no;
        public int     plc_data_decimal;
    }

    public static class EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  mes_time;
        public String  eqp_name;
        public String  eqp_model;
        public int     eqp_module_count;
        public int     comm_port;
        public int     baud_rate;
        public int     byte_size;
        public int     stop_bit;
        public String  parity;
        public int     para_read_shot;
        public int     total_error_count;
        public int     total_alarm_count;
        public int     prev_lineauto;
        public int     prev_sort_no;
        public int     press_used;
        public int     module_count;
        public int     _size_module_list;
        public EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list[] module_list;
        public int     state_count;
        public int     _size_state_list;
        public EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list[] state_list;
        public int     error_count;
        public int     _size_error_list;
        public EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list[] error_list;
        public int     error_state_count;
        public int     _size_error_state_list;
        public EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list[] error_state_list;
        public int     alarm_count;
        public int     _size_alarm_list;
        public EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list[] alarm_list;
        public int     amarm_state_count;
        public int     _size_alarm_state_list;
        public EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list[] alarm_state_list;
        public int     para_count;
        public int     _size_para_list;
        public EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list[] para_list;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_MOLD_Send_Comm_State_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  comm_state;
        public String  comm_state_time;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_MOLD_Send_Eqp_State_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  eqp_state_kind;
        public int     module_no;
        public int     value;
        public String  eqp_state_time;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_MOLD_Send_Sort_No_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public int     eqp_sort_no;
        public String  eqp_sort_no_time;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para
    {
        public int     para_item_no;
        public String  para_name;
        public double  para_value;
        public int     eqp_module_no;
    }

    public static class EIS_CUS_MOLD_Send_Set_Para_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  report_time;
        public String  eqp_name;
        public int     set_para_count;
        public int     _size_set_para;
        public EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para[] set_para;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para
    {
        public int     para_item_no;
        public String  para_name;
        public double  para_value;
        public int     eqp_module_no;
    }

    public static class EIS_CUS_MOLD_Send_Real_Para_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  report_time;
        public String  eqp_name;
        public int     real_para_count;
        public int     _size_real_para;
        public EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para[] real_para;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EISSPC_TRACE_DATA_SEND_In_Tag_data_list
    {
        public String  parameter_id;
        public String  parameter_name;
        public String  value;
        public String  usl;
        public String  target;
        public String  lsl;
        public String  ucl;
        public String  cl;
        public String  lcl;
        public char    rule_type;
    }

    public static class EISSPC_TRACE_DATA_SEND_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  recipe_id;
        public String  slot_no;
        public int     _size_data_list;
        public EISSPC_TRACE_DATA_SEND_In_Tag_data_list[] data_list;
        public String  resv_1;
        public String  resv_2;
        public String  resv_3;
        public String  resv_4;
        public String  resv_5;
        public String  resv_6;
        public String  resv_7;
        public String  resv_8;
        public String  resv_9;
        public String  resv_10;
    }

    public static class EIS_CUS_MOLD_Set_Mes_Release_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  command;
        public String  release_time;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_MOLD_Set_Mes_Lock_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  command;
        public String  lock_time;
        public int     lock_code;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_MOLD_Lot_Start_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  start_time;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_MOLD_Func_Authority_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  func_code;
        public String  user_id;
        public String  user_pwd;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_MOLD_Func_Authority_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public char    approve;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_CUS_EQDataRequest_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
    }

    public static class EIS_CUS_EQ_Dummy_Change_Clear_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
    }

    public static class CUS_Equipment_Status_History_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  lot_id;
        public String  mat_id;
        public String  oper;
        public String  m_lot_id;
        public String  res_id;
        public String  model;
        public String  recipe;
        public int     chip_cnt;
        public double  wire_length;
        public int     frame_no;
        public String  frame_start_time;
        public String  frame_end_time;
        public int     run;
        public int     idle;
        public int     alarm;
        public int     frame;
        public int     not_active;
        public int     assist;
        public int     etc;
        public String  note;
        public String  action_time;
        public int     before_chip_cnt;
        public double  before_wire_length;
        public String  rsv_field_1;
        public String  rsv_field_2;
        public String  rsv_field_3;
        public String  rsv_field_4;
        public String  rsv_field_5;
        public char    rsv_flag_1;
        public char    rsv_flag_2;
        public char    rsv_flag_3;
    }

    public static class CUS_Equipment_Process_State_His_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  model;
        public String  action;
        public String  action_time;
        public String  process_state;
        public String  pre_process_state;
        public String  control_state;
        public String  note;
        public String  rsv_field_1;
        public String  rsv_field_2;
        public String  rsv_field_3;
    }

    public static class EIS_CUS_Frame_Reject_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_New_Mat_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public char    value;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_CCS_Send_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_CCS_Approve_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_DA_Current_Lot_Info_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  recipe_id;
        public char    value;
        public String  comment;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAPEIS_EMS_Fail_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  code;
    }

    public static class EAP_EIS_Lot_Start_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lotid;
        public String  carrierid;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_EAP_Lot_Start_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  lotID;
        public String  message;
        public String  recipeID;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAPEIS_OVEN_Lot_Start_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lotid;
        public String  carrierid;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EISEAP_OVEN_Lot_Start_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  lotID;
        public String  message;
        public String  recipeID;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAPEIS_OVEN_Lot_End_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lotid;
        public String  carrierid;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EISEAP_OVEN_Lot_End_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  lotID;
        public String  message;
        public String  recipeID;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAP_EIS_Lot_End_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lotid;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_EAP_Lot_End_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  lotID;
        public String  message;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAP_EIS_Label_Create_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  labelID;
        public String  lotID;
        public String  portID;
    }

    public static class EAP_EIS_Label_Validation_Fail_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  label_id;
    }

    public static class EAP_EIS_Windows_Time_Over_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  blade_lenth_1;
        public String  blade_lenth_2;
    }

    public static class EAP_EIS_DA_Start_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EAP_EIS_DA_Run_Down_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EAP_EIS_Count_Verification_Fail_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  fail_msg;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list
    {
        public String  value;
    }

    public static class EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list
    {
        public String  lotid;
        public String  carrierid;
        public String  tool_id;
        public String  recipe_id;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public int     _size_value_list;
        public EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list[] value_list;
    }

    public static class EAP_EIS_Lot_Start_Multi_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public int     _size_data_list;
        public EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list[] data_list;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
    }

    public static class EIS_EAP_Lot_Start_Multi_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  lotID;
        public String  message;
        public String  recipeID;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list
    {
        public String  value;
    }

    public static class EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list
    {
        public String  lotid;
        public String  carrierid;
        public String  tool_id;
        public String  recipe_id;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public int     _size_value_list;
        public EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list[] value_list;
    }

    public static class EAP_EIS_Lot_End_Multi_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public int     _size_data_list;
        public EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list[] data_list;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
    }

    public static class EIS_EAP_Lot_End_Multi_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  lotID;
        public String  message;
        public String  recipeID;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  fail_msg;
        public String  recipeID;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class RFIDEIS_Read_Req_In_Tag
    {
        public String  mw_channel;
        public String  reader_ip;
        public String  lot_id;
        public String  res_id;
        public char    antenna_port;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EISRFID_Read_Rep_In_Tag
    {
        public String  mw_channel;
        public String  reader_ip;
        public char    result;
        public String  msg_code;
        public String  msg;
    }

    public static class RFIDEIS_Lot_Id_Req_In_Tag
    {
        public String  mw_channel;
        public String  reader_ip;
        public String  res_id;
        public char    antenna_port;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EISRFID_Lot_Id_Rep_In_Tag
    {
        public String  mw_channel;
        public String  reader_ip;
        public String  res_id;
        public char    antenna_port;
        public String  lot_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class AMC_EIS_Feeder_Status_In_Tag_feeder_list
    {
        public String  feeder_channel_id;
        public String  feeder_id;
        public String  feeder_status;
    }

    public static class AMC_EIS_Feeder_Status_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public int     _size_feeder_list;
        public AMC_EIS_Feeder_Status_In_Tag_feeder_list[] feeder_list;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class AMC_EIS_Lock_Cmd_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  feeder_id;
        public String  reel_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EIS_AMC_Lock_Cmd_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  result_msg;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EAP_EIS_Tool_Change_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  tool_id;
        public String  ball_id;
        public String  blade_id1;
        public String  blade_id2;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_EAP_Tool_Change_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  message;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAP_EIS_Locking_Start_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lotid;
        public String  recipeid;
        public String  carrierid;
        public String  tool_id;
        public String  ball_id;
        public String  blade_id1;
        public String  blade_id2;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_EAP_Locking_Start_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  message;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAP_EIS_Tray_Full_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lotid;
        public String  recipeid;
        public String  carrierid;
        public String  tool_id;
        public String  ball_id;
        public String  blade_id1;
        public String  blade_id2;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_EAP_Tray_Full_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public char    result;
        public String  message;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_CUS_EQ_Locking_Message_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  message;
        public char    locking_flag;
        public char    stop_flag;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
    }

    public static class EIS_RFID_Request_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  reader_ip;
        public char    antenna_port_1;
        public String  uid_1;
        public String  magazine_id_1;
        public String  lot_id_1;
        public char    antenna_port_2;
        public String  uid_2;
        public String  magazine_id_2;
        public String  lot_id_2;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class RFID_EIS_Reply_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  res_id;
        public String  reader_ip;
        public char    antenna_port_1;
        public String  uid_1;
        public String  magazine_id_1;
        public String  lot_id_1;
        public char    antenna_port_2;
        public String  uid_2;
        public String  magazine_id_2;
        public String  lot_id_2;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EIS_EAP_Res_Down_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EIS_EAP_Res_Terminal_Msg_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  message;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EIS_EAP_Res_Lot_Data_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public int     mag_index;
        public char    error;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EIS_EAP_Lot_Info_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EIS_EAP_RFID_Read_Cmp_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  lot_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EAP_EIS_Equipment_Event_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  event_id;
        public String  state;
        public String  port;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EIS_CUS_EQ_Status_Event_Rep_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public char    result_flag;
        public String  result_comment;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class MES_EIS_Terminal_Msg_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  res_id;
        public String  message;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
    }

    public static class EAP_EIS_GW_Info_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  gw_lot_id;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_EAP_GW_Info_Rep_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  gw_lot_id;
        public String  material_id;
        public String  maker_code;
        public String  maker_name;
        public String  description;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EAP_EIS_GW_Trans_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  gw_lot_id;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class EIS_EAP_GW_Trans_Rep_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  gw_lot_id;
        public String  res_id;
        public String  cmf_1;
        public String  cmf_2;
        public String  cmf_3;
        public String  cmf_4;
        public String  cmf_5;
        public String  cmf_6;
        public String  cmf_7;
        public String  cmf_8;
        public String  cmf_9;
        public String  cmf_10;
    }

    public static class BETSEIS_Lot_Start_Req_In_Tag
    {
        public String  h_passport;//""
        public char    h_language;//1
        public String  h_factory;//HMBT1
        public String  h_user_id;//4
        public String  h_password;
        public char    h_proc_step; //1
        public String  factory; //HMBT1
        public String  res_id;
        public String  lot_id;
        public String  test_mode;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }

    public static class BETSEIS_Lot_Start_Req_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  lot_id;
        public String  mat_id;
        public String  flow;
        public int     qty;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }

    public static class BETSEIS_Lot_End_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lot_id;
        public String  oper;
        public int     qty;
        public String  program;
        public String  board_id;
        public String  head;
        public int     op_input;
        public int     cat1;
        public int     cat2;
        public int     cat3;
        public int     cat4;
        public int     cat5;
        public int     cat6;
        public int     cat7;
        public int     cat8;
        public int     cat9;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }

    public static class BETSEIS_Lot_End_Req_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  factory;
        public String  lot_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }

    public static class BETSEIS_Lot_Info_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  res_id;
        public String  lot_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }

    public static class BETSEIS_Lot_Info_Req_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  factory;
        public String  res_id;
        public String  lot_id;
        public String  mat_id;
        public String  lot_type;
        public String  flow;
        public String  oper;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }

    public static class BETSEIS_Hold_Req_In_Tag
    {
        public String  h_passport;
        public char    h_language;
        public String  h_factory;
        public String  h_user_id;
        public String  h_password;
        public char    h_proc_step;
        public String  factory;
        public String  lot_id;
        public String  hold_comment;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }

    public static class BETSEIS_Hold_Req_Out_Tag
    {
        public char    h_status_value;
        public String  h_msg_code;
        public String  h_msg;
        public String  h_field_msg;
        public String  h_db_err_msg;
        public String  lot_id;
        public String  resv_field_1;
        public String  resv_field_2;
        public String  resv_field_3;
        public String  resv_field_4;
        public String  resv_field_5;
        public String  resv_field_6;
        public String  resv_field_7;
        public String  resv_field_8;
        public String  resv_field_9;
        public String  resv_field_10;
        public char    resv_flag_1;
        public char    resv_flag_2;
        public char    resv_flag_3;
        public char    resv_flag_4;
        public char    resv_flag_5;
        public char    resv_flag_6;
        public char    resv_flag_7;
        public char    resv_flag_8;
        public char    resv_flag_9;
        public char    resv_flag_10;
    }



    public static void serialize_EIS_CUS_EQ_ALARM_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_ALARM_Event_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.alarm_category, getTrimSize(target.alarm_category, 30));
        former.writeMsgSizedString(target.alarm_id, getTrimSize(target.alarm_id, 30));
        former.writeMsgSizedString(target.alarm_msg, getTrimSize(target.alarm_msg, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
        former.writeMsgSizedString(target.tran_comment, getTrimSize(target.tran_comment, 500));
    }

    public static void transform_EIS_CUS_EQ_ALARM_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_ALARM_Event_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.alarm_category = former.readMsgString();
        source.alarm_id = former.readMsgString();
        source.alarm_msg = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
        source.tran_comment = former.readMsgString();
    }

    public static void serialize_EIS_CUS_Mode_Change_In_Tag(StreamTransformer former, EIS_CUS_Mode_Change_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.res_ctrl_mode, getTrimSize(target.res_ctrl_mode, 2));
        former.writeMsgSizedString(target.res_proc_mode, getTrimSize(target.res_proc_mode, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_Mode_Change_In_Tag(StreamTransformer former, EIS_CUS_Mode_Change_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.res_ctrl_mode = former.readMsgString();
        source.res_proc_mode = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_Status_Change_In_Tag(StreamTransformer former, EIS_CUS_Status_Change_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.res_ctrl_mode, getTrimSize(target.res_ctrl_mode, 2));
        former.writeMsgSizedString(target.res_proc_mode, getTrimSize(target.res_proc_mode, 10));
        former.writeMsgSizedString(target.process_state, getTrimSize(target.process_state, 30));
        former.writeMsgSizedString(target.equipment_mode, getTrimSize(target.equipment_mode, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_Status_Change_In_Tag(StreamTransformer former, EIS_CUS_Status_Change_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.res_ctrl_mode = former.readMsgString();
        source.res_proc_mode = former.readMsgString();
        source.process_state = former.readMsgString();
        source.equipment_mode = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_Collect_Data_In_Tag_data_list_value_list(StreamTransformer former, EIS_Collect_Data_In_Tag_data_list_value_list target) throws Exception
    {
        former.writeMsgSizedString(target.value, getTrimSize(target.value, 20));
    }

    public static void serialize_EIS_Collect_Data_In_Tag_data_list(StreamTransformer former, EIS_Collect_Data_In_Tag_data_list target) throws Exception
    {
        former.writeMsgSizedString(target.char_id, getTrimSize(target.char_id, 25));
        former.writeMsgSizedString(target.unit_id, getTrimSize(target.unit_id, 25));
        former.writeMsgInt(target.value_count);
        target._size_value_list = (25 >= target._size_value_list ? target._size_value_list : 25);
        former.writeMsgInt(target._size_value_list);
        try
        {
            for(int i = 0; i < target._size_value_list; i++)
            {
                serialize_EIS_Collect_Data_In_Tag_data_list_value_list(former, target.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_Collect_Data_In_Tag_data_list_value_list]");
        }
    }

    public static void serialize_EIS_Collect_Data_In_Tag(StreamTransformer former, EIS_Collect_Data_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgSizedString(target.h_channel, getTrimSize(target.h_channel, 50));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgInt(target.count);
        target._size_data_list = (1000 >= target._size_data_list ? target._size_data_list : 1000);
        former.writeMsgInt(target._size_data_list);
        try
        {
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_EIS_Collect_Data_In_Tag_data_list(former, target.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_Collect_Data_In_Tag_data_list]");
        }
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_Collect_Data_In_Tag_data_list_value_list(StreamTransformer former, EIS_Collect_Data_In_Tag_data_list_value_list source) throws Exception
    {
        source.value = former.readMsgString();
    }

    public static void transform_EIS_Collect_Data_In_Tag_data_list(StreamTransformer former, EIS_Collect_Data_In_Tag_data_list source) throws Exception
    {
        source.char_id = former.readMsgString();
        source.unit_id = former.readMsgString();
        source.value_count = former.readMsgInt();
        source._size_value_list = former.readMsgInt();
        source.value_list = new EIS_Collect_Data_In_Tag_data_list_value_list[source._size_value_list];
        try
        {
            for(int i = 0; i < source._size_value_list; i++)
            {
                source.value_list[i] = new EIS_Collect_Data_In_Tag_data_list_value_list();
                transform_EIS_Collect_Data_In_Tag_data_list_value_list(former, source.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_Collect_Data_In_Tag_data_list_value_list]");
        }
    }

    public static void transform_EIS_Collect_Data_In_Tag(StreamTransformer former, EIS_Collect_Data_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_channel = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.count = former.readMsgInt();
        source._size_data_list = former.readMsgInt();
        source.data_list = new EIS_Collect_Data_In_Tag_data_list[source._size_data_list];
        try
        {
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new EIS_Collect_Data_In_Tag_data_list();
                transform_EIS_Collect_Data_In_Tag_data_list(former, source.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_Collect_Data_In_Tag_data_list]");
        }
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_EQ_Terminal_Message_Send_In_Tag(StreamTransformer former, CUS_EQ_Terminal_Message_Send_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 10000));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_EQ_Terminal_Message_Send_In_Tag(StreamTransformer former, CUS_EQ_Terminal_Message_Send_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.message = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag(StreamTransformer former, EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag(StreamTransformer former, EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_Current_Lot_Info_Req_In_Tag(StreamTransformer former, EIS_CUS_Current_Lot_Info_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_Current_Lot_Info_Req_In_Tag(StreamTransformer former, EIS_CUS_Current_Lot_Info_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Lot_Start_Info_In_Tag(StreamTransformer former, CUS_Lot_Start_Info_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Lot_Start_Info_In_Tag(StreamTransformer former, CUS_Lot_Start_Info_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Last_Dev_Chg_Info_Rep_In_Tag(StreamTransformer former, CUS_Last_Dev_Chg_Info_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 200));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Last_Dev_Chg_Info_Rep_In_Tag(StreamTransformer former, CUS_Last_Dev_Chg_Info_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Current_Lot_Info_Rep_In_Tag(StreamTransformer former, CUS_Current_Lot_Info_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 200));
        former.writeMsgChar(target.eq_state);
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Current_Lot_Info_Rep_In_Tag(StreamTransformer former, CUS_Current_Lot_Info_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.eq_state = former.readMsgChar();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQ_Status_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_Status_Event_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.event_code, getTrimSize(target.event_code, 30));
        former.writeMsgChar(target.up_down_flag);
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
        former.writeMsgSizedString(target.tran_comment, getTrimSize(target.tran_comment, 400));
    }

    public static void transform_EIS_CUS_EQ_Status_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_Status_Event_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.event_code = former.readMsgString();
        source.up_down_flag = former.readMsgChar();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
        source.tran_comment = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQ_Lot_Status_Req_In_Tag(StreamTransformer former, EIS_CUS_EQ_Lot_Status_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_EQ_Lot_Status_Req_In_Tag(StreamTransformer former, EIS_CUS_EQ_Lot_Status_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQ_Lot_Status_Rep_In_Tag(StreamTransformer former, EIS_CUS_EQ_Lot_Status_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_EQ_Lot_Status_Rep_In_Tag(StreamTransformer former, EIS_CUS_EQ_Lot_Status_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list(StreamTransformer former, EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list target) throws Exception
    {
        former.writeMsgSizedString(target.value, getTrimSize(target.value, 20));
    }

    public static void serialize_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list(StreamTransformer former, EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list target) throws Exception
    {
        former.writeMsgSizedString(target.char_id, getTrimSize(target.char_id, 25));
        former.writeMsgSizedString(target.unit_id, getTrimSize(target.unit_id, 25));
        former.writeMsgInt(target.value_count);
        target._size_value_list = (25 >= target._size_value_list ? target._size_value_list : 25);
        former.writeMsgInt(target._size_value_list);
        try
        {
            for(int i = 0; i < target._size_value_list; i++)
            {
                serialize_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list(former, target.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list]");
        }
    }

    public static void serialize_EIS_CUS_EQ_Lot_Count_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_Lot_Count_Event_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgInt(target.chip_cnt);
        former.writeMsgInt(target.mg_cnt);
        former.writeMsgInt(target.resv_qty_1);
        former.writeMsgInt(target.resv_qty_2);
        former.writeMsgInt(target.resv_qty_3);
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 30));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 30));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 30));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 30));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 30));
        former.writeMsgSizedString(target.update_time, getTrimSize(target.update_time, 14));
        former.writeMsgSizedString(target.update_user, getTrimSize(target.update_user, 20));
        former.writeMsgInt(target.count);
        target._size_data_list = (1000 >= target._size_data_list ? target._size_data_list : 1000);
        former.writeMsgInt(target._size_data_list);
        try
        {
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list(former, target.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list]");
        }
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list(StreamTransformer former, EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list source) throws Exception
    {
        source.value = former.readMsgString();
    }

    public static void transform_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list(StreamTransformer former, EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list source) throws Exception
    {
        source.char_id = former.readMsgString();
        source.unit_id = former.readMsgString();
        source.value_count = former.readMsgInt();
        source._size_value_list = former.readMsgInt();
        source.value_list = new EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list[source._size_value_list];
        try
        {
            for(int i = 0; i < source._size_value_list; i++)
            {
                source.value_list[i] = new EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list();
                transform_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list(former, source.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list_value_list]");
        }
    }

    public static void transform_EIS_CUS_EQ_Lot_Count_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_Lot_Count_Event_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.chip_cnt = former.readMsgInt();
        source.mg_cnt = former.readMsgInt();
        source.resv_qty_1 = former.readMsgInt();
        source.resv_qty_2 = former.readMsgInt();
        source.resv_qty_3 = former.readMsgInt();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.update_time = former.readMsgString();
        source.update_user = former.readMsgString();
        source.count = former.readMsgInt();
        source._size_data_list = former.readMsgInt();
        source.data_list = new EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list[source._size_data_list];
        try
        {
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list();
                transform_EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list(former, source.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_EQ_Lot_Count_Event_In_Tag_data_list]");
        }
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Lot_End_Info_In_Tag(StreamTransformer former, CUS_Lot_End_Info_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Lot_End_Info_In_Tag(StreamTransformer former, CUS_Lot_End_Info_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Maint_End_Info_In_Tag(StreamTransformer former, CUS_Maint_End_Info_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.maint_code, getTrimSize(target.maint_code, 25));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Maint_End_Info_In_Tag(StreamTransformer former, CUS_Maint_End_Info_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.maint_code = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_FMB_EIS_CUS_STATUS_CHANGE_IN_TAG(StreamTransformer former, FMB_EIS_CUS_STATUS_CHANGE_IN_TAG target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.control_state, getTrimSize(target.control_state, 30));
        former.writeMsgSizedString(target.process_state, getTrimSize(target.process_state, 30));
        former.writeMsgSizedString(target.equipment_mode, getTrimSize(target.equipment_mode, 30));
        former.writeMsgSizedString(target.light_tower_state, getTrimSize(target.light_tower_state, 30));
        former.writeMsgSizedString(target.inloadport_state, getTrimSize(target.inloadport_state, 30));
        former.writeMsgSizedString(target.inunloadport_state, getTrimSize(target.inunloadport_state, 30));
        former.writeMsgSizedString(target.outloadport_state, getTrimSize(target.outloadport_state, 30));
        former.writeMsgSizedString(target.outunloadport_state, getTrimSize(target.outunloadport_state, 30));
        former.writeMsgSizedString(target.operation_mode, getTrimSize(target.operation_mode, 30));
        former.writeMsgSizedString(target.ppexec_name, getTrimSize(target.ppexec_name, 30));
        former.writeMsgSizedString(target.zone1_temp, getTrimSize(target.zone1_temp, 30));
        former.writeMsgSizedString(target.zone2_temp, getTrimSize(target.zone2_temp, 30));
        former.writeMsgSizedString(target.zone3_temp, getTrimSize(target.zone3_temp, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_FMB_EIS_CUS_STATUS_CHANGE_IN_TAG(StreamTransformer former, FMB_EIS_CUS_STATUS_CHANGE_IN_TAG source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.control_state = former.readMsgString();
        source.process_state = former.readMsgString();
        source.equipment_mode = former.readMsgString();
        source.light_tower_state = former.readMsgString();
        source.inloadport_state = former.readMsgString();
        source.inunloadport_state = former.readMsgString();
        source.outloadport_state = former.readMsgString();
        source.outunloadport_state = former.readMsgString();
        source.operation_mode = former.readMsgString();
        source.ppexec_name = former.readMsgString();
        source.zone1_temp = former.readMsgString();
        source.zone2_temp = former.readMsgString();
        source.zone3_temp = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQ_OnOff_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_OnOff_Event_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.action, getTrimSize(target.action, 30));
        former.writeMsgSizedString(target.tran_time, getTrimSize(target.tran_time, 14));
        former.writeMsgSizedString(target.res_model, getTrimSize(target.res_model, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
        former.writeMsgSizedString(target.tran_comment, getTrimSize(target.tran_comment, 500));
    }

    public static void transform_EIS_CUS_EQ_OnOff_Event_In_Tag(StreamTransformer former, EIS_CUS_EQ_OnOff_Event_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.action = former.readMsgString();
        source.tran_time = former.readMsgString();
        source.res_model = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
        source.tran_comment = former.readMsgString();
    }

    public static void serialize_EIS_CUS_BPCS_Fail_In_Tag(StreamTransformer former, EIS_CUS_BPCS_Fail_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 30));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 30));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 30));
        former.writeMsgSizedString(target.res_model, getTrimSize(target.res_model, 30));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 100));
        former.writeMsgSizedString(target.tran_time, getTrimSize(target.tran_time, 14));
        former.writeMsgSizedString(target.bpcs_down_code, getTrimSize(target.bpcs_down_code, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
        former.writeMsgSizedString(target.tran_comment, getTrimSize(target.tran_comment, 500));
    }

    public static void transform_EIS_CUS_BPCS_Fail_In_Tag(StreamTransformer former, EIS_CUS_BPCS_Fail_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.res_model = former.readMsgString();
        source.message = former.readMsgString();
        source.tran_time = former.readMsgString();
        source.bpcs_down_code = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
        source.tran_comment = former.readMsgString();
    }

    public static void serialize_CUS_Eap_CCS_Fail_In_Tag(StreamTransformer former, CUS_Eap_CCS_Fail_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Eap_CCS_Fail_In_Tag(StreamTransformer former, CUS_Eap_CCS_Fail_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Eap_Chip_Cnt_Diff_In_Tag(StreamTransformer former, CUS_Eap_Chip_Cnt_Diff_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Eap_Chip_Cnt_Diff_In_Tag(StreamTransformer former, CUS_Eap_Chip_Cnt_Diff_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Eap_CCS_EQ_Data_In_Tag(StreamTransformer former, CUS_Eap_CCS_EQ_Data_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 30));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 1000));
        former.writeMsgSizedString(target.resv_1, getTrimSize(target.resv_1, 1000));
        former.writeMsgSizedString(target.resv_2, getTrimSize(target.resv_2, 1000));
        former.writeMsgSizedString(target.resv_3, getTrimSize(target.resv_3, 1000));
        former.writeMsgSizedString(target.resv_4, getTrimSize(target.resv_4, 1000));
        former.writeMsgSizedString(target.resv_5, getTrimSize(target.resv_5, 1000));
        former.writeMsgSizedString(target.resv_6, getTrimSize(target.resv_6, 1000));
        former.writeMsgSizedString(target.resv_7, getTrimSize(target.resv_7, 1000));
        former.writeMsgSizedString(target.resv_8, getTrimSize(target.resv_8, 1000));
        former.writeMsgSizedString(target.resv_9, getTrimSize(target.resv_9, 1000));
        former.writeMsgSizedString(target.resv_10, getTrimSize(target.resv_10, 1000));
    }

    public static void transform_CUS_Eap_CCS_EQ_Data_In_Tag(StreamTransformer former, CUS_Eap_CCS_EQ_Data_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.resv_1 = former.readMsgString();
        source.resv_2 = former.readMsgString();
        source.resv_3 = former.readMsgString();
        source.resv_4 = former.readMsgString();
        source.resv_5 = former.readMsgString();
        source.resv_6 = former.readMsgString();
        source.resv_7 = former.readMsgString();
        source.resv_8 = former.readMsgString();
        source.resv_9 = former.readMsgString();
        source.resv_10 = former.readMsgString();
    }

    public static void serialize_CUS_Eap_release_EQ_In_Tag(StreamTransformer former, CUS_Eap_release_EQ_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Eap_release_EQ_In_Tag(StreamTransformer former, CUS_Eap_release_EQ_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_MesEap_Inhibit_EQ_In_Tag(StreamTransformer former, CUS_MesEap_Inhibit_EQ_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_MesEap_Inhibit_EQ_In_Tag(StreamTransformer former, CUS_MesEap_Inhibit_EQ_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Eap_LOT_Release_Data_In_Tag(StreamTransformer former, CUS_Eap_LOT_Release_Data_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 30));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 1000));
        former.writeMsgSizedString(target.resv_1, getTrimSize(target.resv_1, 1000));
        former.writeMsgSizedString(target.resv_2, getTrimSize(target.resv_2, 1000));
        former.writeMsgSizedString(target.resv_3, getTrimSize(target.resv_3, 1000));
        former.writeMsgSizedString(target.resv_4, getTrimSize(target.resv_4, 1000));
        former.writeMsgSizedString(target.resv_5, getTrimSize(target.resv_5, 1000));
        former.writeMsgSizedString(target.resv_6, getTrimSize(target.resv_6, 1000));
        former.writeMsgSizedString(target.resv_7, getTrimSize(target.resv_7, 1000));
        former.writeMsgSizedString(target.resv_8, getTrimSize(target.resv_8, 1000));
        former.writeMsgSizedString(target.resv_9, getTrimSize(target.resv_9, 1000));
        former.writeMsgSizedString(target.resv_10, getTrimSize(target.resv_10, 1000));
    }

    public static void transform_CUS_Eap_LOT_Release_Data_In_Tag(StreamTransformer former, CUS_Eap_LOT_Release_Data_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.resv_1 = former.readMsgString();
        source.resv_2 = former.readMsgString();
        source.resv_3 = former.readMsgString();
        source.resv_4 = former.readMsgString();
        source.resv_5 = former.readMsgString();
        source.resv_6 = former.readMsgString();
        source.resv_7 = former.readMsgString();
        source.resv_8 = former.readMsgString();
        source.resv_9 = former.readMsgString();
        source.resv_10 = former.readMsgString();
    }

    public static void serialize_CUS_Eap_Communication_ON_In_Tag(StreamTransformer former, CUS_Eap_Communication_ON_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Eap_Communication_ON_In_Tag(StreamTransformer former, CUS_Eap_Communication_ON_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Eap_Communication_OFF_In_Tag(StreamTransformer former, CUS_Eap_Communication_OFF_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_CUS_Eap_Communication_OFF_In_Tag(StreamTransformer former, CUS_Eap_Communication_OFF_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_CUS_Eap_Material_Attach_In_Tag(StreamTransformer former, CUS_Eap_Material_Attach_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgInt(target.qty);
        former.writeMsgInt(target.max_qty);
    }

    public static void transform_CUS_Eap_Material_Attach_In_Tag(StreamTransformer former, CUS_Eap_Material_Attach_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.qty = former.readMsgInt();
        source.max_qty = former.readMsgInt();
    }

    public static void serialize_CUS_Eap_RasData_Change_In_Tag(StreamTransformer former, CUS_Eap_RasData_Change_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.res_desc, getTrimSize(target.res_desc, 50));
        former.writeMsgSizedString(target.res_type, getTrimSize(target.res_type, 20));
        former.writeMsgSizedString(target.res_grp_1, getTrimSize(target.res_grp_1, 20));
        former.writeMsgSizedString(target.res_grp_2, getTrimSize(target.res_grp_2, 20));
        former.writeMsgSizedString(target.res_grp_3, getTrimSize(target.res_grp_3, 20));
        former.writeMsgSizedString(target.res_grp_4, getTrimSize(target.res_grp_4, 20));
        former.writeMsgSizedString(target.res_grp_5, getTrimSize(target.res_grp_5, 20));
        former.writeMsgSizedString(target.res_grp_6, getTrimSize(target.res_grp_6, 20));
        former.writeMsgSizedString(target.res_grp_7, getTrimSize(target.res_grp_7, 20));
        former.writeMsgSizedString(target.res_grp_8, getTrimSize(target.res_grp_8, 20));
        former.writeMsgSizedString(target.res_grp_9, getTrimSize(target.res_grp_9, 20));
        former.writeMsgSizedString(target.res_grp_10, getTrimSize(target.res_grp_10, 20));
        former.writeMsgChar(target.use_fac_prt_flag);
        former.writeMsgSizedString(target.res_sts_prt_1, getTrimSize(target.res_sts_prt_1, 30));
        former.writeMsgSizedString(target.res_sts_prt_2, getTrimSize(target.res_sts_prt_2, 30));
        former.writeMsgSizedString(target.res_sts_prt_3, getTrimSize(target.res_sts_prt_3, 30));
        former.writeMsgSizedString(target.res_sts_prt_4, getTrimSize(target.res_sts_prt_4, 30));
        former.writeMsgSizedString(target.res_sts_prt_5, getTrimSize(target.res_sts_prt_5, 30));
        former.writeMsgSizedString(target.res_sts_prt_6, getTrimSize(target.res_sts_prt_6, 30));
        former.writeMsgSizedString(target.res_sts_prt_7, getTrimSize(target.res_sts_prt_7, 30));
        former.writeMsgSizedString(target.res_sts_prt_8, getTrimSize(target.res_sts_prt_8, 30));
        former.writeMsgSizedString(target.res_sts_prt_9, getTrimSize(target.res_sts_prt_9, 30));
        former.writeMsgSizedString(target.res_sts_prt_10, getTrimSize(target.res_sts_prt_10, 30));
        former.writeMsgSizedString(target.res_cmf_1, getTrimSize(target.res_cmf_1, 30));
        former.writeMsgSizedString(target.res_cmf_2, getTrimSize(target.res_cmf_2, 30));
        former.writeMsgSizedString(target.res_cmf_3, getTrimSize(target.res_cmf_3, 30));
        former.writeMsgSizedString(target.res_cmf_4, getTrimSize(target.res_cmf_4, 30));
        former.writeMsgSizedString(target.res_cmf_5, getTrimSize(target.res_cmf_5, 30));
        former.writeMsgSizedString(target.res_cmf_6, getTrimSize(target.res_cmf_6, 30));
        former.writeMsgSizedString(target.res_cmf_7, getTrimSize(target.res_cmf_7, 30));
        former.writeMsgSizedString(target.res_cmf_8, getTrimSize(target.res_cmf_8, 30));
        former.writeMsgSizedString(target.res_cmf_9, getTrimSize(target.res_cmf_9, 30));
        former.writeMsgSizedString(target.res_cmf_10, getTrimSize(target.res_cmf_10, 30));
        former.writeMsgSizedString(target.res_cmf_11, getTrimSize(target.res_cmf_11, 30));
        former.writeMsgSizedString(target.res_cmf_12, getTrimSize(target.res_cmf_12, 30));
        former.writeMsgSizedString(target.res_cmf_13, getTrimSize(target.res_cmf_13, 30));
        former.writeMsgSizedString(target.res_cmf_14, getTrimSize(target.res_cmf_14, 30));
        former.writeMsgSizedString(target.res_cmf_15, getTrimSize(target.res_cmf_15, 30));
        former.writeMsgSizedString(target.res_cmf_16, getTrimSize(target.res_cmf_16, 30));
        former.writeMsgSizedString(target.res_cmf_17, getTrimSize(target.res_cmf_17, 30));
        former.writeMsgSizedString(target.res_cmf_18, getTrimSize(target.res_cmf_18, 30));
        former.writeMsgSizedString(target.res_cmf_19, getTrimSize(target.res_cmf_19, 30));
        former.writeMsgSizedString(target.res_cmf_20, getTrimSize(target.res_cmf_20, 30));
        former.writeMsgSizedString(target.area_id, getTrimSize(target.area_id, 20));
        former.writeMsgSizedString(target.sub_area_id, getTrimSize(target.sub_area_id, 20));
        former.writeMsgSizedString(target.res_location, getTrimSize(target.res_location, 20));
        former.writeMsgChar(target.proc_rule);
        former.writeMsgInt(target.max_proc_count);
        former.writeMsgSizedString(target.batch_cond_1, getTrimSize(target.batch_cond_1, 12));
        former.writeMsgSizedString(target.batch_cond_2, getTrimSize(target.batch_cond_2, 12));
        former.writeMsgChar(target.pm_sch_enable_flag);
        former.writeMsgChar(target.unit_base_st_flag);
        former.writeMsgChar(target.sec_chk_flag);
        former.writeMsgChar(target.gather_alarm_flag);
        former.writeMsgChar(target.delete_flag);
        former.writeMsgSizedString(target.delete_user_id, getTrimSize(target.delete_user_id, 20));
        former.writeMsgSizedString(target.delete_time, getTrimSize(target.delete_time, 14));
        former.writeMsgSizedString(target.create_user_id, getTrimSize(target.create_user_id, 20));
        former.writeMsgSizedString(target.create_time, getTrimSize(target.create_time, 14));
        former.writeMsgSizedString(target.update_user_id, getTrimSize(target.update_user_id, 20));
        former.writeMsgSizedString(target.update_time, getTrimSize(target.update_time, 14));
        former.writeMsgChar(target.res_up_down_flag);
        former.writeMsgSizedString(target.res_pri_sts, getTrimSize(target.res_pri_sts, 30));
        former.writeMsgSizedString(target.res_sts_1, getTrimSize(target.res_sts_1, 30));
        former.writeMsgSizedString(target.res_sts_2, getTrimSize(target.res_sts_2, 30));
        former.writeMsgSizedString(target.res_sts_3, getTrimSize(target.res_sts_3, 30));
        former.writeMsgSizedString(target.res_sts_4, getTrimSize(target.res_sts_4, 30));
        former.writeMsgSizedString(target.res_sts_5, getTrimSize(target.res_sts_5, 30));
        former.writeMsgSizedString(target.res_sts_6, getTrimSize(target.res_sts_6, 30));
        former.writeMsgSizedString(target.res_sts_7, getTrimSize(target.res_sts_7, 30));
        former.writeMsgSizedString(target.res_sts_8, getTrimSize(target.res_sts_8, 30));
        former.writeMsgSizedString(target.res_sts_9, getTrimSize(target.res_sts_9, 30));
        former.writeMsgSizedString(target.res_sts_10, getTrimSize(target.res_sts_10, 30));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.sublot_id, getTrimSize(target.sublot_id, 30));
        former.writeMsgSizedString(target.crr_id, getTrimSize(target.crr_id, 20));
        former.writeMsgSizedString(target.res_ctrl_mode, getTrimSize(target.res_ctrl_mode, 2));
        former.writeMsgSizedString(target.res_proc_mode, getTrimSize(target.res_proc_mode, 10));
        former.writeMsgSizedString(target.last_recipe_id, getTrimSize(target.last_recipe_id, 30));
        former.writeMsgInt(target.proc_count);
        former.writeMsgSizedString(target.last_start_time, getTrimSize(target.last_start_time, 14));
        former.writeMsgSizedString(target.last_end_time, getTrimSize(target.last_end_time, 14));
        former.writeMsgSizedString(target.last_down_time, getTrimSize(target.last_down_time, 14));
        former.writeMsgInt(target.last_down_hist_seq);
        former.writeMsgSizedString(target.last_event_id, getTrimSize(target.last_event_id, 12));
        former.writeMsgSizedString(target.last_event_time, getTrimSize(target.last_event_time, 14));
        former.writeMsgInt(target.last_active_hist_seq);
        former.writeMsgInt(target.last_hist_seq);
        former.writeMsgInt(target.window_time);
    }

    public static void transform_CUS_Eap_RasData_Change_In_Tag(StreamTransformer former, CUS_Eap_RasData_Change_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.res_desc = former.readMsgString();
        source.res_type = former.readMsgString();
        source.res_grp_1 = former.readMsgString();
        source.res_grp_2 = former.readMsgString();
        source.res_grp_3 = former.readMsgString();
        source.res_grp_4 = former.readMsgString();
        source.res_grp_5 = former.readMsgString();
        source.res_grp_6 = former.readMsgString();
        source.res_grp_7 = former.readMsgString();
        source.res_grp_8 = former.readMsgString();
        source.res_grp_9 = former.readMsgString();
        source.res_grp_10 = former.readMsgString();
        source.use_fac_prt_flag = former.readMsgChar();
        source.res_sts_prt_1 = former.readMsgString();
        source.res_sts_prt_2 = former.readMsgString();
        source.res_sts_prt_3 = former.readMsgString();
        source.res_sts_prt_4 = former.readMsgString();
        source.res_sts_prt_5 = former.readMsgString();
        source.res_sts_prt_6 = former.readMsgString();
        source.res_sts_prt_7 = former.readMsgString();
        source.res_sts_prt_8 = former.readMsgString();
        source.res_sts_prt_9 = former.readMsgString();
        source.res_sts_prt_10 = former.readMsgString();
        source.res_cmf_1 = former.readMsgString();
        source.res_cmf_2 = former.readMsgString();
        source.res_cmf_3 = former.readMsgString();
        source.res_cmf_4 = former.readMsgString();
        source.res_cmf_5 = former.readMsgString();
        source.res_cmf_6 = former.readMsgString();
        source.res_cmf_7 = former.readMsgString();
        source.res_cmf_8 = former.readMsgString();
        source.res_cmf_9 = former.readMsgString();
        source.res_cmf_10 = former.readMsgString();
        source.res_cmf_11 = former.readMsgString();
        source.res_cmf_12 = former.readMsgString();
        source.res_cmf_13 = former.readMsgString();
        source.res_cmf_14 = former.readMsgString();
        source.res_cmf_15 = former.readMsgString();
        source.res_cmf_16 = former.readMsgString();
        source.res_cmf_17 = former.readMsgString();
        source.res_cmf_18 = former.readMsgString();
        source.res_cmf_19 = former.readMsgString();
        source.res_cmf_20 = former.readMsgString();
        source.area_id = former.readMsgString();
        source.sub_area_id = former.readMsgString();
        source.res_location = former.readMsgString();
        source.proc_rule = former.readMsgChar();
        source.max_proc_count = former.readMsgInt();
        source.batch_cond_1 = former.readMsgString();
        source.batch_cond_2 = former.readMsgString();
        source.pm_sch_enable_flag = former.readMsgChar();
        source.unit_base_st_flag = former.readMsgChar();
        source.sec_chk_flag = former.readMsgChar();
        source.gather_alarm_flag = former.readMsgChar();
        source.delete_flag = former.readMsgChar();
        source.delete_user_id = former.readMsgString();
        source.delete_time = former.readMsgString();
        source.create_user_id = former.readMsgString();
        source.create_time = former.readMsgString();
        source.update_user_id = former.readMsgString();
        source.update_time = former.readMsgString();
        source.res_up_down_flag = former.readMsgChar();
        source.res_pri_sts = former.readMsgString();
        source.res_sts_1 = former.readMsgString();
        source.res_sts_2 = former.readMsgString();
        source.res_sts_3 = former.readMsgString();
        source.res_sts_4 = former.readMsgString();
        source.res_sts_5 = former.readMsgString();
        source.res_sts_6 = former.readMsgString();
        source.res_sts_7 = former.readMsgString();
        source.res_sts_8 = former.readMsgString();
        source.res_sts_9 = former.readMsgString();
        source.res_sts_10 = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.sublot_id = former.readMsgString();
        source.crr_id = former.readMsgString();
        source.res_ctrl_mode = former.readMsgString();
        source.res_proc_mode = former.readMsgString();
        source.last_recipe_id = former.readMsgString();
        source.proc_count = former.readMsgInt();
        source.last_start_time = former.readMsgString();
        source.last_end_time = former.readMsgString();
        source.last_down_time = former.readMsgString();
        source.last_down_hist_seq = former.readMsgInt();
        source.last_event_id = former.readMsgString();
        source.last_event_time = former.readMsgString();
        source.last_active_hist_seq = former.readMsgInt();
        source.last_hist_seq = former.readMsgInt();
        source.window_time = former.readMsgInt();
    }

    public static void serialize_CUS_Eap_RasData_Req_In_Tag(StreamTransformer former, CUS_Eap_RasData_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
    }

    public static void transform_CUS_Eap_RasData_Req_In_Tag(StreamTransformer former, CUS_Eap_RasData_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
    }

    public static void serialize_EIS_CUS_CAPY_change_In_Tag(StreamTransformer former, EIS_CUS_CAPY_change_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 30));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 30));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 100));
        former.writeMsgSizedString(target.tran_time, getTrimSize(target.tran_time, 14));
        former.writeMsgSizedString(target.bpcs_down_code, getTrimSize(target.bpcs_down_code, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.tran_comment, getTrimSize(target.tran_comment, 500));
    }

    public static void transform_EIS_CUS_CAPY_change_In_Tag(StreamTransformer former, EIS_CUS_CAPY_change_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.message = former.readMsgString();
        source.tran_time = former.readMsgString();
        source.bpcs_down_code = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.tran_comment = former.readMsgString();
    }

    public static void serialize_EIS_CUS_CAPY_change_end_In_Tag(StreamTransformer former, EIS_CUS_CAPY_change_end_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 30));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 30));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 100));
        former.writeMsgSizedString(target.tran_time, getTrimSize(target.tran_time, 14));
        former.writeMsgSizedString(target.bpcs_down_code, getTrimSize(target.bpcs_down_code, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.tran_comment, getTrimSize(target.tran_comment, 500));
    }

    public static void transform_EIS_CUS_CAPY_change_end_In_Tag(StreamTransformer former, EIS_CUS_CAPY_change_end_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.message = former.readMsgString();
        source.tran_time = former.readMsgString();
        source.bpcs_down_code = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.tran_comment = former.readMsgString();
    }

    public static void serialize_EIS_CUS_Update_CRASEQPHIS_In_Tag(StreamTransformer former, EIS_CUS_Update_CRASEQPHIS_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.state, getTrimSize(target.state, 30));
        former.writeMsgSizedString(target.pre_state, getTrimSize(target.pre_state, 10));
    }

    public static void transform_EIS_CUS_Update_CRASEQPHIS_In_Tag(StreamTransformer former, EIS_CUS_Update_CRASEQPHIS_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.state = former.readMsgString();
        source.pre_state = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQMessage_EQStop_In_Tag(StreamTransformer former, EIS_CUS_EQMessage_EQStop_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 500));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_EQMessage_EQStop_In_Tag(StreamTransformer former, EIS_CUS_EQMessage_EQStop_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.message = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_SW_Event_In_Tag(StreamTransformer former, EIS_CUS_SW_Event_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 30));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 30));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 100));
        former.writeMsgSizedString(target.tran_time, getTrimSize(target.tran_time, 14));
        former.writeMsgSizedString(target.sw_down_code, getTrimSize(target.sw_down_code, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.tran_comment, getTrimSize(target.tran_comment, 500));
    }

    public static void transform_EIS_CUS_SW_Event_In_Tag(StreamTransformer former, EIS_CUS_SW_Event_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.message = former.readMsgString();
        source.tran_time = former.readMsgString();
        source.sw_down_code = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.tran_comment = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Get_Eqp_Info_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Get_Eqp_Info_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Get_Eqp_Info_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Get_Eqp_Info_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list target) throws Exception
    {
        former.writeMsgInt(target.eqp_module_no);
        former.writeMsgInt(target.prev_shotcount);
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list target) throws Exception
    {
        former.writeMsgSizedString(target.plc_data_kind, getTrimSize(target.plc_data_kind, 20));
        former.writeMsgSizedString(target.plc_mem_type, getTrimSize(target.plc_mem_type, 2));
        former.writeMsgInt(target.plc_addr);
        former.writeMsgInt(target.plc_read_len);
        former.writeMsgSizedString(target.plc_mask, getTrimSize(target.plc_mask, 4));
        former.writeMsgSizedString(target.plc_data_ward, getTrimSize(target.plc_data_ward, 4));
        former.writeMsgChar(target.plc_clear_after_read);
        former.writeMsgInt(target.plc_data_decimal);
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list target) throws Exception
    {
        former.writeMsgSizedString(target.plc_mem_type, getTrimSize(target.plc_mem_type, 2));
        former.writeMsgInt(target.plc_addr);
        former.writeMsgInt(target.plc_read_len);
        former.writeMsgInt(target.err_start_no);
        former.writeMsgInt(target.err_end_no);
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list target) throws Exception
    {
        former.writeMsgSizedString(target.error_no, getTrimSize(target.error_no, 10));
        former.writeMsgSizedString(target.error_start_time, getTrimSize(target.error_start_time, 14));
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list target) throws Exception
    {
        former.writeMsgSizedString(target.plc_mem_type, getTrimSize(target.plc_mem_type, 2));
        former.writeMsgInt(target.plc_addr);
        former.writeMsgInt(target.plc_read_len);
        former.writeMsgInt(target.alm_start_no);
        former.writeMsgInt(target.alm_end_no);
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list target) throws Exception
    {
        former.writeMsgSizedString(target.alarm_no, getTrimSize(target.alarm_no, 10));
        former.writeMsgSizedString(target.alarm_start_time, getTrimSize(target.alarm_start_time, 14));
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list target) throws Exception
    {
        former.writeMsgSizedString(target.para_kind, getTrimSize(target.para_kind, 4));
        former.writeMsgInt(target.para_item_no);
        former.writeMsgSizedString(target.para_name, getTrimSize(target.para_name, 40));
        former.writeMsgSizedString(target.plc_mem_type, getTrimSize(target.plc_mem_type, 2));
        former.writeMsgInt(target.plc_addr);
        former.writeMsgInt(target.plc_read_len);
        former.writeMsgSizedString(target.plc_data_ward, getTrimSize(target.plc_data_ward, 4));
        former.writeMsgInt(target.plc_divide);
        former.writeMsgInt(target.eqp_module_no);
        former.writeMsgInt(target.plc_data_decimal);
    }

    public static void serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.mes_time, getTrimSize(target.mes_time, 20));
        former.writeMsgSizedString(target.eqp_name, getTrimSize(target.eqp_name, 20));
        former.writeMsgSizedString(target.eqp_model, getTrimSize(target.eqp_model, 20));
        former.writeMsgInt(target.eqp_module_count);
        former.writeMsgInt(target.comm_port);
        former.writeMsgInt(target.baud_rate);
        former.writeMsgInt(target.byte_size);
        former.writeMsgInt(target.stop_bit);
        former.writeMsgSizedString(target.parity, getTrimSize(target.parity, 4));
        former.writeMsgInt(target.para_read_shot);
        former.writeMsgInt(target.total_error_count);
        former.writeMsgInt(target.total_alarm_count);
        former.writeMsgInt(target.prev_lineauto);
        former.writeMsgInt(target.prev_sort_no);
        former.writeMsgInt(target.press_used);
        former.writeMsgInt(target.module_count);
        target._size_module_list = (10 >= target._size_module_list ? target._size_module_list : 10);
        former.writeMsgInt(target._size_module_list);
        try
        {
            for(int i = 0; i < target._size_module_list; i++)
            {
                serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list(former, target.module_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list]");
        }
        former.writeMsgInt(target.state_count);
        target._size_state_list = (100 >= target._size_state_list ? target._size_state_list : 100);
        former.writeMsgInt(target._size_state_list);
        try
        {
            for(int i = 0; i < target._size_state_list; i++)
            {
                serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list(former, target.state_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list]");
        }
        former.writeMsgInt(target.error_count);
        target._size_error_list = (100 >= target._size_error_list ? target._size_error_list : 100);
        former.writeMsgInt(target._size_error_list);
        try
        {
            for(int i = 0; i < target._size_error_list; i++)
            {
                serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list(former, target.error_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list]");
        }
        former.writeMsgInt(target.error_state_count);
        target._size_error_state_list = (100 >= target._size_error_state_list ? target._size_error_state_list : 100);
        former.writeMsgInt(target._size_error_state_list);
        try
        {
            for(int i = 0; i < target._size_error_state_list; i++)
            {
                serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list(former, target.error_state_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list]");
        }
        former.writeMsgInt(target.alarm_count);
        target._size_alarm_list = (100 >= target._size_alarm_list ? target._size_alarm_list : 100);
        former.writeMsgInt(target._size_alarm_list);
        try
        {
            for(int i = 0; i < target._size_alarm_list; i++)
            {
                serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list(former, target.alarm_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list]");
        }
        former.writeMsgInt(target.amarm_state_count);
        target._size_alarm_state_list = (100 >= target._size_alarm_state_list ? target._size_alarm_state_list : 100);
        former.writeMsgInt(target._size_alarm_state_list);
        try
        {
            for(int i = 0; i < target._size_alarm_state_list; i++)
            {
                serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list(former, target.alarm_state_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list]");
        }
        former.writeMsgInt(target.para_count);
        target._size_para_list = (400 >= target._size_para_list ? target._size_para_list : 400);
        former.writeMsgInt(target._size_para_list);
        try
        {
            for(int i = 0; i < target._size_para_list; i++)
            {
                serialize_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list(former, target.para_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list]");
        }
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list source) throws Exception
    {
        source.eqp_module_no = former.readMsgInt();
        source.prev_shotcount = former.readMsgInt();
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list source) throws Exception
    {
        source.plc_data_kind = former.readMsgString();
        source.plc_mem_type = former.readMsgString();
        source.plc_addr = former.readMsgInt();
        source.plc_read_len = former.readMsgInt();
        source.plc_mask = former.readMsgString();
        source.plc_data_ward = former.readMsgString();
        source.plc_clear_after_read = former.readMsgChar();
        source.plc_data_decimal = former.readMsgInt();
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list source) throws Exception
    {
        source.plc_mem_type = former.readMsgString();
        source.plc_addr = former.readMsgInt();
        source.plc_read_len = former.readMsgInt();
        source.err_start_no = former.readMsgInt();
        source.err_end_no = former.readMsgInt();
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list source) throws Exception
    {
        source.error_no = former.readMsgString();
        source.error_start_time = former.readMsgString();
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list source) throws Exception
    {
        source.plc_mem_type = former.readMsgString();
        source.plc_addr = former.readMsgInt();
        source.plc_read_len = former.readMsgInt();
        source.alm_start_no = former.readMsgInt();
        source.alm_end_no = former.readMsgInt();
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list source) throws Exception
    {
        source.alarm_no = former.readMsgString();
        source.alarm_start_time = former.readMsgString();
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list source) throws Exception
    {
        source.para_kind = former.readMsgString();
        source.para_item_no = former.readMsgInt();
        source.para_name = former.readMsgString();
        source.plc_mem_type = former.readMsgString();
        source.plc_addr = former.readMsgInt();
        source.plc_read_len = former.readMsgInt();
        source.plc_data_ward = former.readMsgString();
        source.plc_divide = former.readMsgInt();
        source.eqp_module_no = former.readMsgInt();
        source.plc_data_decimal = former.readMsgInt();
    }

    public static void transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag(StreamTransformer former, EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.mes_time = former.readMsgString();
        source.eqp_name = former.readMsgString();
        source.eqp_model = former.readMsgString();
        source.eqp_module_count = former.readMsgInt();
        source.comm_port = former.readMsgInt();
        source.baud_rate = former.readMsgInt();
        source.byte_size = former.readMsgInt();
        source.stop_bit = former.readMsgInt();
        source.parity = former.readMsgString();
        source.para_read_shot = former.readMsgInt();
        source.total_error_count = former.readMsgInt();
        source.total_alarm_count = former.readMsgInt();
        source.prev_lineauto = former.readMsgInt();
        source.prev_sort_no = former.readMsgInt();
        source.press_used = former.readMsgInt();
        source.module_count = former.readMsgInt();
        source._size_module_list = former.readMsgInt();
        source.module_list = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list[source._size_module_list];
        try
        {
            for(int i = 0; i < source._size_module_list; i++)
            {
                source.module_list[i] = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list();
                transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list(former, source.module_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_module_list]");
        }
        source.state_count = former.readMsgInt();
        source._size_state_list = former.readMsgInt();
        source.state_list = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list[source._size_state_list];
        try
        {
            for(int i = 0; i < source._size_state_list; i++)
            {
                source.state_list[i] = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list();
                transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list(former, source.state_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_state_list]");
        }
        source.error_count = former.readMsgInt();
        source._size_error_list = former.readMsgInt();
        source.error_list = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list[source._size_error_list];
        try
        {
            for(int i = 0; i < source._size_error_list; i++)
            {
                source.error_list[i] = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list();
                transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list(former, source.error_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_list]");
        }
        source.error_state_count = former.readMsgInt();
        source._size_error_state_list = former.readMsgInt();
        source.error_state_list = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list[source._size_error_state_list];
        try
        {
            for(int i = 0; i < source._size_error_state_list; i++)
            {
                source.error_state_list[i] = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list();
                transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list(former, source.error_state_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_error_state_list]");
        }
        source.alarm_count = former.readMsgInt();
        source._size_alarm_list = former.readMsgInt();
        source.alarm_list = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list[source._size_alarm_list];
        try
        {
            for(int i = 0; i < source._size_alarm_list; i++)
            {
                source.alarm_list[i] = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list();
                transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list(former, source.alarm_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_list]");
        }
        source.amarm_state_count = former.readMsgInt();
        source._size_alarm_state_list = former.readMsgInt();
        source.alarm_state_list = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list[source._size_alarm_state_list];
        try
        {
            for(int i = 0; i < source._size_alarm_state_list; i++)
            {
                source.alarm_state_list[i] = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list();
                transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list(former, source.alarm_state_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_alarm_state_list]");
        }
        source.para_count = former.readMsgInt();
        source._size_para_list = former.readMsgInt();
        source.para_list = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list[source._size_para_list];
        try
        {
            for(int i = 0; i < source._size_para_list; i++)
            {
                source.para_list[i] = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list();
                transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list(former, source.para_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag_para_list]");
        }
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Send_Comm_State_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Comm_State_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.comm_state, getTrimSize(target.comm_state, 10));
        former.writeMsgSizedString(target.comm_state_time, getTrimSize(target.comm_state_time, 14));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Send_Comm_State_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Comm_State_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.comm_state = former.readMsgString();
        source.comm_state_time = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Send_Eqp_State_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Eqp_State_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.eqp_state_kind, getTrimSize(target.eqp_state_kind, 20));
        former.writeMsgInt(target.module_no);
        former.writeMsgInt(target.value);
        former.writeMsgSizedString(target.eqp_state_time, getTrimSize(target.eqp_state_time, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Send_Eqp_State_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Eqp_State_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.eqp_state_kind = former.readMsgString();
        source.module_no = former.readMsgInt();
        source.value = former.readMsgInt();
        source.eqp_state_time = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Send_Sort_No_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Sort_No_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgInt(target.eqp_sort_no);
        former.writeMsgSizedString(target.eqp_sort_no_time, getTrimSize(target.eqp_sort_no_time, 14));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Send_Sort_No_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Sort_No_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.eqp_sort_no = former.readMsgInt();
        source.eqp_sort_no_time = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para(StreamTransformer former, EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para target) throws Exception
    {
        former.writeMsgInt(target.para_item_no);
        former.writeMsgSizedString(target.para_name, getTrimSize(target.para_name, 40));
        former.writeMsgDouble(target.para_value);
        former.writeMsgInt(target.eqp_module_no);
    }

    public static void serialize_EIS_CUS_MOLD_Send_Set_Para_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Set_Para_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.report_time, getTrimSize(target.report_time, 14));
        former.writeMsgSizedString(target.eqp_name, getTrimSize(target.eqp_name, 20));
        former.writeMsgInt(target.set_para_count);
        target._size_set_para = (300 >= target._size_set_para ? target._size_set_para : 300);
        former.writeMsgInt(target._size_set_para);
        try
        {
            for(int i = 0; i < target._size_set_para; i++)
            {
                serialize_EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para(former, target.set_para[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para]");
        }
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para(StreamTransformer former, EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para source) throws Exception
    {
        source.para_item_no = former.readMsgInt();
        source.para_name = former.readMsgString();
        source.para_value = former.readMsgDouble();
        source.eqp_module_no = former.readMsgInt();
    }

    public static void transform_EIS_CUS_MOLD_Send_Set_Para_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Set_Para_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.report_time = former.readMsgString();
        source.eqp_name = former.readMsgString();
        source.set_para_count = former.readMsgInt();
        source._size_set_para = former.readMsgInt();
        source.set_para = new EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para[source._size_set_para];
        try
        {
            for(int i = 0; i < source._size_set_para; i++)
            {
                source.set_para[i] = new EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para();
                transform_EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para(former, source.set_para[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Send_Set_Para_In_Tag_set_para]");
        }
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para(StreamTransformer former, EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para target) throws Exception
    {
        former.writeMsgInt(target.para_item_no);
        former.writeMsgSizedString(target.para_name, getTrimSize(target.para_name, 40));
        former.writeMsgDouble(target.para_value);
        former.writeMsgInt(target.eqp_module_no);
    }

    public static void serialize_EIS_CUS_MOLD_Send_Real_Para_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Real_Para_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.report_time, getTrimSize(target.report_time, 14));
        former.writeMsgSizedString(target.eqp_name, getTrimSize(target.eqp_name, 20));
        former.writeMsgInt(target.real_para_count);
        target._size_real_para = (300 >= target._size_real_para ? target._size_real_para : 300);
        former.writeMsgInt(target._size_real_para);
        try
        {
            for(int i = 0; i < target._size_real_para; i++)
            {
                serialize_EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para(former, target.real_para[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para]");
        }
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para(StreamTransformer former, EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para source) throws Exception
    {
        source.para_item_no = former.readMsgInt();
        source.para_name = former.readMsgString();
        source.para_value = former.readMsgDouble();
        source.eqp_module_no = former.readMsgInt();
    }

    public static void transform_EIS_CUS_MOLD_Send_Real_Para_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Send_Real_Para_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.report_time = former.readMsgString();
        source.eqp_name = former.readMsgString();
        source.real_para_count = former.readMsgInt();
        source._size_real_para = former.readMsgInt();
        source.real_para = new EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para[source._size_real_para];
        try
        {
            for(int i = 0; i < source._size_real_para; i++)
            {
                source.real_para[i] = new EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para();
                transform_EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para(former, source.real_para[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EIS_CUS_MOLD_Send_Real_Para_In_Tag_real_para]");
        }
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EISSPC_TRACE_DATA_SEND_In_Tag_data_list(StreamTransformer former, EISSPC_TRACE_DATA_SEND_In_Tag_data_list target) throws Exception
    {
        former.writeMsgSizedString(target.parameter_id, getTrimSize(target.parameter_id, 20));
        former.writeMsgSizedString(target.parameter_name, getTrimSize(target.parameter_name, 40));
        former.writeMsgSizedString(target.value, getTrimSize(target.value, 16));
        former.writeMsgSizedString(target.usl, getTrimSize(target.usl, 16));
        former.writeMsgSizedString(target.target, getTrimSize(target.target, 16));
        former.writeMsgSizedString(target.lsl, getTrimSize(target.lsl, 16));
        former.writeMsgSizedString(target.ucl, getTrimSize(target.ucl, 16));
        former.writeMsgSizedString(target.cl, getTrimSize(target.cl, 16));
        former.writeMsgSizedString(target.lcl, getTrimSize(target.lcl, 16));
        former.writeMsgChar(target.rule_type);
    }

    public static void serialize_EISSPC_TRACE_DATA_SEND_In_Tag(StreamTransformer former, EISSPC_TRACE_DATA_SEND_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 30));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 40));
        former.writeMsgSizedString(target.slot_no, getTrimSize(target.slot_no, 20));
        target._size_data_list = (1000 >= target._size_data_list ? target._size_data_list : 1000);
        former.writeMsgInt(target._size_data_list);
        try
        {
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_EISSPC_TRACE_DATA_SEND_In_Tag_data_list(former, target.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EISSPC_TRACE_DATA_SEND_In_Tag_data_list]");
        }
        former.writeMsgSizedString(target.resv_1, getTrimSize(target.resv_1, 30));
        former.writeMsgSizedString(target.resv_2, getTrimSize(target.resv_2, 30));
        former.writeMsgSizedString(target.resv_3, getTrimSize(target.resv_3, 30));
        former.writeMsgSizedString(target.resv_4, getTrimSize(target.resv_4, 30));
        former.writeMsgSizedString(target.resv_5, getTrimSize(target.resv_5, 30));
        former.writeMsgSizedString(target.resv_6, getTrimSize(target.resv_6, 30));
        former.writeMsgSizedString(target.resv_7, getTrimSize(target.resv_7, 30));
        former.writeMsgSizedString(target.resv_8, getTrimSize(target.resv_8, 30));
        former.writeMsgSizedString(target.resv_9, getTrimSize(target.resv_9, 30));
        former.writeMsgSizedString(target.resv_10, getTrimSize(target.resv_10, 30));
    }

    public static void transform_EISSPC_TRACE_DATA_SEND_In_Tag_data_list(StreamTransformer former, EISSPC_TRACE_DATA_SEND_In_Tag_data_list source) throws Exception
    {
        source.parameter_id = former.readMsgString();
        source.parameter_name = former.readMsgString();
        source.value = former.readMsgString();
        source.usl = former.readMsgString();
        source.target = former.readMsgString();
        source.lsl = former.readMsgString();
        source.ucl = former.readMsgString();
        source.cl = former.readMsgString();
        source.lcl = former.readMsgString();
        source.rule_type = former.readMsgChar();
    }

    public static void transform_EISSPC_TRACE_DATA_SEND_In_Tag(StreamTransformer former, EISSPC_TRACE_DATA_SEND_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.slot_no = former.readMsgString();
        source._size_data_list = former.readMsgInt();
        source.data_list = new EISSPC_TRACE_DATA_SEND_In_Tag_data_list[source._size_data_list];
        try
        {
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new EISSPC_TRACE_DATA_SEND_In_Tag_data_list();
                transform_EISSPC_TRACE_DATA_SEND_In_Tag_data_list(former, source.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EISSPC_TRACE_DATA_SEND_In_Tag_data_list]");
        }
        source.resv_1 = former.readMsgString();
        source.resv_2 = former.readMsgString();
        source.resv_3 = former.readMsgString();
        source.resv_4 = former.readMsgString();
        source.resv_5 = former.readMsgString();
        source.resv_6 = former.readMsgString();
        source.resv_7 = former.readMsgString();
        source.resv_8 = former.readMsgString();
        source.resv_9 = former.readMsgString();
        source.resv_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Set_Mes_Release_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Set_Mes_Release_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.command, getTrimSize(target.command, 10));
        former.writeMsgSizedString(target.release_time, getTrimSize(target.release_time, 14));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 80));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 80));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 80));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 80));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 80));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 80));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 80));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 80));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 80));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 80));
    }

    public static void transform_EIS_CUS_MOLD_Set_Mes_Release_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Set_Mes_Release_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.command = former.readMsgString();
        source.release_time = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Set_Mes_Lock_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Set_Mes_Lock_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.command, getTrimSize(target.command, 10));
        former.writeMsgSizedString(target.lock_time, getTrimSize(target.lock_time, 14));
        former.writeMsgInt(target.lock_code);
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_MOLD_Set_Mes_Lock_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Set_Mes_Lock_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.command = former.readMsgString();
        source.lock_time = former.readMsgString();
        source.lock_code = former.readMsgInt();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Lot_Start_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Lot_Start_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.start_time, getTrimSize(target.start_time, 14));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_MOLD_Lot_Start_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Lot_Start_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.start_time = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Func_Authority_Req_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Func_Authority_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.func_code, getTrimSize(target.func_code, 10));
        former.writeMsgSizedString(target.user_id, getTrimSize(target.user_id, 10));
        former.writeMsgSizedString(target.user_pwd, getTrimSize(target.user_pwd, 30));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Func_Authority_Req_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Func_Authority_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.func_code = former.readMsgString();
        source.user_id = former.readMsgString();
        source.user_pwd = former.readMsgString();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_MOLD_Func_Authority_Rep_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Func_Authority_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgChar(target.approve);
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_MOLD_Func_Authority_Rep_In_Tag(StreamTransformer former, EIS_CUS_MOLD_Func_Authority_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.approve = former.readMsgChar();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQDataRequest_In_Tag(StreamTransformer former, EIS_CUS_EQDataRequest_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
    }

    public static void transform_EIS_CUS_EQDataRequest_In_Tag(StreamTransformer former, EIS_CUS_EQDataRequest_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQ_Dummy_Change_Clear_In_Tag(StreamTransformer former, EIS_CUS_EQ_Dummy_Change_Clear_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 40));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
    }

    public static void transform_EIS_CUS_EQ_Dummy_Change_Clear_In_Tag(StreamTransformer former, EIS_CUS_EQ_Dummy_Change_Clear_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
    }

    public static void serialize_CUS_Equipment_Status_History_In_Tag(StreamTransformer former, CUS_Equipment_Status_History_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.m_lot_id, getTrimSize(target.m_lot_id, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.model, getTrimSize(target.model, 20));
        former.writeMsgSizedString(target.recipe, getTrimSize(target.recipe, 25));
        former.writeMsgInt(target.chip_cnt);
        former.writeMsgDouble(target.wire_length);
        former.writeMsgInt(target.frame_no);
        former.writeMsgSizedString(target.frame_start_time, getTrimSize(target.frame_start_time, 14));
        former.writeMsgSizedString(target.frame_end_time, getTrimSize(target.frame_end_time, 14));
        former.writeMsgInt(target.run);
        former.writeMsgInt(target.idle);
        former.writeMsgInt(target.alarm);
        former.writeMsgInt(target.frame);
        former.writeMsgInt(target.not_active);
        former.writeMsgInt(target.assist);
        former.writeMsgInt(target.etc);
        former.writeMsgSizedString(target.note, getTrimSize(target.note, 50));
        former.writeMsgSizedString(target.action_time, getTrimSize(target.action_time, 14));
        former.writeMsgInt(target.before_chip_cnt);
        former.writeMsgDouble(target.before_wire_length);
        former.writeMsgSizedString(target.rsv_field_1, getTrimSize(target.rsv_field_1, 30));
        former.writeMsgSizedString(target.rsv_field_2, getTrimSize(target.rsv_field_2, 30));
        former.writeMsgSizedString(target.rsv_field_3, getTrimSize(target.rsv_field_3, 30));
        former.writeMsgSizedString(target.rsv_field_4, getTrimSize(target.rsv_field_4, 30));
        former.writeMsgSizedString(target.rsv_field_5, getTrimSize(target.rsv_field_5, 30));
        former.writeMsgChar(target.rsv_flag_1);
        former.writeMsgChar(target.rsv_flag_2);
        former.writeMsgChar(target.rsv_flag_3);
    }

    public static void transform_CUS_Equipment_Status_History_In_Tag(StreamTransformer former, CUS_Equipment_Status_History_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.m_lot_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.model = former.readMsgString();
        source.recipe = former.readMsgString();
        source.chip_cnt = former.readMsgInt();
        source.wire_length = former.readMsgDouble();
        source.frame_no = former.readMsgInt();
        source.frame_start_time = former.readMsgString();
        source.frame_end_time = former.readMsgString();
        source.run = former.readMsgInt();
        source.idle = former.readMsgInt();
        source.alarm = former.readMsgInt();
        source.frame = former.readMsgInt();
        source.not_active = former.readMsgInt();
        source.assist = former.readMsgInt();
        source.etc = former.readMsgInt();
        source.note = former.readMsgString();
        source.action_time = former.readMsgString();
        source.before_chip_cnt = former.readMsgInt();
        source.before_wire_length = former.readMsgDouble();
        source.rsv_field_1 = former.readMsgString();
        source.rsv_field_2 = former.readMsgString();
        source.rsv_field_3 = former.readMsgString();
        source.rsv_field_4 = former.readMsgString();
        source.rsv_field_5 = former.readMsgString();
        source.rsv_flag_1 = former.readMsgChar();
        source.rsv_flag_2 = former.readMsgChar();
        source.rsv_flag_3 = former.readMsgChar();
    }

    public static void serialize_CUS_Equipment_Process_State_His_In_Tag(StreamTransformer former, CUS_Equipment_Process_State_His_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.model, getTrimSize(target.model, 20));
        former.writeMsgSizedString(target.action, getTrimSize(target.action, 30));
        former.writeMsgSizedString(target.action_time, getTrimSize(target.action_time, 14));
        former.writeMsgSizedString(target.process_state, getTrimSize(target.process_state, 10));
        former.writeMsgSizedString(target.pre_process_state, getTrimSize(target.pre_process_state, 10));
        former.writeMsgSizedString(target.control_state, getTrimSize(target.control_state, 10));
        former.writeMsgSizedString(target.note, getTrimSize(target.note, 50));
        former.writeMsgSizedString(target.rsv_field_1, getTrimSize(target.rsv_field_1, 30));
        former.writeMsgSizedString(target.rsv_field_2, getTrimSize(target.rsv_field_2, 30));
        former.writeMsgSizedString(target.rsv_field_3, getTrimSize(target.rsv_field_3, 30));
    }

    public static void transform_CUS_Equipment_Process_State_His_In_Tag(StreamTransformer former, CUS_Equipment_Process_State_His_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.model = former.readMsgString();
        source.action = former.readMsgString();
        source.action_time = former.readMsgString();
        source.process_state = former.readMsgString();
        source.pre_process_state = former.readMsgString();
        source.control_state = former.readMsgString();
        source.note = former.readMsgString();
        source.rsv_field_1 = former.readMsgString();
        source.rsv_field_2 = former.readMsgString();
        source.rsv_field_3 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_Frame_Reject_In_Tag(StreamTransformer former, EIS_CUS_Frame_Reject_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 60));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_Frame_Reject_In_Tag(StreamTransformer former, EIS_CUS_Frame_Reject_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_New_Mat_In_Tag(StreamTransformer former, EIS_CUS_New_Mat_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 60));
        former.writeMsgChar(target.value);
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_New_Mat_In_Tag(StreamTransformer former, EIS_CUS_New_Mat_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.value = former.readMsgChar();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_CCS_Send_In_Tag(StreamTransformer former, EIS_CUS_CCS_Send_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 60));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_CCS_Send_In_Tag(StreamTransformer former, EIS_CUS_CCS_Send_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_CCS_Approve_In_Tag(StreamTransformer former, EIS_CUS_CCS_Approve_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 60));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_CCS_Approve_In_Tag(StreamTransformer former, EIS_CUS_CCS_Approve_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_DA_Current_Lot_Info_Req_In_Tag(StreamTransformer former, EIS_CUS_DA_Current_Lot_Info_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 60));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_DA_Current_Lot_Info_Req_In_Tag(StreamTransformer former, EIS_CUS_DA_Current_Lot_Info_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag(StreamTransformer former, EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 60));
        former.writeMsgChar(target.value);
        former.writeMsgSizedString(target.comment, getTrimSize(target.comment, 200));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag(StreamTransformer former, EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.value = former.readMsgChar();
        source.comment = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAPEIS_EMS_Fail_In_Tag(StreamTransformer former, EAPEIS_EMS_Fail_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.code, getTrimSize(target.code, 20));
    }

    public static void transform_EAPEIS_EMS_Fail_In_Tag(StreamTransformer former, EAPEIS_EMS_Fail_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.code = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Lot_Start_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_Start_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 20));
        former.writeMsgSizedString(target.carrierid, getTrimSize(target.carrierid, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAP_EIS_Lot_Start_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_Start_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lotid = former.readMsgString();
        source.carrierid = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_Lot_Start_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_Start_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.lotID, getTrimSize(target.lotID, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.recipeID, getTrimSize(target.recipeID, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_Lot_Start_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_Start_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.lotID = former.readMsgString();
        source.message = former.readMsgString();
        source.recipeID = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAPEIS_OVEN_Lot_Start_Req_In_Tag(StreamTransformer former, EAPEIS_OVEN_Lot_Start_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 20));
        former.writeMsgSizedString(target.carrierid, getTrimSize(target.carrierid, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAPEIS_OVEN_Lot_Start_Req_In_Tag(StreamTransformer former, EAPEIS_OVEN_Lot_Start_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lotid = former.readMsgString();
        source.carrierid = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EISEAP_OVEN_Lot_Start_Rep_In_Tag(StreamTransformer former, EISEAP_OVEN_Lot_Start_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.lotID, getTrimSize(target.lotID, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.recipeID, getTrimSize(target.recipeID, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EISEAP_OVEN_Lot_Start_Rep_In_Tag(StreamTransformer former, EISEAP_OVEN_Lot_Start_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.lotID = former.readMsgString();
        source.message = former.readMsgString();
        source.recipeID = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAPEIS_OVEN_Lot_End_Req_In_Tag(StreamTransformer former, EAPEIS_OVEN_Lot_End_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 20));
        former.writeMsgSizedString(target.carrierid, getTrimSize(target.carrierid, 10));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAPEIS_OVEN_Lot_End_Req_In_Tag(StreamTransformer former, EAPEIS_OVEN_Lot_End_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lotid = former.readMsgString();
        source.carrierid = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EISEAP_OVEN_Lot_End_Rep_In_Tag(StreamTransformer former, EISEAP_OVEN_Lot_End_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.lotID, getTrimSize(target.lotID, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.recipeID, getTrimSize(target.recipeID, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EISEAP_OVEN_Lot_End_Rep_In_Tag(StreamTransformer former, EISEAP_OVEN_Lot_End_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.lotID = former.readMsgString();
        source.message = former.readMsgString();
        source.recipeID = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Lot_End_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_End_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAP_EIS_Lot_End_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_End_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lotid = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_Lot_End_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_End_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.lotID, getTrimSize(target.lotID, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_Lot_End_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_End_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.lotID = former.readMsgString();
        source.message = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Label_Create_In_Tag(StreamTransformer former, EAP_EIS_Label_Create_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.labelID, getTrimSize(target.labelID, 20));
        former.writeMsgSizedString(target.lotID, getTrimSize(target.lotID, 20));
        former.writeMsgSizedString(target.portID, getTrimSize(target.portID, 10));
    }

    public static void transform_EAP_EIS_Label_Create_In_Tag(StreamTransformer former, EAP_EIS_Label_Create_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.labelID = former.readMsgString();
        source.lotID = former.readMsgString();
        source.portID = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Label_Validation_Fail_In_Tag(StreamTransformer former, EAP_EIS_Label_Validation_Fail_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.label_id, getTrimSize(target.label_id, 20));
    }

    public static void transform_EAP_EIS_Label_Validation_Fail_In_Tag(StreamTransformer former, EAP_EIS_Label_Validation_Fail_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.label_id = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Windows_Time_Over_In_Tag(StreamTransformer former, EAP_EIS_Windows_Time_Over_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.blade_lenth_1, getTrimSize(target.blade_lenth_1, 50));
        former.writeMsgSizedString(target.blade_lenth_2, getTrimSize(target.blade_lenth_2, 50));
    }

    public static void transform_EAP_EIS_Windows_Time_Over_In_Tag(StreamTransformer former, EAP_EIS_Windows_Time_Over_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.blade_lenth_1 = former.readMsgString();
        source.blade_lenth_2 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_DA_Start_In_Tag(StreamTransformer former, EAP_EIS_DA_Start_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EAP_EIS_DA_Start_In_Tag(StreamTransformer former, EAP_EIS_DA_Start_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EAP_EIS_DA_Run_Down_In_Tag(StreamTransformer former, EAP_EIS_DA_Run_Down_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EAP_EIS_DA_Run_Down_In_Tag(StreamTransformer former, EAP_EIS_DA_Run_Down_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EAP_EIS_Count_Verification_Fail_In_Tag(StreamTransformer former, EAP_EIS_Count_Verification_Fail_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.fail_msg, getTrimSize(target.fail_msg, 100));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EAP_EIS_Count_Verification_Fail_In_Tag(StreamTransformer former, EAP_EIS_Count_Verification_Fail_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.fail_msg = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list(StreamTransformer former, EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list target) throws Exception
    {
        former.writeMsgSizedString(target.value, getTrimSize(target.value, 20));
    }

    public static void serialize_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list(StreamTransformer former, EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list target) throws Exception
    {
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 30));
        former.writeMsgSizedString(target.carrierid, getTrimSize(target.carrierid, 10));
        former.writeMsgSizedString(target.tool_id, getTrimSize(target.tool_id, 30));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 80));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        target._size_value_list = (25 >= target._size_value_list ? target._size_value_list : 25);
        former.writeMsgInt(target._size_value_list);
        try
        {
            for(int i = 0; i < target._size_value_list; i++)
            {
                serialize_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list(former, target.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list]");
        }
    }

    public static void serialize_EAP_EIS_Lot_Start_Multi_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_Start_Multi_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        target._size_data_list = (1000 >= target._size_data_list ? target._size_data_list : 1000);
        former.writeMsgInt(target._size_data_list);
        try
        {
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list(former, target.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list]");
        }
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
    }

    public static void transform_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list(StreamTransformer former, EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list source) throws Exception
    {
        source.value = former.readMsgString();
    }

    public static void transform_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list(StreamTransformer former, EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list source) throws Exception
    {
        source.lotid = former.readMsgString();
        source.carrierid = former.readMsgString();
        source.tool_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source._size_value_list = former.readMsgInt();
        source.value_list = new EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list[source._size_value_list];
        try
        {
            for(int i = 0; i < source._size_value_list; i++)
            {
                source.value_list[i] = new EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list();
                transform_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list(former, source.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list_value_list]");
        }
    }

    public static void transform_EAP_EIS_Lot_Start_Multi_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_Start_Multi_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source._size_data_list = former.readMsgInt();
        source.data_list = new EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list[source._size_data_list];
        try
        {
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list();
                transform_EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list(former, source.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_Start_Multi_Req_In_Tag_data_list]");
        }
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_Lot_Start_Multi_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_Start_Multi_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.lotID, getTrimSize(target.lotID, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.recipeID, getTrimSize(target.recipeID, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_Lot_Start_Multi_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_Start_Multi_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.lotID = former.readMsgString();
        source.message = former.readMsgString();
        source.recipeID = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list(StreamTransformer former, EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list target) throws Exception
    {
        former.writeMsgSizedString(target.value, getTrimSize(target.value, 20));
    }

    public static void serialize_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list(StreamTransformer former, EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list target) throws Exception
    {
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 25));
        former.writeMsgSizedString(target.carrierid, getTrimSize(target.carrierid, 10));
        former.writeMsgSizedString(target.tool_id, getTrimSize(target.tool_id, 30));
        former.writeMsgSizedString(target.recipe_id, getTrimSize(target.recipe_id, 80));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        target._size_value_list = (25 >= target._size_value_list ? target._size_value_list : 25);
        former.writeMsgInt(target._size_value_list);
        try
        {
            for(int i = 0; i < target._size_value_list; i++)
            {
                serialize_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list(former, target.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list]");
        }
    }

    public static void serialize_EAP_EIS_Lot_End_Multi_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_End_Multi_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        target._size_data_list = (1000 >= target._size_data_list ? target._size_data_list : 1000);
        former.writeMsgInt(target._size_data_list);
        try
        {
            for(int i = 0; i < target._size_data_list; i++)
            {
                serialize_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list(former, target.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list]");
        }
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
    }

    public static void transform_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list(StreamTransformer former, EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list source) throws Exception
    {
        source.value = former.readMsgString();
    }

    public static void transform_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list(StreamTransformer former, EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list source) throws Exception
    {
        source.lotid = former.readMsgString();
        source.carrierid = former.readMsgString();
        source.tool_id = former.readMsgString();
        source.recipe_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source._size_value_list = former.readMsgInt();
        source.value_list = new EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list[source._size_value_list];
        try
        {
            for(int i = 0; i < source._size_value_list; i++)
            {
                source.value_list[i] = new EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list();
                transform_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list(former, source.value_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list_value_list]");
        }
    }

    public static void transform_EAP_EIS_Lot_End_Multi_Req_In_Tag(StreamTransformer former, EAP_EIS_Lot_End_Multi_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source._size_data_list = former.readMsgInt();
        source.data_list = new EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list[source._size_data_list];
        try
        {
            for(int i = 0; i < source._size_data_list; i++)
            {
                source.data_list[i] = new EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list();
                transform_EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list(former, source.data_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[EAP_EIS_Lot_End_Multi_Req_In_Tag_data_list]");
        }
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_Lot_End_Multi_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_End_Multi_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.lotID, getTrimSize(target.lotID, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.recipeID, getTrimSize(target.recipeID, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_Lot_End_Multi_Rep_In_Tag(StreamTransformer former, EIS_EAP_Lot_End_Multi_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.lotID = former.readMsgString();
        source.message = former.readMsgString();
        source.recipeID = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag(StreamTransformer former, EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 30));
        former.writeMsgSizedString(target.fail_msg, getTrimSize(target.fail_msg, 200));
        former.writeMsgSizedString(target.recipeID, getTrimSize(target.recipeID, 50));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag(StreamTransformer former, EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.fail_msg = former.readMsgString();
        source.recipeID = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_RFIDEIS_Read_Req_In_Tag(StreamTransformer former, RFIDEIS_Read_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.mw_channel, getTrimSize(target.mw_channel, 25));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 25));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgChar(target.antenna_port);
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_RFIDEIS_Read_Req_In_Tag(StreamTransformer former, RFIDEIS_Read_Req_In_Tag source) throws Exception
    {
        source.mw_channel = former.readMsgString();
        source.reader_ip = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.antenna_port = former.readMsgChar();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EISRFID_Read_Rep_In_Tag(StreamTransformer former, EISRFID_Read_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.mw_channel, getTrimSize(target.mw_channel, 25));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 25));
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.msg_code, getTrimSize(target.msg_code, 10));
        former.writeMsgSizedString(target.msg, getTrimSize(target.msg, 100));
    }

    public static void transform_EISRFID_Read_Rep_In_Tag(StreamTransformer former, EISRFID_Read_Rep_In_Tag source) throws Exception
    {
        source.mw_channel = former.readMsgString();
        source.reader_ip = former.readMsgString();
        source.result = former.readMsgChar();
        source.msg_code = former.readMsgString();
        source.msg = former.readMsgString();
    }

    public static void serialize_RFIDEIS_Lot_Id_Req_In_Tag(StreamTransformer former, RFIDEIS_Lot_Id_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.mw_channel, getTrimSize(target.mw_channel, 25));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgChar(target.antenna_port);
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_RFIDEIS_Lot_Id_Req_In_Tag(StreamTransformer former, RFIDEIS_Lot_Id_Req_In_Tag source) throws Exception
    {
        source.mw_channel = former.readMsgString();
        source.reader_ip = former.readMsgString();
        source.res_id = former.readMsgString();
        source.antenna_port = former.readMsgChar();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EISRFID_Lot_Id_Rep_In_Tag(StreamTransformer former, EISRFID_Lot_Id_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.mw_channel, getTrimSize(target.mw_channel, 25));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgChar(target.antenna_port);
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EISRFID_Lot_Id_Rep_In_Tag(StreamTransformer former, EISRFID_Lot_Id_Rep_In_Tag source) throws Exception
    {
        source.mw_channel = former.readMsgString();
        source.reader_ip = former.readMsgString();
        source.res_id = former.readMsgString();
        source.antenna_port = former.readMsgChar();
        source.lot_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_AMC_EIS_Feeder_Status_In_Tag_feeder_list(StreamTransformer former, AMC_EIS_Feeder_Status_In_Tag_feeder_list target) throws Exception
    {
        former.writeMsgSizedString(target.feeder_channel_id, getTrimSize(target.feeder_channel_id, 20));
        former.writeMsgSizedString(target.feeder_id, getTrimSize(target.feeder_id, 3));
        former.writeMsgSizedString(target.feeder_status, getTrimSize(target.feeder_status, 3));
    }

    public static void serialize_AMC_EIS_Feeder_Status_In_Tag(StreamTransformer former, AMC_EIS_Feeder_Status_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        target._size_feeder_list = (100 >= target._size_feeder_list ? target._size_feeder_list : 100);
        former.writeMsgInt(target._size_feeder_list);
        try
        {
            for(int i = 0; i < target._size_feeder_list; i++)
            {
                serialize_AMC_EIS_Feeder_Status_In_Tag_feeder_list(former, target.feeder_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[AMC_EIS_Feeder_Status_In_Tag_feeder_list]");
        }
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_AMC_EIS_Feeder_Status_In_Tag_feeder_list(StreamTransformer former, AMC_EIS_Feeder_Status_In_Tag_feeder_list source) throws Exception
    {
        source.feeder_channel_id = former.readMsgString();
        source.feeder_id = former.readMsgString();
        source.feeder_status = former.readMsgString();
    }

    public static void transform_AMC_EIS_Feeder_Status_In_Tag(StreamTransformer former, AMC_EIS_Feeder_Status_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source._size_feeder_list = former.readMsgInt();
        source.feeder_list = new AMC_EIS_Feeder_Status_In_Tag_feeder_list[source._size_feeder_list];
        try
        {
            for(int i = 0; i < source._size_feeder_list; i++)
            {
                source.feeder_list[i] = new AMC_EIS_Feeder_Status_In_Tag_feeder_list();
                transform_AMC_EIS_Feeder_Status_In_Tag_feeder_list(former, source.feeder_list[i]);
            }
        }
        catch(Exception e)
        {
            throw new Exception("Invalid array[AMC_EIS_Feeder_Status_In_Tag_feeder_list]");
        }
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_AMC_EIS_Lock_Cmd_Req_In_Tag(StreamTransformer former, AMC_EIS_Lock_Cmd_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.feeder_id, getTrimSize(target.feeder_id, 20));
        former.writeMsgSizedString(target.reel_id, getTrimSize(target.reel_id, 50));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_AMC_EIS_Lock_Cmd_Req_In_Tag(StreamTransformer former, AMC_EIS_Lock_Cmd_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.feeder_id = former.readMsgString();
        source.reel_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EIS_AMC_Lock_Cmd_Rep_In_Tag(StreamTransformer former, EIS_AMC_Lock_Cmd_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.result_msg, getTrimSize(target.result_msg, 100));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_AMC_Lock_Cmd_Rep_In_Tag(StreamTransformer former, EIS_AMC_Lock_Cmd_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.result_msg = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EAP_EIS_Tool_Change_Req_In_Tag(StreamTransformer former, EAP_EIS_Tool_Change_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 20));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.tool_id, getTrimSize(target.tool_id, 50));
        former.writeMsgSizedString(target.ball_id, getTrimSize(target.ball_id, 50));
        former.writeMsgSizedString(target.blade_id1, getTrimSize(target.blade_id1, 50));
        former.writeMsgSizedString(target.blade_id2, getTrimSize(target.blade_id2, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAP_EIS_Tool_Change_Req_In_Tag(StreamTransformer former, EAP_EIS_Tool_Change_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.tool_id = former.readMsgString();
        source.ball_id = former.readMsgString();
        source.blade_id1 = former.readMsgString();
        source.blade_id2 = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_Tool_Change_Rep_In_Tag(StreamTransformer former, EIS_EAP_Tool_Change_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_Tool_Change_Rep_In_Tag(StreamTransformer former, EIS_EAP_Tool_Change_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.message = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Locking_Start_Req_In_Tag(StreamTransformer former, EAP_EIS_Locking_Start_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 20));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 30));
        former.writeMsgSizedString(target.recipeid, getTrimSize(target.recipeid, 50));
        former.writeMsgSizedString(target.carrierid, getTrimSize(target.carrierid, 20));
        former.writeMsgSizedString(target.tool_id, getTrimSize(target.tool_id, 50));
        former.writeMsgSizedString(target.ball_id, getTrimSize(target.ball_id, 50));
        former.writeMsgSizedString(target.blade_id1, getTrimSize(target.blade_id1, 50));
        former.writeMsgSizedString(target.blade_id2, getTrimSize(target.blade_id2, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAP_EIS_Locking_Start_Req_In_Tag(StreamTransformer former, EAP_EIS_Locking_Start_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lotid = former.readMsgString();
        source.recipeid = former.readMsgString();
        source.carrierid = former.readMsgString();
        source.tool_id = former.readMsgString();
        source.ball_id = former.readMsgString();
        source.blade_id1 = former.readMsgString();
        source.blade_id2 = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_Locking_Start_Rep_In_Tag(StreamTransformer former, EIS_EAP_Locking_Start_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_Locking_Start_Rep_In_Tag(StreamTransformer former, EIS_EAP_Locking_Start_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.message = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_Tray_Full_Req_In_Tag(StreamTransformer former, EAP_EIS_Tray_Full_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 20));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lotid, getTrimSize(target.lotid, 30));
        former.writeMsgSizedString(target.recipeid, getTrimSize(target.recipeid, 50));
        former.writeMsgSizedString(target.carrierid, getTrimSize(target.carrierid, 20));
        former.writeMsgSizedString(target.tool_id, getTrimSize(target.tool_id, 50));
        former.writeMsgSizedString(target.ball_id, getTrimSize(target.ball_id, 50));
        former.writeMsgSizedString(target.blade_id1, getTrimSize(target.blade_id1, 50));
        former.writeMsgSizedString(target.blade_id2, getTrimSize(target.blade_id2, 50));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAP_EIS_Tray_Full_Req_In_Tag(StreamTransformer former, EAP_EIS_Tray_Full_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lotid = former.readMsgString();
        source.recipeid = former.readMsgString();
        source.carrierid = former.readMsgString();
        source.tool_id = former.readMsgString();
        source.ball_id = former.readMsgString();
        source.blade_id1 = former.readMsgString();
        source.blade_id2 = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_Tray_Full_Rep_In_Tag(StreamTransformer former, EIS_EAP_Tray_Full_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgChar(target.result);
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_Tray_Full_Rep_In_Tag(StreamTransformer former, EIS_EAP_Tray_Full_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.result = former.readMsgChar();
        source.message = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_CUS_EQ_Locking_Message_In_Tag(StreamTransformer former, EIS_CUS_EQ_Locking_Message_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 200));
        former.writeMsgChar(target.locking_flag);
        former.writeMsgChar(target.stop_flag);
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
    }

    public static void transform_EIS_CUS_EQ_Locking_Message_In_Tag(StreamTransformer former, EIS_CUS_EQ_Locking_Message_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.message = former.readMsgString();
        source.locking_flag = former.readMsgChar();
        source.stop_flag = former.readMsgChar();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
    }

    public static void serialize_EIS_RFID_Request_In_Tag(StreamTransformer former, EIS_RFID_Request_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 20));
        former.writeMsgChar(target.antenna_port_1);
        former.writeMsgSizedString(target.uid_1, getTrimSize(target.uid_1, 20));
        former.writeMsgSizedString(target.magazine_id_1, getTrimSize(target.magazine_id_1, 20));
        former.writeMsgSizedString(target.lot_id_1, getTrimSize(target.lot_id_1, 25));
        former.writeMsgChar(target.antenna_port_2);
        former.writeMsgSizedString(target.uid_2, getTrimSize(target.uid_2, 20));
        former.writeMsgSizedString(target.magazine_id_2, getTrimSize(target.magazine_id_2, 20));
        former.writeMsgSizedString(target.lot_id_2, getTrimSize(target.lot_id_2, 25));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_RFID_Request_In_Tag(StreamTransformer former, EIS_RFID_Request_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.reader_ip = former.readMsgString();
        source.antenna_port_1 = former.readMsgChar();
        source.uid_1 = former.readMsgString();
        source.magazine_id_1 = former.readMsgString();
        source.lot_id_1 = former.readMsgString();
        source.antenna_port_2 = former.readMsgChar();
        source.uid_2 = former.readMsgString();
        source.magazine_id_2 = former.readMsgString();
        source.lot_id_2 = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_RFID_EIS_Reply_Out_Tag(StreamTransformer former, RFID_EIS_Reply_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.reader_ip, getTrimSize(target.reader_ip, 20));
        former.writeMsgChar(target.antenna_port_1);
        former.writeMsgSizedString(target.uid_1, getTrimSize(target.uid_1, 20));
        former.writeMsgSizedString(target.magazine_id_1, getTrimSize(target.magazine_id_1, 20));
        former.writeMsgSizedString(target.lot_id_1, getTrimSize(target.lot_id_1, 25));
        former.writeMsgChar(target.antenna_port_2);
        former.writeMsgSizedString(target.uid_2, getTrimSize(target.uid_2, 20));
        former.writeMsgSizedString(target.magazine_id_2, getTrimSize(target.magazine_id_2, 20));
        former.writeMsgSizedString(target.lot_id_2, getTrimSize(target.lot_id_2, 25));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_RFID_EIS_Reply_Out_Tag(StreamTransformer former, RFID_EIS_Reply_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.res_id = former.readMsgString();
        source.reader_ip = former.readMsgString();
        source.antenna_port_1 = former.readMsgChar();
        source.uid_1 = former.readMsgString();
        source.magazine_id_1 = former.readMsgString();
        source.lot_id_1 = former.readMsgString();
        source.antenna_port_2 = former.readMsgChar();
        source.uid_2 = former.readMsgString();
        source.magazine_id_2 = former.readMsgString();
        source.lot_id_2 = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EIS_EAP_Res_Down_In_Tag(StreamTransformer former, EIS_EAP_Res_Down_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_EAP_Res_Down_In_Tag(StreamTransformer former, EIS_EAP_Res_Down_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EIS_EAP_Res_Terminal_Msg_In_Tag(StreamTransformer former, EIS_EAP_Res_Terminal_Msg_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 80));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_EAP_Res_Terminal_Msg_In_Tag(StreamTransformer former, EIS_EAP_Res_Terminal_Msg_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.message = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EIS_EAP_Res_Lot_Data_In_Tag(StreamTransformer former, EIS_EAP_Res_Lot_Data_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgInt(target.mag_index);
        former.writeMsgChar(target.error);
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_EAP_Res_Lot_Data_In_Tag(StreamTransformer former, EIS_EAP_Res_Lot_Data_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mag_index = former.readMsgInt();
        source.error = former.readMsgChar();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EIS_EAP_Lot_Info_In_Tag(StreamTransformer former, EIS_EAP_Lot_Info_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_EAP_Lot_Info_In_Tag(StreamTransformer former, EIS_EAP_Lot_Info_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EIS_EAP_RFID_Read_Cmp_In_Tag(StreamTransformer former, EIS_EAP_RFID_Read_Cmp_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 25));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EIS_EAP_RFID_Read_Cmp_In_Tag(StreamTransformer former, EIS_EAP_RFID_Read_Cmp_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EAP_EIS_Equipment_Event_In_Tag(StreamTransformer former, EAP_EIS_Equipment_Event_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.event_id, getTrimSize(target.event_id, 25));
        former.writeMsgSizedString(target.state, getTrimSize(target.state, 25));
        former.writeMsgSizedString(target.port, getTrimSize(target.port, 10));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_EAP_EIS_Equipment_Event_In_Tag(StreamTransformer former, EAP_EIS_Equipment_Event_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.event_id = former.readMsgString();
        source.state = former.readMsgString();
        source.port = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EIS_CUS_EQ_Status_Event_Rep_In_Tag(StreamTransformer former, EIS_CUS_EQ_Status_Event_Rep_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgChar(target.result_flag);
        former.writeMsgSizedString(target.result_comment, getTrimSize(target.result_comment, 250));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_CUS_EQ_Status_Event_Rep_In_Tag(StreamTransformer former, EIS_CUS_EQ_Status_Event_Rep_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.result_flag = former.readMsgChar();
        source.result_comment = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_MES_EIS_Terminal_Msg_In_Tag(StreamTransformer former, MES_EIS_Terminal_Msg_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.message, getTrimSize(target.message, 80));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 50));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 50));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 50));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 50));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 50));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
    }

    public static void transform_MES_EIS_Terminal_Msg_In_Tag(StreamTransformer former, MES_EIS_Terminal_Msg_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.res_id = former.readMsgString();
        source.message = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
    }

    public static void serialize_EAP_EIS_GW_Info_Req_In_Tag(StreamTransformer former, EAP_EIS_GW_Info_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.gw_lot_id, getTrimSize(target.gw_lot_id, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAP_EIS_GW_Info_Req_In_Tag(StreamTransformer former, EAP_EIS_GW_Info_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.gw_lot_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_GW_Info_Rep_Out_Tag(StreamTransformer former, EIS_EAP_GW_Info_Rep_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.gw_lot_id, getTrimSize(target.gw_lot_id, 25));
        former.writeMsgSizedString(target.material_id, getTrimSize(target.material_id, 30));
        former.writeMsgSizedString(target.maker_code, getTrimSize(target.maker_code, 30));
        former.writeMsgSizedString(target.maker_name, getTrimSize(target.maker_name, 30));
        former.writeMsgSizedString(target.description, getTrimSize(target.description, 30));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_GW_Info_Rep_Out_Tag(StreamTransformer former, EIS_EAP_GW_Info_Rep_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.gw_lot_id = former.readMsgString();
        source.material_id = former.readMsgString();
        source.maker_code = former.readMsgString();
        source.maker_name = former.readMsgString();
        source.description = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EAP_EIS_GW_Trans_Req_In_Tag(StreamTransformer former, EAP_EIS_GW_Trans_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 20));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 20));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.gw_lot_id, getTrimSize(target.gw_lot_id, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EAP_EIS_GW_Trans_Req_In_Tag(StreamTransformer former, EAP_EIS_GW_Trans_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.gw_lot_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_EIS_EAP_GW_Trans_Rep_Out_Tag(StreamTransformer former, EIS_EAP_GW_Trans_Rep_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.gw_lot_id, getTrimSize(target.gw_lot_id, 25));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.cmf_1, getTrimSize(target.cmf_1, 50));
        former.writeMsgSizedString(target.cmf_2, getTrimSize(target.cmf_2, 50));
        former.writeMsgSizedString(target.cmf_3, getTrimSize(target.cmf_3, 50));
        former.writeMsgSizedString(target.cmf_4, getTrimSize(target.cmf_4, 50));
        former.writeMsgSizedString(target.cmf_5, getTrimSize(target.cmf_5, 50));
        former.writeMsgSizedString(target.cmf_6, getTrimSize(target.cmf_6, 50));
        former.writeMsgSizedString(target.cmf_7, getTrimSize(target.cmf_7, 50));
        former.writeMsgSizedString(target.cmf_8, getTrimSize(target.cmf_8, 50));
        former.writeMsgSizedString(target.cmf_9, getTrimSize(target.cmf_9, 50));
        former.writeMsgSizedString(target.cmf_10, getTrimSize(target.cmf_10, 50));
    }

    public static void transform_EIS_EAP_GW_Trans_Rep_Out_Tag(StreamTransformer former, EIS_EAP_GW_Trans_Rep_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.gw_lot_id = former.readMsgString();
        source.res_id = former.readMsgString();
        source.cmf_1 = former.readMsgString();
        source.cmf_2 = former.readMsgString();
        source.cmf_3 = former.readMsgString();
        source.cmf_4 = former.readMsgString();
        source.cmf_5 = former.readMsgString();
        source.cmf_6 = former.readMsgString();
        source.cmf_7 = former.readMsgString();
        source.cmf_8 = former.readMsgString();
        source.cmf_9 = former.readMsgString();
        source.cmf_10 = former.readMsgString();
    }

    public static void serialize_BETSEIS_Lot_Start_Req_In_Tag(StreamTransformer former, BETSEIS_Lot_Start_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 10));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 10));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.test_mode, getTrimSize(target.test_mode, 10));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Lot_Start_Req_In_Tag(StreamTransformer former, BETSEIS_Lot_Start_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.test_mode = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }

    public static void serialize_BETSEIS_Lot_Start_Req_Out_Tag(StreamTransformer former, BETSEIS_Lot_Start_Req_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.flow, getTrimSize(target.flow, 20));
        former.writeMsgInt(target.qty);
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Lot_Start_Req_Out_Tag(StreamTransformer former, BETSEIS_Lot_Start_Req_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.flow = former.readMsgString();
        source.qty = former.readMsgInt();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }

    public static void serialize_BETSEIS_Lot_End_Req_In_Tag(StreamTransformer former, BETSEIS_Lot_End_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 10));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 10));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgInt(target.qty);
        former.writeMsgSizedString(target.program, getTrimSize(target.program, 100));
        former.writeMsgSizedString(target.board_id, getTrimSize(target.board_id, 100));
        former.writeMsgSizedString(target.head, getTrimSize(target.head, 100));
        former.writeMsgInt(target.op_input);
        former.writeMsgInt(target.cat1);
        former.writeMsgInt(target.cat2);
        former.writeMsgInt(target.cat3);
        former.writeMsgInt(target.cat4);
        former.writeMsgInt(target.cat5);
        former.writeMsgInt(target.cat6);
        former.writeMsgInt(target.cat7);
        former.writeMsgInt(target.cat8);
        former.writeMsgInt(target.cat9);
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Lot_End_Req_In_Tag(StreamTransformer former, BETSEIS_Lot_End_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.oper = former.readMsgString();
        source.qty = former.readMsgInt();
        source.program = former.readMsgString();
        source.board_id = former.readMsgString();
        source.head = former.readMsgString();
        source.op_input = former.readMsgInt();
        source.cat1 = former.readMsgInt();
        source.cat2 = former.readMsgInt();
        source.cat3 = former.readMsgInt();
        source.cat4 = former.readMsgInt();
        source.cat5 = former.readMsgInt();
        source.cat6 = former.readMsgInt();
        source.cat7 = former.readMsgInt();
        source.cat8 = former.readMsgInt();
        source.cat9 = former.readMsgInt();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }

    public static void serialize_BETSEIS_Lot_End_Req_Out_Tag(StreamTransformer former, BETSEIS_Lot_End_Req_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Lot_End_Req_Out_Tag(StreamTransformer former, BETSEIS_Lot_End_Req_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.factory = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }

    public static void serialize_BETSEIS_Lot_Info_Req_In_Tag(StreamTransformer former, BETSEIS_Lot_Info_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 10));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 10));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Lot_Info_Req_In_Tag(StreamTransformer former, BETSEIS_Lot_Info_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }

    public static void serialize_BETSEIS_Lot_Info_Req_Out_Tag(StreamTransformer former, BETSEIS_Lot_Info_Req_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.res_id, getTrimSize(target.res_id, 20));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.mat_id, getTrimSize(target.mat_id, 30));
        former.writeMsgSizedString(target.lot_type, getTrimSize(target.lot_type, 30));
        former.writeMsgSizedString(target.flow, getTrimSize(target.flow, 20));
        former.writeMsgSizedString(target.oper, getTrimSize(target.oper, 10));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Lot_Info_Req_Out_Tag(StreamTransformer former, BETSEIS_Lot_Info_Req_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.factory = former.readMsgString();
        source.res_id = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.mat_id = former.readMsgString();
        source.lot_type = former.readMsgString();
        source.flow = former.readMsgString();
        source.oper = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }

    public static void serialize_BETSEIS_Hold_Req_In_Tag(StreamTransformer former, BETSEIS_Hold_Req_In_Tag target) throws Exception
    {
        former.writeMsgSizedString(target.h_passport, getTrimSize(target.h_passport, 100));
        former.writeMsgChar(target.h_language);
        former.writeMsgSizedString(target.h_factory, getTrimSize(target.h_factory, 10));
        former.writeMsgSizedString(target.h_user_id, getTrimSize(target.h_user_id, 10));
        former.writeMsgSizedString(target.h_password, getTrimSize(target.h_password, 10));
        former.writeMsgChar(target.h_proc_step);
        former.writeMsgSizedString(target.factory, getTrimSize(target.factory, 10));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.hold_comment, getTrimSize(target.hold_comment, 400));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Hold_Req_In_Tag(StreamTransformer former, BETSEIS_Hold_Req_In_Tag source) throws Exception
    {
        source.h_passport = former.readMsgString();
        source.h_language = former.readMsgChar();
        source.h_factory = former.readMsgString();
        source.h_user_id = former.readMsgString();
        source.h_password = former.readMsgString();
        source.h_proc_step = former.readMsgChar();
        source.factory = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.hold_comment = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }

    public static void serialize_BETSEIS_Hold_Req_Out_Tag(StreamTransformer former, BETSEIS_Hold_Req_Out_Tag target) throws Exception
    {
        former.writeMsgChar(target.h_status_value);
        former.writeMsgSizedString(target.h_msg_code, getTrimSize(target.h_msg_code, 10));
        former.writeMsgSizedString(target.h_msg, getTrimSize(target.h_msg, 200));
        former.writeMsgSizedString(target.h_field_msg, getTrimSize(target.h_field_msg, 200));
        former.writeMsgSizedString(target.h_db_err_msg, getTrimSize(target.h_db_err_msg, 200));
        former.writeMsgSizedString(target.lot_id, getTrimSize(target.lot_id, 20));
        former.writeMsgSizedString(target.resv_field_1, getTrimSize(target.resv_field_1, 100));
        former.writeMsgSizedString(target.resv_field_2, getTrimSize(target.resv_field_2, 100));
        former.writeMsgSizedString(target.resv_field_3, getTrimSize(target.resv_field_3, 100));
        former.writeMsgSizedString(target.resv_field_4, getTrimSize(target.resv_field_4, 100));
        former.writeMsgSizedString(target.resv_field_5, getTrimSize(target.resv_field_5, 100));
        former.writeMsgSizedString(target.resv_field_6, getTrimSize(target.resv_field_6, 100));
        former.writeMsgSizedString(target.resv_field_7, getTrimSize(target.resv_field_7, 100));
        former.writeMsgSizedString(target.resv_field_8, getTrimSize(target.resv_field_8, 100));
        former.writeMsgSizedString(target.resv_field_9, getTrimSize(target.resv_field_9, 100));
        former.writeMsgSizedString(target.resv_field_10, getTrimSize(target.resv_field_10, 100));
        former.writeMsgChar(target.resv_flag_1);
        former.writeMsgChar(target.resv_flag_2);
        former.writeMsgChar(target.resv_flag_3);
        former.writeMsgChar(target.resv_flag_4);
        former.writeMsgChar(target.resv_flag_5);
        former.writeMsgChar(target.resv_flag_6);
        former.writeMsgChar(target.resv_flag_7);
        former.writeMsgChar(target.resv_flag_8);
        former.writeMsgChar(target.resv_flag_9);
        former.writeMsgChar(target.resv_flag_10);
    }

    public static void transform_BETSEIS_Hold_Req_Out_Tag(StreamTransformer former, BETSEIS_Hold_Req_Out_Tag source) throws Exception
    {
        source.h_status_value = former.readMsgChar();
        source.h_msg_code = former.readMsgString();
        source.h_msg = former.readMsgString();
        source.h_field_msg = former.readMsgString();
        source.h_db_err_msg = former.readMsgString();
        source.lot_id = former.readMsgString();
        source.resv_field_1 = former.readMsgString();
        source.resv_field_2 = former.readMsgString();
        source.resv_field_3 = former.readMsgString();
        source.resv_field_4 = former.readMsgString();
        source.resv_field_5 = former.readMsgString();
        source.resv_field_6 = former.readMsgString();
        source.resv_field_7 = former.readMsgString();
        source.resv_field_8 = former.readMsgString();
        source.resv_field_9 = former.readMsgString();
        source.resv_field_10 = former.readMsgString();
        source.resv_flag_1 = former.readMsgChar();
        source.resv_flag_2 = former.readMsgChar();
        source.resv_flag_3 = former.readMsgChar();
        source.resv_flag_4 = former.readMsgChar();
        source.resv_flag_5 = former.readMsgChar();
        source.resv_flag_6 = former.readMsgChar();
        source.resv_flag_7 = former.readMsgChar();
        source.resv_flag_8 = former.readMsgChar();
        source.resv_flag_9 = former.readMsgChar();
        source.resv_flag_10 = former.readMsgChar();
    }


}
