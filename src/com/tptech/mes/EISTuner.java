/*******************************************************************************
' EISTuner.vb
'
' Copyright (c) 2007 by Miracom,Inc.
' All rights reserved.
'
' Generated by DevTool XMLGen 1.0
'
' Created at 2017-01-18 15:55:11
'
' Author : Miracom. R&D.
' Description : DevTool Xml Generator Version 1.0
'******************************************************************************/

package com.tptech.mes;

import com.miracom.oneoone.transceiverx.Message;
import com.miracom.oneoone.transceiverx.Session;
import com.miracom.oneoone.transceiverx.StreamTransformer;
import com.miracom.oneoone.transceiverx.parser.DeliveryType;
import com.miracom.oneoone.transceiverx.parser.StreamTransformerImpl;
import com.tptech.mes.EISType.*;


public abstract class EISTuner implements h101dispatcher
{
    // h101dispatcher member
    public Throwable dispatch(Session issuer, Message msg)
    {
        try 
        {
            String operation = (String)msg.getProperty(h101stub.XGEN_TAG_OPERATION);
                if (operation.equals("EIS_CUS_EQ_Dummy_Change_Clear"))
                    recv_EIS_CUS_EQ_Dummy_Change_Clear(issuer, msg);
                else if (operation.equals("CUS_Equipment_Status_History"))
                    recv_CUS_Equipment_Status_History(issuer, msg);
                else if (operation.equals("CUS_Equipment_Process_State_His"))
                    recv_CUS_Equipment_Process_State_His(issuer, msg);
                else if (operation.equals("EIS_CUS_Frame_Reject"))
                    recv_EIS_CUS_Frame_Reject(issuer, msg);
                else if (operation.equals("EIS_CUS_New_Mat"))
                    recv_EIS_CUS_New_Mat(issuer, msg);
                else if (operation.equals("EIS_CUS_CCS_Send"))
                    recv_EIS_CUS_CCS_Send(issuer, msg);
                else if (operation.equals("EIS_CUS_CCS_Approve"))
                    recv_EIS_CUS_CCS_Approve(issuer, msg);
                else if (operation.equals("EIS_CUS_DA_Current_Lot_Info_Req"))
                    recv_EIS_CUS_DA_Current_Lot_Info_Req(issuer, msg);
                else if (operation.equals("EIS_CUS_DA_Current_Lot_Info_Rep"))
                    recv_EIS_CUS_DA_Current_Lot_Info_Rep(issuer, msg);
                else if (operation.equals("EAPEIS_EMS_Fail"))
                    recv_EAPEIS_EMS_Fail(issuer, msg);
                else if (operation.equals("EAP_EIS_Lot_Start_Req"))
                    recv_EAP_EIS_Lot_Start_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Lot_Start_Rep"))
                    recv_EIS_EAP_Lot_Start_Rep(issuer, msg);
                else if (operation.equals("EAPEIS_OVEN_Lot_Start_Req"))
                    recv_EAPEIS_OVEN_Lot_Start_Req(issuer, msg);
                else if (operation.equals("EISEAP_OVEN_Lot_Start_Rep"))
                    recv_EISEAP_OVEN_Lot_Start_Rep(issuer, msg);
                else if (operation.equals("EAPEIS_OVEN_Lot_End_Req"))
                    recv_EAPEIS_OVEN_Lot_End_Req(issuer, msg);
                else if (operation.equals("EISEAP_OVEN_Lot_End_Rep"))
                    recv_EISEAP_OVEN_Lot_End_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_Lot_End_Req"))
                    recv_EAP_EIS_Lot_End_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Lot_End_Rep"))
                    recv_EIS_EAP_Lot_End_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_Label_Create"))
                    recv_EAP_EIS_Label_Create(issuer, msg);
                else if (operation.equals("EAP_EIS_Label_Validation_Fail"))
                    recv_EAP_EIS_Label_Validation_Fail(issuer, msg);
                else if (operation.equals("EAP_EIS_Windows_Time_Over"))
                    recv_EAP_EIS_Windows_Time_Over(issuer, msg);
                else if (operation.equals("EAP_EIS_DA_Start"))
                    recv_EAP_EIS_DA_Start(issuer, msg);
                else if (operation.equals("EAP_EIS_DA_Run_Down"))
                    recv_EAP_EIS_DA_Run_Down(issuer, msg);
                else if (operation.equals("EAP_EIS_Count_Verification_Fail"))
                    recv_EAP_EIS_Count_Verification_Fail(issuer, msg);
                else if (operation.equals("EAP_EIS_Lot_Start_Multi_Req"))
                    recv_EAP_EIS_Lot_Start_Multi_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Lot_Start_Multi_Rep"))
                    recv_EIS_EAP_Lot_Start_Multi_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_Lot_End_Multi_Req"))
                    recv_EAP_EIS_Lot_End_Multi_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Lot_End_Multi_Rep"))
                    recv_EIS_EAP_Lot_End_Multi_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_Wafer_Angle_Compare_Fail"))
                    recv_EAP_EIS_Wafer_Angle_Compare_Fail(issuer, msg);
                else if (operation.equals("RFIDEIS_Read_Req"))
                    recv_RFIDEIS_Read_Req(issuer, msg);
                else if (operation.equals("EISRFID_Read_Rep"))
                    recv_EISRFID_Read_Rep(issuer, msg);
                else if (operation.equals("RFIDEIS_Lot_Id_Req"))
                    recv_RFIDEIS_Lot_Id_Req(issuer, msg);
                else if (operation.equals("EISRFID_Lot_Id_Rep"))
                    recv_EISRFID_Lot_Id_Rep(issuer, msg);
                else if (operation.equals("AMC_EIS_Feeder_Status"))
                    recv_AMC_EIS_Feeder_Status(issuer, msg);
                else if (operation.equals("AMC_EIS_Lock_Cmd_Req"))
                    recv_AMC_EIS_Lock_Cmd_Req(issuer, msg);
                else if (operation.equals("EIS_AMC_Lock_Cmd_Rep"))
                    recv_EIS_AMC_Lock_Cmd_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_Tool_Change_Req"))
                    recv_EAP_EIS_Tool_Change_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Tool_Change_Rep"))
                    recv_EIS_EAP_Tool_Change_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_Locking_Start_Req"))
                    recv_EAP_EIS_Locking_Start_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Locking_Start_Rep"))
                    recv_EIS_EAP_Locking_Start_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_Tray_Full_Req"))
                    recv_EAP_EIS_Tray_Full_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Tray_Full_Rep"))
                    recv_EIS_EAP_Tray_Full_Rep(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_Locking_Message"))
                    recv_EIS_CUS_EQ_Locking_Message(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_ALARM_Event"))
                    recv_EIS_CUS_EQ_ALARM_Event(issuer, msg);
                else if (operation.equals("EIS_CUS_Mode_Change"))
                    recv_EIS_CUS_Mode_Change(issuer, msg);
                else if (operation.equals("EIS_CUS_Status_Change"))
                    recv_EIS_CUS_Status_Change(issuer, msg);
                else if (operation.equals("EIS_Collect_Data"))
                    recv_EIS_Collect_Data(issuer, msg);
                else if (operation.equals("CUS_EQ_Status_Info_Request"))
                    recv_CUS_EQ_Status_Info_Request(issuer, msg);
                else if (operation.equals("CUS_EQ_Terminal_Message_Send"))
                    recv_CUS_EQ_Terminal_Message_Send(issuer, msg);
                else if (operation.equals("CUS_EQ_Mode_Change_Send"))
                    recv_CUS_EQ_Mode_Change_Send(issuer, msg);
                else if (operation.equals("EIS_CUS_Current_Lot_Info_Req"))
                    recv_EIS_CUS_Current_Lot_Info_Req(issuer, msg);
                else if (operation.equals("EIS_CUS_Last_Dev_Chg_Info_Req"))
                    recv_EIS_CUS_Last_Dev_Chg_Info_Req(issuer, msg);
                else if (operation.equals("CUS_Lot_Start_Info"))
                    recv_CUS_Lot_Start_Info(issuer, msg);
                else if (operation.equals("CUS_Last_Dev_Chg_Info_Rep"))
                    recv_CUS_Last_Dev_Chg_Info_Rep(issuer, msg);
                else if (operation.equals("CUS_Current_Lot_Info_Rep"))
                    recv_CUS_Current_Lot_Info_Rep(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_Status_Event"))
                    recv_EIS_CUS_EQ_Status_Event(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_Lot_Status_Req"))
                    recv_EIS_CUS_EQ_Lot_Status_Req(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_Lot_Status_Rep"))
                    recv_EIS_CUS_EQ_Lot_Status_Rep(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_Lot_Count_Event"))
                    recv_EIS_CUS_EQ_Lot_Count_Event(issuer, msg);
                else if (operation.equals("CUS_Lot_End_Info"))
                    recv_CUS_Lot_End_Info(issuer, msg);
                else if (operation.equals("CUS_Maint_End_Info"))
                    recv_CUS_Maint_End_Info(issuer, msg);
                else if (operation.equals("FMB_EIS_CUS_STATUS_CHANGE"))
                    recv_FMB_EIS_CUS_STATUS_CHANGE(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_OnOff_Event"))
                    recv_EIS_CUS_EQ_OnOff_Event(issuer, msg);
                else if (operation.equals("EIS_CUS_BPCS_Fail"))
                    recv_EIS_CUS_BPCS_Fail(issuer, msg);
                else if (operation.equals("CUS_Eap_CCS_Fail"))
                    recv_CUS_Eap_CCS_Fail(issuer, msg);
                else if (operation.equals("CUS_Eap_Chip_Cnt_Diff"))
                    recv_CUS_Eap_Chip_Cnt_Diff(issuer, msg);
                else if (operation.equals("CUS_Eap_CCS_EQ_Data"))
                    recv_CUS_Eap_CCS_EQ_Data(issuer, msg);
                else if (operation.equals("CUS_Eap_release_EQ"))
                    recv_CUS_Eap_release_EQ(issuer, msg);
                else if (operation.equals("CUS_MesEap_Inhibit_EQ"))
                    recv_CUS_MesEap_Inhibit_EQ(issuer, msg);
                else if (operation.equals("CUS_Eap_LOT_Release_Data"))
                    recv_CUS_Eap_LOT_Release_Data(issuer, msg);
                else if (operation.equals("CUS_Eap_Communication_ON"))
                    recv_CUS_Eap_Communication_ON(issuer, msg);
                else if (operation.equals("CUS_Eap_Communication_OFF"))
                    recv_CUS_Eap_Communication_OFF(issuer, msg);
                else if (operation.equals("CUS_Eap_Material_Attach"))
                    recv_CUS_Eap_Material_Attach(issuer, msg);
                else if (operation.equals("CUS_Eap_RasData_Change"))
                    recv_CUS_Eap_RasData_Change(issuer, msg);
                else if (operation.equals("CUS_Eap_RasData_Req"))
                    recv_CUS_Eap_RasData_Req(issuer, msg);
                else if (operation.equals("EIS_CUS_CAPY_change"))
                    recv_EIS_CUS_CAPY_change(issuer, msg);
                else if (operation.equals("EIS_CUS_CAPY_change_end"))
                    recv_EIS_CUS_CAPY_change_end(issuer, msg);
                else if (operation.equals("EIS_CUS_Update_CRASEQPHIS"))
                    recv_EIS_CUS_Update_CRASEQPHIS(issuer, msg);
                else if (operation.equals("EIS_CUS_EQMessage_EQStop"))
                    recv_EIS_CUS_EQMessage_EQStop(issuer, msg);
                else if (operation.equals("EIS_CUS_EQDataRequest"))
                    recv_EIS_CUS_EQDataRequest(issuer, msg);
                else if (operation.equals("EIS_CUS_SW_Event"))
                    recv_EIS_CUS_SW_Event(issuer, msg);
                else if (operation.equals("EIS_CUS_Get_Eqp_Info"))
                    recv_EIS_CUS_Get_Eqp_Info(issuer, msg);
                else if (operation.equals("EIS_CUS_Set_Eqp_Info"))
                    recv_EIS_CUS_Set_Eqp_Info(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Send_Comm_State"))
                    recv_EIS_CUS_MOLD_Send_Comm_State(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Send_Eqp_State"))
                    recv_EIS_CUS_MOLD_Send_Eqp_State(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Send_Sort_No"))
                    recv_EIS_CUS_MOLD_Send_Sort_No(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Send_Set_Para"))
                    recv_EIS_CUS_MOLD_Send_Set_Para(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Send_Real_Para"))
                    recv_EIS_CUS_MOLD_Send_Real_Para(issuer, msg);
                else if (operation.equals("EISSPC_TRACE_DATA_SEND"))
                    recv_EISSPC_TRACE_DATA_SEND(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Set_Mes_Release"))
                    recv_EIS_CUS_MOLD_Set_Mes_Release(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Set_Mes_Lock"))
                    recv_EIS_CUS_MOLD_Set_Mes_Lock(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Lot_Start"))
                    recv_EIS_CUS_MOLD_Lot_Start(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Func_Authority_Req"))
                    recv_EIS_CUS_MOLD_Func_Authority_Req(issuer, msg);
                else if (operation.equals("EIS_CUS_MOLD_Func_Authority_Rep"))
                    recv_EIS_CUS_MOLD_Func_Authority_Rep(issuer, msg);
                else if (operation.equals("EIS_RFID_UID_Req"))
                    recv_EIS_RFID_UID_Req(issuer, msg);
                else if (operation.equals("EIS_RFID_Write_Magazine_ID_Req"))
                    recv_EIS_RFID_Write_Magazine_ID_Req(issuer, msg);
                else if (operation.equals("EIS_RFID_Write_Lot_ID_Req"))
                    recv_EIS_RFID_Write_Lot_ID_Req(issuer, msg);
                else if (operation.equals("RFID_EIS_Start_Magazine_Req"))
                    recv_RFID_EIS_Start_Magazine_Req(issuer, msg);
                else if (operation.equals("RFID_EIS_End_Magazine_Req"))
                    recv_RFID_EIS_End_Magazine_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Down_Req"))
                    recv_EIS_EAP_Down_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Terminal_Msg_Req"))
                    recv_EIS_EAP_Terminal_Msg_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Lot_Data_Req"))
                    recv_EIS_EAP_Lot_Data_Req(issuer, msg);
                else if (operation.equals("RFID_EIS_Rewrite_Success_Req"))
                    recv_RFID_EIS_Rewrite_Success_Req(issuer, msg);
                else if (operation.equals("EAP_EIS_Lot_Info_Req"))
                    recv_EAP_EIS_Lot_Info_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_Lot_Info_Rep"))
                    recv_EIS_EAP_Lot_Info_Rep(issuer, msg);
                else if (operation.equals("EIS_EAP_RFID_Read_Cmp"))
                    recv_EIS_EAP_RFID_Read_Cmp(issuer, msg);
                else if (operation.equals("EAP_EIS_Equipment_Event"))
                    recv_EAP_EIS_Equipment_Event(issuer, msg);
                else if (operation.equals("RFID_EIS_Erase_Fail_Req"))
                    recv_RFID_EIS_Erase_Fail_Req(issuer, msg);
                else if (operation.equals("RFID_EIS_Write_Fail_Req"))
                    recv_RFID_EIS_Write_Fail_Req(issuer, msg);
                else if (operation.equals("EIS_CUS_EQ_Status_Event_Rep"))
                    recv_EIS_CUS_EQ_Status_Event_Rep(issuer, msg);
                else if (operation.equals("MES_EIS_Terminal_Msg"))
                    recv_MES_EIS_Terminal_Msg(issuer, msg);
                else if (operation.equals("EAP_EIS_GW_Info_Req"))
                    recv_EAP_EIS_GW_Info_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_GW_Info_Rep"))
                    recv_EIS_EAP_GW_Info_Rep(issuer, msg);
                else if (operation.equals("EAP_EIS_GW_Trans_Req"))
                    recv_EAP_EIS_GW_Trans_Req(issuer, msg);
                else if (operation.equals("EIS_EAP_GW_Trans_Rep"))
                    recv_EIS_EAP_GW_Trans_Rep(issuer, msg);
                else if (operation.equals("BETSEIS_Lot_Start_Req"))
                    recv_BETSEIS_Lot_Start_Req(issuer, msg);
                else if (operation.equals("BETSEIS_Lot_End_Req"))
                    recv_BETSEIS_Lot_End_Req(issuer, msg);
                else if (operation.equals("BETSEIS_Lot_Info_Req"))
                    recv_BETSEIS_Lot_Info_Req(issuer, msg);
                else if (operation.equals("BETSEIS_Hold_Req"))
                    recv_BETSEIS_Hold_Req(issuer, msg);

            else
            {
                if (DeliveryType.REQUEST == msg.getDeliveryMode())
                    h101stub.getInstance().sendReply(issuer, msg, msg.createReply(), h101stub.XGEN_ERROR_UNEXPECTED_OPERATION, "Unexpected Operation!");
                return new Exception("Unexpected Operation!(Operation:" + operation + ")");
            }

            return null;
        }
        catch(Exception e)
        {
            return e;
        }
    }

    
    public abstract void EIS_CUS_EQ_Dummy_Change_Clear(EIS_CUS_EQ_Dummy_Change_Clear_In_Tag EIS_CUS_EQ_Dummy_Change_Clear_In) throws Exception;
    private void recv_EIS_CUS_EQ_Dummy_Change_Clear(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_Dummy_Change_Clear_In_Tag EIS_CUS_EQ_Dummy_Change_Clear_In = new EIS_CUS_EQ_Dummy_Change_Clear_In_Tag();

        EISType.transform_EIS_CUS_EQ_Dummy_Change_Clear_In_Tag(former, EIS_CUS_EQ_Dummy_Change_Clear_In);
        EIS_CUS_EQ_Dummy_Change_Clear(EIS_CUS_EQ_Dummy_Change_Clear_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Equipment_Status_History(CUS_Equipment_Status_History_In_Tag CUS_Equipment_Status_History_In) throws Exception;
    private void recv_CUS_Equipment_Status_History(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Equipment_Status_History_In_Tag CUS_Equipment_Status_History_In = new CUS_Equipment_Status_History_In_Tag();

        EISType.transform_CUS_Equipment_Status_History_In_Tag(former, CUS_Equipment_Status_History_In);
        CUS_Equipment_Status_History(CUS_Equipment_Status_History_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Equipment_Process_State_His(CUS_Equipment_Process_State_His_In_Tag CUS_Equipment_Process_State_His_In) throws Exception;
    private void recv_CUS_Equipment_Process_State_His(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Equipment_Process_State_His_In_Tag CUS_Equipment_Process_State_His_In = new CUS_Equipment_Process_State_His_In_Tag();

        EISType.transform_CUS_Equipment_Process_State_His_In_Tag(former, CUS_Equipment_Process_State_His_In);
        CUS_Equipment_Process_State_His(CUS_Equipment_Process_State_His_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Frame_Reject(EIS_CUS_Frame_Reject_In_Tag EIS_CUS_Frame_Reject_In) throws Exception;
    private void recv_EIS_CUS_Frame_Reject(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Frame_Reject_In_Tag EIS_CUS_Frame_Reject_In = new EIS_CUS_Frame_Reject_In_Tag();

        EISType.transform_EIS_CUS_Frame_Reject_In_Tag(former, EIS_CUS_Frame_Reject_In);
        EIS_CUS_Frame_Reject(EIS_CUS_Frame_Reject_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_New_Mat(EIS_CUS_New_Mat_In_Tag EIS_CUS_New_Mat_In) throws Exception;
    private void recv_EIS_CUS_New_Mat(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_New_Mat_In_Tag EIS_CUS_New_Mat_In = new EIS_CUS_New_Mat_In_Tag();

        EISType.transform_EIS_CUS_New_Mat_In_Tag(former, EIS_CUS_New_Mat_In);
        EIS_CUS_New_Mat(EIS_CUS_New_Mat_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_CCS_Send(EIS_CUS_CCS_Send_In_Tag EIS_CUS_CCS_Send_In) throws Exception;
    private void recv_EIS_CUS_CCS_Send(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_CCS_Send_In_Tag EIS_CUS_CCS_Send_In = new EIS_CUS_CCS_Send_In_Tag();

        EISType.transform_EIS_CUS_CCS_Send_In_Tag(former, EIS_CUS_CCS_Send_In);
        EIS_CUS_CCS_Send(EIS_CUS_CCS_Send_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_CCS_Approve(EIS_CUS_CCS_Approve_In_Tag EIS_CUS_CCS_Approve_In) throws Exception;
    private void recv_EIS_CUS_CCS_Approve(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_CCS_Approve_In_Tag EIS_CUS_CCS_Approve_In = new EIS_CUS_CCS_Approve_In_Tag();

        EISType.transform_EIS_CUS_CCS_Approve_In_Tag(former, EIS_CUS_CCS_Approve_In);
        EIS_CUS_CCS_Approve(EIS_CUS_CCS_Approve_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_DA_Current_Lot_Info_Req(EIS_CUS_DA_Current_Lot_Info_Req_In_Tag EIS_CUS_DA_Current_Lot_Info_Req_In) throws Exception;
    private void recv_EIS_CUS_DA_Current_Lot_Info_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_DA_Current_Lot_Info_Req_In_Tag EIS_CUS_DA_Current_Lot_Info_Req_In = new EIS_CUS_DA_Current_Lot_Info_Req_In_Tag();

        EISType.transform_EIS_CUS_DA_Current_Lot_Info_Req_In_Tag(former, EIS_CUS_DA_Current_Lot_Info_Req_In);
        EIS_CUS_DA_Current_Lot_Info_Req(EIS_CUS_DA_Current_Lot_Info_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_DA_Current_Lot_Info_Rep(EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag EIS_CUS_DA_Current_Lot_Info_Rep_In) throws Exception;
    private void recv_EIS_CUS_DA_Current_Lot_Info_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag EIS_CUS_DA_Current_Lot_Info_Rep_In = new EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag();

        EISType.transform_EIS_CUS_DA_Current_Lot_Info_Rep_In_Tag(former, EIS_CUS_DA_Current_Lot_Info_Rep_In);
        EIS_CUS_DA_Current_Lot_Info_Rep(EIS_CUS_DA_Current_Lot_Info_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAPEIS_EMS_Fail(EAPEIS_EMS_Fail_In_Tag EAPEIS_EMS_Fail_In) throws Exception;
    private void recv_EAPEIS_EMS_Fail(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAPEIS_EMS_Fail_In_Tag EAPEIS_EMS_Fail_In = new EAPEIS_EMS_Fail_In_Tag();

        EISType.transform_EAPEIS_EMS_Fail_In_Tag(former, EAPEIS_EMS_Fail_In);
        EAPEIS_EMS_Fail(EAPEIS_EMS_Fail_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Lot_Start_Req(EAP_EIS_Lot_Start_Req_In_Tag EAP_EIS_Lot_Start_Req_In) throws Exception;
    private void recv_EAP_EIS_Lot_Start_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Lot_Start_Req_In_Tag EAP_EIS_Lot_Start_Req_In = new EAP_EIS_Lot_Start_Req_In_Tag();

        EISType.transform_EAP_EIS_Lot_Start_Req_In_Tag(former, EAP_EIS_Lot_Start_Req_In);
        EAP_EIS_Lot_Start_Req(EAP_EIS_Lot_Start_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Lot_Start_Rep(EIS_EAP_Lot_Start_Rep_In_Tag EIS_EAP_Lot_Start_Rep_In) throws Exception;
    private void recv_EIS_EAP_Lot_Start_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Lot_Start_Rep_In_Tag EIS_EAP_Lot_Start_Rep_In = new EIS_EAP_Lot_Start_Rep_In_Tag();

        EISType.transform_EIS_EAP_Lot_Start_Rep_In_Tag(former, EIS_EAP_Lot_Start_Rep_In);
        EIS_EAP_Lot_Start_Rep(EIS_EAP_Lot_Start_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAPEIS_OVEN_Lot_Start_Req(EAPEIS_OVEN_Lot_Start_Req_In_Tag EAPEIS_OVEN_Lot_Start_Req_In) throws Exception;
    private void recv_EAPEIS_OVEN_Lot_Start_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAPEIS_OVEN_Lot_Start_Req_In_Tag EAPEIS_OVEN_Lot_Start_Req_In = new EAPEIS_OVEN_Lot_Start_Req_In_Tag();

        EISType.transform_EAPEIS_OVEN_Lot_Start_Req_In_Tag(former, EAPEIS_OVEN_Lot_Start_Req_In);
        EAPEIS_OVEN_Lot_Start_Req(EAPEIS_OVEN_Lot_Start_Req_In); /* Call User Procedure */
        
    }

    public abstract void EISEAP_OVEN_Lot_Start_Rep(EISEAP_OVEN_Lot_Start_Rep_In_Tag EISEAP_OVEN_Lot_Start_Rep_In) throws Exception;
    private void recv_EISEAP_OVEN_Lot_Start_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EISEAP_OVEN_Lot_Start_Rep_In_Tag EISEAP_OVEN_Lot_Start_Rep_In = new EISEAP_OVEN_Lot_Start_Rep_In_Tag();

        EISType.transform_EISEAP_OVEN_Lot_Start_Rep_In_Tag(former, EISEAP_OVEN_Lot_Start_Rep_In);
        EISEAP_OVEN_Lot_Start_Rep(EISEAP_OVEN_Lot_Start_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAPEIS_OVEN_Lot_End_Req(EAPEIS_OVEN_Lot_End_Req_In_Tag EAPEIS_OVEN_Lot_End_Req_In) throws Exception;
    private void recv_EAPEIS_OVEN_Lot_End_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAPEIS_OVEN_Lot_End_Req_In_Tag EAPEIS_OVEN_Lot_End_Req_In = new EAPEIS_OVEN_Lot_End_Req_In_Tag();

        EISType.transform_EAPEIS_OVEN_Lot_End_Req_In_Tag(former, EAPEIS_OVEN_Lot_End_Req_In);
        EAPEIS_OVEN_Lot_End_Req(EAPEIS_OVEN_Lot_End_Req_In); /* Call User Procedure */
        
    }

    public abstract void EISEAP_OVEN_Lot_End_Rep(EISEAP_OVEN_Lot_End_Rep_In_Tag EISEAP_OVEN_Lot_End_Rep_In) throws Exception;
    private void recv_EISEAP_OVEN_Lot_End_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EISEAP_OVEN_Lot_End_Rep_In_Tag EISEAP_OVEN_Lot_End_Rep_In = new EISEAP_OVEN_Lot_End_Rep_In_Tag();

        EISType.transform_EISEAP_OVEN_Lot_End_Rep_In_Tag(former, EISEAP_OVEN_Lot_End_Rep_In);
        EISEAP_OVEN_Lot_End_Rep(EISEAP_OVEN_Lot_End_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Lot_End_Req(EAP_EIS_Lot_End_Req_In_Tag EAP_EIS_Lot_End_Req_In) throws Exception;
    private void recv_EAP_EIS_Lot_End_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Lot_End_Req_In_Tag EAP_EIS_Lot_End_Req_In = new EAP_EIS_Lot_End_Req_In_Tag();

        EISType.transform_EAP_EIS_Lot_End_Req_In_Tag(former, EAP_EIS_Lot_End_Req_In);
        EAP_EIS_Lot_End_Req(EAP_EIS_Lot_End_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Lot_End_Rep(EIS_EAP_Lot_End_Rep_In_Tag EIS_EAP_Lot_End_Rep_In) throws Exception;
    private void recv_EIS_EAP_Lot_End_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Lot_End_Rep_In_Tag EIS_EAP_Lot_End_Rep_In = new EIS_EAP_Lot_End_Rep_In_Tag();

        EISType.transform_EIS_EAP_Lot_End_Rep_In_Tag(former, EIS_EAP_Lot_End_Rep_In);
        EIS_EAP_Lot_End_Rep(EIS_EAP_Lot_End_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Label_Create(EAP_EIS_Label_Create_In_Tag EAP_EIS_Label_Create_In) throws Exception;
    private void recv_EAP_EIS_Label_Create(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Label_Create_In_Tag EAP_EIS_Label_Create_In = new EAP_EIS_Label_Create_In_Tag();

        EISType.transform_EAP_EIS_Label_Create_In_Tag(former, EAP_EIS_Label_Create_In);
        EAP_EIS_Label_Create(EAP_EIS_Label_Create_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Label_Validation_Fail(EAP_EIS_Label_Validation_Fail_In_Tag EAP_EIS_Label_Validation_Fail_In) throws Exception;
    private void recv_EAP_EIS_Label_Validation_Fail(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Label_Validation_Fail_In_Tag EAP_EIS_Label_Validation_Fail_In = new EAP_EIS_Label_Validation_Fail_In_Tag();

        EISType.transform_EAP_EIS_Label_Validation_Fail_In_Tag(former, EAP_EIS_Label_Validation_Fail_In);
        EAP_EIS_Label_Validation_Fail(EAP_EIS_Label_Validation_Fail_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Windows_Time_Over(EAP_EIS_Windows_Time_Over_In_Tag EAP_EIS_Windows_Time_Over_In) throws Exception;
    private void recv_EAP_EIS_Windows_Time_Over(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Windows_Time_Over_In_Tag EAP_EIS_Windows_Time_Over_In = new EAP_EIS_Windows_Time_Over_In_Tag();

        EISType.transform_EAP_EIS_Windows_Time_Over_In_Tag(former, EAP_EIS_Windows_Time_Over_In);
        EAP_EIS_Windows_Time_Over(EAP_EIS_Windows_Time_Over_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_DA_Start(EAP_EIS_DA_Start_In_Tag EAP_EIS_DA_Start_In) throws Exception;
    private void recv_EAP_EIS_DA_Start(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_DA_Start_In_Tag EAP_EIS_DA_Start_In = new EAP_EIS_DA_Start_In_Tag();

        EISType.transform_EAP_EIS_DA_Start_In_Tag(former, EAP_EIS_DA_Start_In);
        EAP_EIS_DA_Start(EAP_EIS_DA_Start_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_DA_Run_Down(EAP_EIS_DA_Run_Down_In_Tag EAP_EIS_DA_Run_Down_In) throws Exception;
    private void recv_EAP_EIS_DA_Run_Down(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_DA_Run_Down_In_Tag EAP_EIS_DA_Run_Down_In = new EAP_EIS_DA_Run_Down_In_Tag();

        EISType.transform_EAP_EIS_DA_Run_Down_In_Tag(former, EAP_EIS_DA_Run_Down_In);
        EAP_EIS_DA_Run_Down(EAP_EIS_DA_Run_Down_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Count_Verification_Fail(EAP_EIS_Count_Verification_Fail_In_Tag EAP_EIS_Count_Verification_Fail_In) throws Exception;
    private void recv_EAP_EIS_Count_Verification_Fail(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Count_Verification_Fail_In_Tag EAP_EIS_Count_Verification_Fail_In = new EAP_EIS_Count_Verification_Fail_In_Tag();

        EISType.transform_EAP_EIS_Count_Verification_Fail_In_Tag(former, EAP_EIS_Count_Verification_Fail_In);
        EAP_EIS_Count_Verification_Fail(EAP_EIS_Count_Verification_Fail_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Lot_Start_Multi_Req(EAP_EIS_Lot_Start_Multi_Req_In_Tag EAP_EIS_Lot_Start_Multi_Req_In) throws Exception;
    private void recv_EAP_EIS_Lot_Start_Multi_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Lot_Start_Multi_Req_In_Tag EAP_EIS_Lot_Start_Multi_Req_In = new EAP_EIS_Lot_Start_Multi_Req_In_Tag();

        EISType.transform_EAP_EIS_Lot_Start_Multi_Req_In_Tag(former, EAP_EIS_Lot_Start_Multi_Req_In);
        EAP_EIS_Lot_Start_Multi_Req(EAP_EIS_Lot_Start_Multi_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Lot_Start_Multi_Rep(EIS_EAP_Lot_Start_Multi_Rep_In_Tag EIS_EAP_Lot_Start_Multi_Rep_In) throws Exception;
    private void recv_EIS_EAP_Lot_Start_Multi_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Lot_Start_Multi_Rep_In_Tag EIS_EAP_Lot_Start_Multi_Rep_In = new EIS_EAP_Lot_Start_Multi_Rep_In_Tag();

        EISType.transform_EIS_EAP_Lot_Start_Multi_Rep_In_Tag(former, EIS_EAP_Lot_Start_Multi_Rep_In);
        EIS_EAP_Lot_Start_Multi_Rep(EIS_EAP_Lot_Start_Multi_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Lot_End_Multi_Req(EAP_EIS_Lot_End_Multi_Req_In_Tag EAP_EIS_Lot_End_Multi_Req_In) throws Exception;
    private void recv_EAP_EIS_Lot_End_Multi_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Lot_End_Multi_Req_In_Tag EAP_EIS_Lot_End_Multi_Req_In = new EAP_EIS_Lot_End_Multi_Req_In_Tag();

        EISType.transform_EAP_EIS_Lot_End_Multi_Req_In_Tag(former, EAP_EIS_Lot_End_Multi_Req_In);
        EAP_EIS_Lot_End_Multi_Req(EAP_EIS_Lot_End_Multi_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Lot_End_Multi_Rep(EIS_EAP_Lot_End_Multi_Rep_In_Tag EIS_EAP_Lot_End_Multi_Rep_In) throws Exception;
    private void recv_EIS_EAP_Lot_End_Multi_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Lot_End_Multi_Rep_In_Tag EIS_EAP_Lot_End_Multi_Rep_In = new EIS_EAP_Lot_End_Multi_Rep_In_Tag();

        EISType.transform_EIS_EAP_Lot_End_Multi_Rep_In_Tag(former, EIS_EAP_Lot_End_Multi_Rep_In);
        EIS_EAP_Lot_End_Multi_Rep(EIS_EAP_Lot_End_Multi_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Wafer_Angle_Compare_Fail(EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag EAP_EIS_Wafer_Angle_Compare_Fail_In) throws Exception;
    private void recv_EAP_EIS_Wafer_Angle_Compare_Fail(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag EAP_EIS_Wafer_Angle_Compare_Fail_In = new EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag();

        EISType.transform_EAP_EIS_Wafer_Angle_Compare_Fail_In_Tag(former, EAP_EIS_Wafer_Angle_Compare_Fail_In);
        EAP_EIS_Wafer_Angle_Compare_Fail(EAP_EIS_Wafer_Angle_Compare_Fail_In); /* Call User Procedure */
        
    }

    public abstract void RFIDEIS_Read_Req(RFIDEIS_Read_Req_In_Tag RFIDEIS_Read_Req_In) throws Exception;
    private void recv_RFIDEIS_Read_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        RFIDEIS_Read_Req_In_Tag RFIDEIS_Read_Req_In = new RFIDEIS_Read_Req_In_Tag();

        EISType.transform_RFIDEIS_Read_Req_In_Tag(former, RFIDEIS_Read_Req_In);
        RFIDEIS_Read_Req(RFIDEIS_Read_Req_In); /* Call User Procedure */
        
    }

    public abstract void EISRFID_Read_Rep(EISRFID_Read_Rep_In_Tag EISRFID_Read_Rep_In) throws Exception;
    private void recv_EISRFID_Read_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EISRFID_Read_Rep_In_Tag EISRFID_Read_Rep_In = new EISRFID_Read_Rep_In_Tag();

        EISType.transform_EISRFID_Read_Rep_In_Tag(former, EISRFID_Read_Rep_In);
        EISRFID_Read_Rep(EISRFID_Read_Rep_In); /* Call User Procedure */
        
    }

    public abstract void RFIDEIS_Lot_Id_Req(RFIDEIS_Lot_Id_Req_In_Tag RFIDEIS_Lot_Id_Req_In) throws Exception;
    private void recv_RFIDEIS_Lot_Id_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        RFIDEIS_Lot_Id_Req_In_Tag RFIDEIS_Lot_Id_Req_In = new RFIDEIS_Lot_Id_Req_In_Tag();

        EISType.transform_RFIDEIS_Lot_Id_Req_In_Tag(former, RFIDEIS_Lot_Id_Req_In);
        RFIDEIS_Lot_Id_Req(RFIDEIS_Lot_Id_Req_In); /* Call User Procedure */
        
    }

    public abstract void EISRFID_Lot_Id_Rep(EISRFID_Lot_Id_Rep_In_Tag EISRFID_Lot_Id_Rep_In) throws Exception;
    private void recv_EISRFID_Lot_Id_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EISRFID_Lot_Id_Rep_In_Tag EISRFID_Lot_Id_Rep_In = new EISRFID_Lot_Id_Rep_In_Tag();

        EISType.transform_EISRFID_Lot_Id_Rep_In_Tag(former, EISRFID_Lot_Id_Rep_In);
        EISRFID_Lot_Id_Rep(EISRFID_Lot_Id_Rep_In); /* Call User Procedure */
        
    }

    public abstract void AMC_EIS_Feeder_Status(AMC_EIS_Feeder_Status_In_Tag AMC_EIS_Feeder_Status_In) throws Exception;
    private void recv_AMC_EIS_Feeder_Status(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        AMC_EIS_Feeder_Status_In_Tag AMC_EIS_Feeder_Status_In = new AMC_EIS_Feeder_Status_In_Tag();

        EISType.transform_AMC_EIS_Feeder_Status_In_Tag(former, AMC_EIS_Feeder_Status_In);
        AMC_EIS_Feeder_Status(AMC_EIS_Feeder_Status_In); /* Call User Procedure */
        
    }

    public abstract void AMC_EIS_Lock_Cmd_Req(AMC_EIS_Lock_Cmd_Req_In_Tag AMC_EIS_Lock_Cmd_Req_In) throws Exception;
    private void recv_AMC_EIS_Lock_Cmd_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        AMC_EIS_Lock_Cmd_Req_In_Tag AMC_EIS_Lock_Cmd_Req_In = new AMC_EIS_Lock_Cmd_Req_In_Tag();

        EISType.transform_AMC_EIS_Lock_Cmd_Req_In_Tag(former, AMC_EIS_Lock_Cmd_Req_In);
        AMC_EIS_Lock_Cmd_Req(AMC_EIS_Lock_Cmd_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_AMC_Lock_Cmd_Rep(EIS_AMC_Lock_Cmd_Rep_In_Tag EIS_AMC_Lock_Cmd_Rep_In) throws Exception;
    private void recv_EIS_AMC_Lock_Cmd_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_AMC_Lock_Cmd_Rep_In_Tag EIS_AMC_Lock_Cmd_Rep_In = new EIS_AMC_Lock_Cmd_Rep_In_Tag();

        EISType.transform_EIS_AMC_Lock_Cmd_Rep_In_Tag(former, EIS_AMC_Lock_Cmd_Rep_In);
        EIS_AMC_Lock_Cmd_Rep(EIS_AMC_Lock_Cmd_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Tool_Change_Req(EAP_EIS_Tool_Change_Req_In_Tag EAP_EIS_Tool_Change_Req_In) throws Exception;
    private void recv_EAP_EIS_Tool_Change_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Tool_Change_Req_In_Tag EAP_EIS_Tool_Change_Req_In = new EAP_EIS_Tool_Change_Req_In_Tag();

        EISType.transform_EAP_EIS_Tool_Change_Req_In_Tag(former, EAP_EIS_Tool_Change_Req_In);
        EAP_EIS_Tool_Change_Req(EAP_EIS_Tool_Change_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Tool_Change_Rep(EIS_EAP_Tool_Change_Rep_In_Tag EIS_EAP_Tool_Change_Rep_In) throws Exception;
    private void recv_EIS_EAP_Tool_Change_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Tool_Change_Rep_In_Tag EIS_EAP_Tool_Change_Rep_In = new EIS_EAP_Tool_Change_Rep_In_Tag();

        EISType.transform_EIS_EAP_Tool_Change_Rep_In_Tag(former, EIS_EAP_Tool_Change_Rep_In);
        EIS_EAP_Tool_Change_Rep(EIS_EAP_Tool_Change_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Locking_Start_Req(EAP_EIS_Locking_Start_Req_In_Tag EAP_EIS_Locking_Start_Req_In) throws Exception;
    private void recv_EAP_EIS_Locking_Start_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Locking_Start_Req_In_Tag EAP_EIS_Locking_Start_Req_In = new EAP_EIS_Locking_Start_Req_In_Tag();

        EISType.transform_EAP_EIS_Locking_Start_Req_In_Tag(former, EAP_EIS_Locking_Start_Req_In);
        EAP_EIS_Locking_Start_Req(EAP_EIS_Locking_Start_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Locking_Start_Rep(EIS_EAP_Locking_Start_Rep_In_Tag EIS_EAP_Locking_Start_Rep_In) throws Exception;
    private void recv_EIS_EAP_Locking_Start_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Locking_Start_Rep_In_Tag EIS_EAP_Locking_Start_Rep_In = new EIS_EAP_Locking_Start_Rep_In_Tag();

        EISType.transform_EIS_EAP_Locking_Start_Rep_In_Tag(former, EIS_EAP_Locking_Start_Rep_In);
        EIS_EAP_Locking_Start_Rep(EIS_EAP_Locking_Start_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Tray_Full_Req(EAP_EIS_Tray_Full_Req_In_Tag EAP_EIS_Tray_Full_Req_In) throws Exception;
    private void recv_EAP_EIS_Tray_Full_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Tray_Full_Req_In_Tag EAP_EIS_Tray_Full_Req_In = new EAP_EIS_Tray_Full_Req_In_Tag();

        EISType.transform_EAP_EIS_Tray_Full_Req_In_Tag(former, EAP_EIS_Tray_Full_Req_In);
        EAP_EIS_Tray_Full_Req(EAP_EIS_Tray_Full_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Tray_Full_Rep(EIS_EAP_Tray_Full_Rep_In_Tag EIS_EAP_Tray_Full_Rep_In) throws Exception;
    private void recv_EIS_EAP_Tray_Full_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Tray_Full_Rep_In_Tag EIS_EAP_Tray_Full_Rep_In = new EIS_EAP_Tray_Full_Rep_In_Tag();

        EISType.transform_EIS_EAP_Tray_Full_Rep_In_Tag(former, EIS_EAP_Tray_Full_Rep_In);
        EIS_EAP_Tray_Full_Rep(EIS_EAP_Tray_Full_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQ_Locking_Message(EIS_CUS_EQ_Locking_Message_In_Tag EIS_CUS_EQ_Locking_Message_In) throws Exception;
    private void recv_EIS_CUS_EQ_Locking_Message(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_Locking_Message_In_Tag EIS_CUS_EQ_Locking_Message_In = new EIS_CUS_EQ_Locking_Message_In_Tag();

        EISType.transform_EIS_CUS_EQ_Locking_Message_In_Tag(former, EIS_CUS_EQ_Locking_Message_In);
        EIS_CUS_EQ_Locking_Message(EIS_CUS_EQ_Locking_Message_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQ_ALARM_Event(EIS_CUS_EQ_ALARM_Event_In_Tag EIS_CUS_EQ_ALARM_Event_In) throws Exception;
    private void recv_EIS_CUS_EQ_ALARM_Event(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_ALARM_Event_In_Tag EIS_CUS_EQ_ALARM_Event_In = new EIS_CUS_EQ_ALARM_Event_In_Tag();

        EISType.transform_EIS_CUS_EQ_ALARM_Event_In_Tag(former, EIS_CUS_EQ_ALARM_Event_In);
        EIS_CUS_EQ_ALARM_Event(EIS_CUS_EQ_ALARM_Event_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Mode_Change(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In) throws Exception;
    private void recv_EIS_CUS_Mode_Change(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In = new EIS_CUS_Mode_Change_In_Tag();

        EISType.transform_EIS_CUS_Mode_Change_In_Tag(former, EIS_CUS_Mode_Change_In);
        EIS_CUS_Mode_Change(EIS_CUS_Mode_Change_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Status_Change(EIS_CUS_Status_Change_In_Tag EIS_CUS_Status_Change_In) throws Exception;
    private void recv_EIS_CUS_Status_Change(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Status_Change_In_Tag EIS_CUS_Status_Change_In = new EIS_CUS_Status_Change_In_Tag();

        EISType.transform_EIS_CUS_Status_Change_In_Tag(former, EIS_CUS_Status_Change_In);
        EIS_CUS_Status_Change(EIS_CUS_Status_Change_In); /* Call User Procedure */
        
    }

    public abstract void EIS_Collect_Data(EIS_Collect_Data_In_Tag EIS_Collect_Data_In) throws Exception;
    private void recv_EIS_Collect_Data(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_Collect_Data_In_Tag EIS_Collect_Data_In = new EIS_Collect_Data_In_Tag();

        EISType.transform_EIS_Collect_Data_In_Tag(former, EIS_Collect_Data_In);
        EIS_Collect_Data(EIS_Collect_Data_In); /* Call User Procedure */
        
    }

    public abstract void CUS_EQ_Status_Info_Request(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In) throws Exception;
    private void recv_CUS_EQ_Status_Info_Request(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In = new EIS_CUS_Mode_Change_In_Tag();

        EISType.transform_EIS_CUS_Mode_Change_In_Tag(former, EIS_CUS_Mode_Change_In);
        CUS_EQ_Status_Info_Request(EIS_CUS_Mode_Change_In); /* Call User Procedure */
        
    }

    public abstract void CUS_EQ_Terminal_Message_Send(CUS_EQ_Terminal_Message_Send_In_Tag CUS_EQ_Terminal_Message_Send_In) throws Exception;
    private void recv_CUS_EQ_Terminal_Message_Send(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_EQ_Terminal_Message_Send_In_Tag CUS_EQ_Terminal_Message_Send_In = new CUS_EQ_Terminal_Message_Send_In_Tag();

        EISType.transform_CUS_EQ_Terminal_Message_Send_In_Tag(former, CUS_EQ_Terminal_Message_Send_In);
        CUS_EQ_Terminal_Message_Send(CUS_EQ_Terminal_Message_Send_In); /* Call User Procedure */
        
    }

    public abstract void CUS_EQ_Mode_Change_Send(EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In) throws Exception;
    private void recv_CUS_EQ_Mode_Change_Send(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Mode_Change_In_Tag EIS_CUS_Mode_Change_In = new EIS_CUS_Mode_Change_In_Tag();

        EISType.transform_EIS_CUS_Mode_Change_In_Tag(former, EIS_CUS_Mode_Change_In);
        CUS_EQ_Mode_Change_Send(EIS_CUS_Mode_Change_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Current_Lot_Info_Req(EIS_CUS_Current_Lot_Info_Req_In_Tag EIS_CUS_Current_Lot_Info_Req_In) throws Exception;
    private void recv_EIS_CUS_Current_Lot_Info_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Current_Lot_Info_Req_In_Tag EIS_CUS_Current_Lot_Info_Req_In = new EIS_CUS_Current_Lot_Info_Req_In_Tag();

        EISType.transform_EIS_CUS_Current_Lot_Info_Req_In_Tag(former, EIS_CUS_Current_Lot_Info_Req_In);
        EIS_CUS_Current_Lot_Info_Req(EIS_CUS_Current_Lot_Info_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Last_Dev_Chg_Info_Req(EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag EIS_CUS_Last_Dev_Chg_Info_Req_In) throws Exception;
    private void recv_EIS_CUS_Last_Dev_Chg_Info_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag EIS_CUS_Last_Dev_Chg_Info_Req_In = new EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag();

        EISType.transform_EIS_CUS_Last_Dev_Chg_Info_Req_In_Tag(former, EIS_CUS_Last_Dev_Chg_Info_Req_In);
        EIS_CUS_Last_Dev_Chg_Info_Req(EIS_CUS_Last_Dev_Chg_Info_Req_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Lot_Start_Info(CUS_Lot_Start_Info_In_Tag CUS_Lot_Start_Info_In) throws Exception;
    private void recv_CUS_Lot_Start_Info(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Lot_Start_Info_In_Tag CUS_Lot_Start_Info_In = new CUS_Lot_Start_Info_In_Tag();

        EISType.transform_CUS_Lot_Start_Info_In_Tag(former, CUS_Lot_Start_Info_In);
        CUS_Lot_Start_Info(CUS_Lot_Start_Info_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Last_Dev_Chg_Info_Rep(CUS_Last_Dev_Chg_Info_Rep_In_Tag CUS_Last_Dev_Chg_Info_Rep_In) throws Exception;
    private void recv_CUS_Last_Dev_Chg_Info_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Last_Dev_Chg_Info_Rep_In_Tag CUS_Last_Dev_Chg_Info_Rep_In = new CUS_Last_Dev_Chg_Info_Rep_In_Tag();

        EISType.transform_CUS_Last_Dev_Chg_Info_Rep_In_Tag(former, CUS_Last_Dev_Chg_Info_Rep_In);
        CUS_Last_Dev_Chg_Info_Rep(CUS_Last_Dev_Chg_Info_Rep_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Current_Lot_Info_Rep(CUS_Current_Lot_Info_Rep_In_Tag CUS_Current_Lot_Info_Rep_In) throws Exception;
    private void recv_CUS_Current_Lot_Info_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Current_Lot_Info_Rep_In_Tag CUS_Current_Lot_Info_Rep_In = new CUS_Current_Lot_Info_Rep_In_Tag();

        EISType.transform_CUS_Current_Lot_Info_Rep_In_Tag(former, CUS_Current_Lot_Info_Rep_In);
        CUS_Current_Lot_Info_Rep(CUS_Current_Lot_Info_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQ_Status_Event(EIS_CUS_EQ_Status_Event_In_Tag EIS_CUS_EQ_Status_Event_In) throws Exception;
    private void recv_EIS_CUS_EQ_Status_Event(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_Status_Event_In_Tag EIS_CUS_EQ_Status_Event_In = new EIS_CUS_EQ_Status_Event_In_Tag();

        EISType.transform_EIS_CUS_EQ_Status_Event_In_Tag(former, EIS_CUS_EQ_Status_Event_In);
        EIS_CUS_EQ_Status_Event(EIS_CUS_EQ_Status_Event_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQ_Lot_Status_Req(EIS_CUS_EQ_Lot_Status_Req_In_Tag EIS_CUS_EQ_Lot_Status_Req_In) throws Exception;
    private void recv_EIS_CUS_EQ_Lot_Status_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_Lot_Status_Req_In_Tag EIS_CUS_EQ_Lot_Status_Req_In = new EIS_CUS_EQ_Lot_Status_Req_In_Tag();

        EISType.transform_EIS_CUS_EQ_Lot_Status_Req_In_Tag(former, EIS_CUS_EQ_Lot_Status_Req_In);
        EIS_CUS_EQ_Lot_Status_Req(EIS_CUS_EQ_Lot_Status_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQ_Lot_Status_Rep(EIS_CUS_EQ_Lot_Status_Rep_In_Tag EIS_CUS_EQ_Lot_Status_Rep_In) throws Exception;
    private void recv_EIS_CUS_EQ_Lot_Status_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_Lot_Status_Rep_In_Tag EIS_CUS_EQ_Lot_Status_Rep_In = new EIS_CUS_EQ_Lot_Status_Rep_In_Tag();

        EISType.transform_EIS_CUS_EQ_Lot_Status_Rep_In_Tag(former, EIS_CUS_EQ_Lot_Status_Rep_In);
        EIS_CUS_EQ_Lot_Status_Rep(EIS_CUS_EQ_Lot_Status_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQ_Lot_Count_Event(EIS_CUS_EQ_Lot_Count_Event_In_Tag EIS_CUS_EQ_Lot_Count_Event_In) throws Exception;
    private void recv_EIS_CUS_EQ_Lot_Count_Event(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_Lot_Count_Event_In_Tag EIS_CUS_EQ_Lot_Count_Event_In = new EIS_CUS_EQ_Lot_Count_Event_In_Tag();

        EISType.transform_EIS_CUS_EQ_Lot_Count_Event_In_Tag(former, EIS_CUS_EQ_Lot_Count_Event_In);
        EIS_CUS_EQ_Lot_Count_Event(EIS_CUS_EQ_Lot_Count_Event_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Lot_End_Info(CUS_Lot_End_Info_In_Tag CUS_Lot_End_Info_In) throws Exception;
    private void recv_CUS_Lot_End_Info(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Lot_End_Info_In_Tag CUS_Lot_End_Info_In = new CUS_Lot_End_Info_In_Tag();

        EISType.transform_CUS_Lot_End_Info_In_Tag(former, CUS_Lot_End_Info_In);
        CUS_Lot_End_Info(CUS_Lot_End_Info_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Maint_End_Info(CUS_Maint_End_Info_In_Tag CUS_Maint_End_Info_In) throws Exception;
    private void recv_CUS_Maint_End_Info(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Maint_End_Info_In_Tag CUS_Maint_End_Info_In = new CUS_Maint_End_Info_In_Tag();

        EISType.transform_CUS_Maint_End_Info_In_Tag(former, CUS_Maint_End_Info_In);
        CUS_Maint_End_Info(CUS_Maint_End_Info_In); /* Call User Procedure */
        
    }

    public abstract void FMB_EIS_CUS_STATUS_CHANGE(FMB_EIS_CUS_STATUS_CHANGE_IN_TAG FMB_EIS_CUS_STATUS_CHANGE_IN) throws Exception;
    private void recv_FMB_EIS_CUS_STATUS_CHANGE(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        FMB_EIS_CUS_STATUS_CHANGE_IN_TAG FMB_EIS_CUS_STATUS_CHANGE_IN = new FMB_EIS_CUS_STATUS_CHANGE_IN_TAG();

        EISType.transform_FMB_EIS_CUS_STATUS_CHANGE_IN_TAG(former, FMB_EIS_CUS_STATUS_CHANGE_IN);
        FMB_EIS_CUS_STATUS_CHANGE(FMB_EIS_CUS_STATUS_CHANGE_IN); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQ_OnOff_Event(EIS_CUS_EQ_OnOff_Event_In_Tag EIS_CUS_EQ_OnOff_Event_In) throws Exception;
    private void recv_EIS_CUS_EQ_OnOff_Event(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_OnOff_Event_In_Tag EIS_CUS_EQ_OnOff_Event_In = new EIS_CUS_EQ_OnOff_Event_In_Tag();

        EISType.transform_EIS_CUS_EQ_OnOff_Event_In_Tag(former, EIS_CUS_EQ_OnOff_Event_In);
        EIS_CUS_EQ_OnOff_Event(EIS_CUS_EQ_OnOff_Event_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_BPCS_Fail(EIS_CUS_BPCS_Fail_In_Tag EIS_CUS_BPCS_Fail_In) throws Exception;
    private void recv_EIS_CUS_BPCS_Fail(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_BPCS_Fail_In_Tag EIS_CUS_BPCS_Fail_In = new EIS_CUS_BPCS_Fail_In_Tag();

        EISType.transform_EIS_CUS_BPCS_Fail_In_Tag(former, EIS_CUS_BPCS_Fail_In);
        EIS_CUS_BPCS_Fail(EIS_CUS_BPCS_Fail_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_CCS_Fail(CUS_Eap_CCS_Fail_In_Tag CUS_Eap_CCS_Fail_In) throws Exception;
    private void recv_CUS_Eap_CCS_Fail(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_CCS_Fail_In_Tag CUS_Eap_CCS_Fail_In = new CUS_Eap_CCS_Fail_In_Tag();

        EISType.transform_CUS_Eap_CCS_Fail_In_Tag(former, CUS_Eap_CCS_Fail_In);
        CUS_Eap_CCS_Fail(CUS_Eap_CCS_Fail_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_Chip_Cnt_Diff(CUS_Eap_Chip_Cnt_Diff_In_Tag CUS_Eap_Chip_Cnt_Diff_In) throws Exception;
    private void recv_CUS_Eap_Chip_Cnt_Diff(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_Chip_Cnt_Diff_In_Tag CUS_Eap_Chip_Cnt_Diff_In = new CUS_Eap_Chip_Cnt_Diff_In_Tag();

        EISType.transform_CUS_Eap_Chip_Cnt_Diff_In_Tag(former, CUS_Eap_Chip_Cnt_Diff_In);
        CUS_Eap_Chip_Cnt_Diff(CUS_Eap_Chip_Cnt_Diff_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_CCS_EQ_Data(CUS_Eap_CCS_EQ_Data_In_Tag CUS_Eap_CCS_EQ_Data_In) throws Exception;
    private void recv_CUS_Eap_CCS_EQ_Data(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_CCS_EQ_Data_In_Tag CUS_Eap_CCS_EQ_Data_In = new CUS_Eap_CCS_EQ_Data_In_Tag();

        EISType.transform_CUS_Eap_CCS_EQ_Data_In_Tag(former, CUS_Eap_CCS_EQ_Data_In);
        CUS_Eap_CCS_EQ_Data(CUS_Eap_CCS_EQ_Data_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_release_EQ(CUS_Eap_release_EQ_In_Tag CUS_Eap_release_EQ_In) throws Exception;
    private void recv_CUS_Eap_release_EQ(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_release_EQ_In_Tag CUS_Eap_release_EQ_In = new CUS_Eap_release_EQ_In_Tag();

        EISType.transform_CUS_Eap_release_EQ_In_Tag(former, CUS_Eap_release_EQ_In);
        CUS_Eap_release_EQ(CUS_Eap_release_EQ_In); /* Call User Procedure */
        
    }

    public abstract void CUS_MesEap_Inhibit_EQ(CUS_MesEap_Inhibit_EQ_In_Tag CUS_MesEap_Inhibit_EQ_In) throws Exception;
    private void recv_CUS_MesEap_Inhibit_EQ(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_MesEap_Inhibit_EQ_In_Tag CUS_MesEap_Inhibit_EQ_In = new CUS_MesEap_Inhibit_EQ_In_Tag();

        EISType.transform_CUS_MesEap_Inhibit_EQ_In_Tag(former, CUS_MesEap_Inhibit_EQ_In);
        CUS_MesEap_Inhibit_EQ(CUS_MesEap_Inhibit_EQ_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_LOT_Release_Data(CUS_Eap_LOT_Release_Data_In_Tag CUS_Eap_LOT_Release_Data_In) throws Exception;
    private void recv_CUS_Eap_LOT_Release_Data(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_LOT_Release_Data_In_Tag CUS_Eap_LOT_Release_Data_In = new CUS_Eap_LOT_Release_Data_In_Tag();

        EISType.transform_CUS_Eap_LOT_Release_Data_In_Tag(former, CUS_Eap_LOT_Release_Data_In);
        CUS_Eap_LOT_Release_Data(CUS_Eap_LOT_Release_Data_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_Communication_ON(CUS_Eap_Communication_ON_In_Tag CUS_Eap_Communication_ON_In) throws Exception;
    private void recv_CUS_Eap_Communication_ON(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_Communication_ON_In_Tag CUS_Eap_Communication_ON_In = new CUS_Eap_Communication_ON_In_Tag();

        EISType.transform_CUS_Eap_Communication_ON_In_Tag(former, CUS_Eap_Communication_ON_In);
        CUS_Eap_Communication_ON(CUS_Eap_Communication_ON_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_Communication_OFF(CUS_Eap_Communication_OFF_In_Tag CUS_Eap_Communication_OFF_In) throws Exception;
    private void recv_CUS_Eap_Communication_OFF(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_Communication_OFF_In_Tag CUS_Eap_Communication_OFF_In = new CUS_Eap_Communication_OFF_In_Tag();

        EISType.transform_CUS_Eap_Communication_OFF_In_Tag(former, CUS_Eap_Communication_OFF_In);
        CUS_Eap_Communication_OFF(CUS_Eap_Communication_OFF_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_Material_Attach(CUS_Eap_Material_Attach_In_Tag CUS_Eap_Material_Attach_In) throws Exception;
    private void recv_CUS_Eap_Material_Attach(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_Material_Attach_In_Tag CUS_Eap_Material_Attach_In = new CUS_Eap_Material_Attach_In_Tag();

        EISType.transform_CUS_Eap_Material_Attach_In_Tag(former, CUS_Eap_Material_Attach_In);
        CUS_Eap_Material_Attach(CUS_Eap_Material_Attach_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_RasData_Change(CUS_Eap_RasData_Change_In_Tag CUS_Eap_RasData_Change_In) throws Exception;
    private void recv_CUS_Eap_RasData_Change(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_RasData_Change_In_Tag CUS_Eap_RasData_Change_In = new CUS_Eap_RasData_Change_In_Tag();

        EISType.transform_CUS_Eap_RasData_Change_In_Tag(former, CUS_Eap_RasData_Change_In);
        CUS_Eap_RasData_Change(CUS_Eap_RasData_Change_In); /* Call User Procedure */
        
    }

    public abstract void CUS_Eap_RasData_Req(CUS_Eap_RasData_Req_In_Tag CUS_Eap_RasData_Req_In) throws Exception;
    private void recv_CUS_Eap_RasData_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        CUS_Eap_RasData_Req_In_Tag CUS_Eap_RasData_Req_In = new CUS_Eap_RasData_Req_In_Tag();

        EISType.transform_CUS_Eap_RasData_Req_In_Tag(former, CUS_Eap_RasData_Req_In);
        CUS_Eap_RasData_Req(CUS_Eap_RasData_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_CAPY_change(EIS_CUS_CAPY_change_In_Tag EIS_CUS_CAPY_change_In) throws Exception;
    private void recv_EIS_CUS_CAPY_change(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_CAPY_change_In_Tag EIS_CUS_CAPY_change_In = new EIS_CUS_CAPY_change_In_Tag();

        EISType.transform_EIS_CUS_CAPY_change_In_Tag(former, EIS_CUS_CAPY_change_In);
        EIS_CUS_CAPY_change(EIS_CUS_CAPY_change_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_CAPY_change_end(EIS_CUS_CAPY_change_end_In_Tag EIS_CUS_CAPY_change_end_In) throws Exception;
    private void recv_EIS_CUS_CAPY_change_end(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_CAPY_change_end_In_Tag EIS_CUS_CAPY_change_end_In = new EIS_CUS_CAPY_change_end_In_Tag();

        EISType.transform_EIS_CUS_CAPY_change_end_In_Tag(former, EIS_CUS_CAPY_change_end_In);
        EIS_CUS_CAPY_change_end(EIS_CUS_CAPY_change_end_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Update_CRASEQPHIS(EIS_CUS_Update_CRASEQPHIS_In_Tag EIS_CUS_Update_CRASEQPHIS_In) throws Exception;
    private void recv_EIS_CUS_Update_CRASEQPHIS(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_Update_CRASEQPHIS_In_Tag EIS_CUS_Update_CRASEQPHIS_In = new EIS_CUS_Update_CRASEQPHIS_In_Tag();

        EISType.transform_EIS_CUS_Update_CRASEQPHIS_In_Tag(former, EIS_CUS_Update_CRASEQPHIS_In);
        EIS_CUS_Update_CRASEQPHIS(EIS_CUS_Update_CRASEQPHIS_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQMessage_EQStop(EIS_CUS_EQMessage_EQStop_In_Tag EIS_CUS_EQMessage_EQStop_In) throws Exception;
    private void recv_EIS_CUS_EQMessage_EQStop(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQMessage_EQStop_In_Tag EIS_CUS_EQMessage_EQStop_In = new EIS_CUS_EQMessage_EQStop_In_Tag();

        EISType.transform_EIS_CUS_EQMessage_EQStop_In_Tag(former, EIS_CUS_EQMessage_EQStop_In);
        EIS_CUS_EQMessage_EQStop(EIS_CUS_EQMessage_EQStop_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_EQDataRequest(EIS_CUS_EQDataRequest_In_Tag EIS_CUS_EQDataRequest_In) throws Exception;
    private void recv_EIS_CUS_EQDataRequest(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQDataRequest_In_Tag EIS_CUS_EQDataRequest_In = new EIS_CUS_EQDataRequest_In_Tag();

        EISType.transform_EIS_CUS_EQDataRequest_In_Tag(former, EIS_CUS_EQDataRequest_In);
        EIS_CUS_EQDataRequest(EIS_CUS_EQDataRequest_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_SW_Event(EIS_CUS_SW_Event_In_Tag EIS_CUS_SW_Event_In) throws Exception;
    private void recv_EIS_CUS_SW_Event(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_SW_Event_In_Tag EIS_CUS_SW_Event_In = new EIS_CUS_SW_Event_In_Tag();

        EISType.transform_EIS_CUS_SW_Event_In_Tag(former, EIS_CUS_SW_Event_In);
        EIS_CUS_SW_Event(EIS_CUS_SW_Event_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Get_Eqp_Info(EIS_CUS_MOLD_Get_Eqp_Info_In_Tag EIS_CUS_MOLD_Get_Eqp_Info_In) throws Exception;
    private void recv_EIS_CUS_Get_Eqp_Info(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Get_Eqp_Info_In_Tag EIS_CUS_MOLD_Get_Eqp_Info_In = new EIS_CUS_MOLD_Get_Eqp_Info_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Get_Eqp_Info_In_Tag(former, EIS_CUS_MOLD_Get_Eqp_Info_In);
        EIS_CUS_Get_Eqp_Info(EIS_CUS_MOLD_Get_Eqp_Info_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_Set_Eqp_Info(EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag EIS_CUS_MOLD_Set_Eqp_Info_Out) throws Exception;
    private void recv_EIS_CUS_Set_Eqp_Info(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag EIS_CUS_MOLD_Set_Eqp_Info_Out = new EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag();

        EISType.transform_EIS_CUS_MOLD_Set_Eqp_Info_Out_Tag(former, EIS_CUS_MOLD_Set_Eqp_Info_Out);
        EIS_CUS_Set_Eqp_Info(EIS_CUS_MOLD_Set_Eqp_Info_Out); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Send_Comm_State(EIS_CUS_MOLD_Send_Comm_State_In_Tag EIS_CUS_MOLD_Send_Comm_State_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Send_Comm_State(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Send_Comm_State_In_Tag EIS_CUS_MOLD_Send_Comm_State_In = new EIS_CUS_MOLD_Send_Comm_State_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Send_Comm_State_In_Tag(former, EIS_CUS_MOLD_Send_Comm_State_In);
        EIS_CUS_MOLD_Send_Comm_State(EIS_CUS_MOLD_Send_Comm_State_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Send_Eqp_State(EIS_CUS_MOLD_Send_Eqp_State_In_Tag EIS_CUS_MOLD_Send_Eqp_State_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Send_Eqp_State(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Send_Eqp_State_In_Tag EIS_CUS_MOLD_Send_Eqp_State_In = new EIS_CUS_MOLD_Send_Eqp_State_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Send_Eqp_State_In_Tag(former, EIS_CUS_MOLD_Send_Eqp_State_In);
        EIS_CUS_MOLD_Send_Eqp_State(EIS_CUS_MOLD_Send_Eqp_State_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Send_Sort_No(EIS_CUS_MOLD_Send_Sort_No_In_Tag EIS_CUS_MOLD_Send_Sort_No_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Send_Sort_No(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Send_Sort_No_In_Tag EIS_CUS_MOLD_Send_Sort_No_In = new EIS_CUS_MOLD_Send_Sort_No_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Send_Sort_No_In_Tag(former, EIS_CUS_MOLD_Send_Sort_No_In);
        EIS_CUS_MOLD_Send_Sort_No(EIS_CUS_MOLD_Send_Sort_No_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Send_Set_Para(EIS_CUS_MOLD_Send_Set_Para_In_Tag EIS_CUS_MOLD_Send_Set_Para_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Send_Set_Para(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Send_Set_Para_In_Tag EIS_CUS_MOLD_Send_Set_Para_In = new EIS_CUS_MOLD_Send_Set_Para_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Send_Set_Para_In_Tag(former, EIS_CUS_MOLD_Send_Set_Para_In);
        EIS_CUS_MOLD_Send_Set_Para(EIS_CUS_MOLD_Send_Set_Para_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Send_Real_Para(EIS_CUS_MOLD_Send_Real_Para_In_Tag EIS_CUS_MOLD_Send_Real_Para_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Send_Real_Para(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Send_Real_Para_In_Tag EIS_CUS_MOLD_Send_Real_Para_In = new EIS_CUS_MOLD_Send_Real_Para_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Send_Real_Para_In_Tag(former, EIS_CUS_MOLD_Send_Real_Para_In);
        EIS_CUS_MOLD_Send_Real_Para(EIS_CUS_MOLD_Send_Real_Para_In); /* Call User Procedure */
        
    }

    public abstract void EISSPC_TRACE_DATA_SEND(EISSPC_TRACE_DATA_SEND_In_Tag EISSPC_TRACE_DATA_SEND_In) throws Exception;
    private void recv_EISSPC_TRACE_DATA_SEND(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EISSPC_TRACE_DATA_SEND_In_Tag EISSPC_TRACE_DATA_SEND_In = new EISSPC_TRACE_DATA_SEND_In_Tag();

        EISType.transform_EISSPC_TRACE_DATA_SEND_In_Tag(former, EISSPC_TRACE_DATA_SEND_In);
        EISSPC_TRACE_DATA_SEND(EISSPC_TRACE_DATA_SEND_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Set_Mes_Release(EIS_CUS_MOLD_Set_Mes_Release_In_Tag EIS_CUS_MOLD_Set_Mes_Release_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Set_Mes_Release(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Set_Mes_Release_In_Tag EIS_CUS_MOLD_Set_Mes_Release_In = new EIS_CUS_MOLD_Set_Mes_Release_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Set_Mes_Release_In_Tag(former, EIS_CUS_MOLD_Set_Mes_Release_In);
        EIS_CUS_MOLD_Set_Mes_Release(EIS_CUS_MOLD_Set_Mes_Release_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Set_Mes_Lock(EIS_CUS_MOLD_Set_Mes_Lock_In_Tag EIS_CUS_MOLD_Set_Mes_Lock_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Set_Mes_Lock(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Set_Mes_Lock_In_Tag EIS_CUS_MOLD_Set_Mes_Lock_In = new EIS_CUS_MOLD_Set_Mes_Lock_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Set_Mes_Lock_In_Tag(former, EIS_CUS_MOLD_Set_Mes_Lock_In);
        EIS_CUS_MOLD_Set_Mes_Lock(EIS_CUS_MOLD_Set_Mes_Lock_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Lot_Start(EIS_CUS_MOLD_Lot_Start_In_Tag EIS_CUS_MOLD_Lot_Start_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Lot_Start(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Lot_Start_In_Tag EIS_CUS_MOLD_Lot_Start_In = new EIS_CUS_MOLD_Lot_Start_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Lot_Start_In_Tag(former, EIS_CUS_MOLD_Lot_Start_In);
        EIS_CUS_MOLD_Lot_Start(EIS_CUS_MOLD_Lot_Start_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Func_Authority_Req(EIS_CUS_MOLD_Func_Authority_Req_In_Tag EIS_CUS_MOLD_Func_Authority_Req_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Func_Authority_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Func_Authority_Req_In_Tag EIS_CUS_MOLD_Func_Authority_Req_In = new EIS_CUS_MOLD_Func_Authority_Req_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Func_Authority_Req_In_Tag(former, EIS_CUS_MOLD_Func_Authority_Req_In);
        EIS_CUS_MOLD_Func_Authority_Req(EIS_CUS_MOLD_Func_Authority_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_CUS_MOLD_Func_Authority_Rep(EIS_CUS_MOLD_Func_Authority_Rep_In_Tag EIS_CUS_MOLD_Func_Authority_Rep_In) throws Exception;
    private void recv_EIS_CUS_MOLD_Func_Authority_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_MOLD_Func_Authority_Rep_In_Tag EIS_CUS_MOLD_Func_Authority_Rep_In = new EIS_CUS_MOLD_Func_Authority_Rep_In_Tag();

        EISType.transform_EIS_CUS_MOLD_Func_Authority_Rep_In_Tag(former, EIS_CUS_MOLD_Func_Authority_Rep_In);
        EIS_CUS_MOLD_Func_Authority_Rep(EIS_CUS_MOLD_Func_Authority_Rep_In); /* Call User Procedure */
        
    }

    public abstract void EIS_RFID_UID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_EIS_RFID_UID_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        EIS_RFID_UID_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void EIS_RFID_Write_Magazine_ID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_EIS_RFID_Write_Magazine_ID_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        EIS_RFID_Write_Magazine_ID_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void EIS_RFID_Write_Lot_ID_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_EIS_RFID_Write_Lot_ID_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        EIS_RFID_Write_Lot_ID_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void RFID_EIS_Start_Magazine_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_RFID_EIS_Start_Magazine_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        RFID_EIS_Start_Magazine_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void RFID_EIS_End_Magazine_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_RFID_EIS_End_Magazine_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        RFID_EIS_End_Magazine_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void EIS_EAP_Down_Req(EIS_EAP_Res_Down_In_Tag EIS_EAP_Res_Down_In) throws Exception;
    private void recv_EIS_EAP_Down_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Res_Down_In_Tag EIS_EAP_Res_Down_In = new EIS_EAP_Res_Down_In_Tag();

        EISType.transform_EIS_EAP_Res_Down_In_Tag(former, EIS_EAP_Res_Down_In);
        EIS_EAP_Down_Req(EIS_EAP_Res_Down_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Terminal_Msg_Req(EIS_EAP_Res_Terminal_Msg_In_Tag EIS_EAP_Res_Terminal_Msg_In) throws Exception;
    private void recv_EIS_EAP_Terminal_Msg_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Res_Terminal_Msg_In_Tag EIS_EAP_Res_Terminal_Msg_In = new EIS_EAP_Res_Terminal_Msg_In_Tag();

        EISType.transform_EIS_EAP_Res_Terminal_Msg_In_Tag(former, EIS_EAP_Res_Terminal_Msg_In);
        EIS_EAP_Terminal_Msg_Req(EIS_EAP_Res_Terminal_Msg_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Lot_Data_Req(EIS_EAP_Res_Lot_Data_In_Tag EIS_EAP_Res_Lot_Data_In) throws Exception;
    private void recv_EIS_EAP_Lot_Data_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Res_Lot_Data_In_Tag EIS_EAP_Res_Lot_Data_In = new EIS_EAP_Res_Lot_Data_In_Tag();

        EISType.transform_EIS_EAP_Res_Lot_Data_In_Tag(former, EIS_EAP_Res_Lot_Data_In);
        EIS_EAP_Lot_Data_Req(EIS_EAP_Res_Lot_Data_In); /* Call User Procedure */
        
    }

    public abstract void RFID_EIS_Rewrite_Success_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_RFID_EIS_Rewrite_Success_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        RFID_EIS_Rewrite_Success_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void EAP_EIS_Lot_Info_Req(EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In) throws Exception;
    private void recv_EAP_EIS_Lot_Info_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In = new EIS_EAP_Lot_Info_In_Tag();

        EISType.transform_EIS_EAP_Lot_Info_In_Tag(former, EIS_EAP_Lot_Info_In);
        EAP_EIS_Lot_Info_Req(EIS_EAP_Lot_Info_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_Lot_Info_Rep(EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In) throws Exception;
    private void recv_EIS_EAP_Lot_Info_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_Lot_Info_In_Tag EIS_EAP_Lot_Info_In = new EIS_EAP_Lot_Info_In_Tag();

        EISType.transform_EIS_EAP_Lot_Info_In_Tag(former, EIS_EAP_Lot_Info_In);
        EIS_EAP_Lot_Info_Rep(EIS_EAP_Lot_Info_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_RFID_Read_Cmp(EIS_EAP_RFID_Read_Cmp_In_Tag EIS_EAP_RFID_Read_Cmp_In) throws Exception;
    private void recv_EIS_EAP_RFID_Read_Cmp(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_RFID_Read_Cmp_In_Tag EIS_EAP_RFID_Read_Cmp_In = new EIS_EAP_RFID_Read_Cmp_In_Tag();

        EISType.transform_EIS_EAP_RFID_Read_Cmp_In_Tag(former, EIS_EAP_RFID_Read_Cmp_In);
        EIS_EAP_RFID_Read_Cmp(EIS_EAP_RFID_Read_Cmp_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_Equipment_Event(EAP_EIS_Equipment_Event_In_Tag EAP_EIS_Equipment_Event_In) throws Exception;
    private void recv_EAP_EIS_Equipment_Event(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_Equipment_Event_In_Tag EAP_EIS_Equipment_Event_In = new EAP_EIS_Equipment_Event_In_Tag();

        EISType.transform_EAP_EIS_Equipment_Event_In_Tag(former, EAP_EIS_Equipment_Event_In);
        EAP_EIS_Equipment_Event(EAP_EIS_Equipment_Event_In); /* Call User Procedure */
        
    }

    public abstract void RFID_EIS_Erase_Fail_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_RFID_EIS_Erase_Fail_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        RFID_EIS_Erase_Fail_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void RFID_EIS_Write_Fail_Req(EIS_RFID_Request_In_Tag EIS_RFID_Request_In, RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out) throws Exception;
    private void recv_RFID_EIS_Write_Fail_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_RFID_Request_In_Tag EIS_RFID_Request_In = new EIS_RFID_Request_In_Tag();
        RFID_EIS_Reply_Out_Tag RFID_EIS_Reply_Out = new RFID_EIS_Reply_Out_Tag();

        EISType.transform_EIS_RFID_Request_In_Tag(former, EIS_RFID_Request_In);
        RFID_EIS_Write_Fail_Req(EIS_RFID_Request_In, RFID_EIS_Reply_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_RFID_EIS_Reply_Out_Tag(former, RFID_EIS_Reply_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void EIS_CUS_EQ_Status_Event_Rep(EIS_CUS_EQ_Status_Event_Rep_In_Tag EIS_CUS_EQ_Status_Event_Rep_In) throws Exception;
    private void recv_EIS_CUS_EQ_Status_Event_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_CUS_EQ_Status_Event_Rep_In_Tag EIS_CUS_EQ_Status_Event_Rep_In = new EIS_CUS_EQ_Status_Event_Rep_In_Tag();

        EISType.transform_EIS_CUS_EQ_Status_Event_Rep_In_Tag(former, EIS_CUS_EQ_Status_Event_Rep_In);
        EIS_CUS_EQ_Status_Event_Rep(EIS_CUS_EQ_Status_Event_Rep_In); /* Call User Procedure */
        
    }

    public abstract void MES_EIS_Terminal_Msg(MES_EIS_Terminal_Msg_In_Tag MES_EIS_Terminal_Msg_In) throws Exception;
    private void recv_MES_EIS_Terminal_Msg(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        MES_EIS_Terminal_Msg_In_Tag MES_EIS_Terminal_Msg_In = new MES_EIS_Terminal_Msg_In_Tag();

        EISType.transform_MES_EIS_Terminal_Msg_In_Tag(former, MES_EIS_Terminal_Msg_In);
        MES_EIS_Terminal_Msg(MES_EIS_Terminal_Msg_In); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_GW_Info_Req(EAP_EIS_GW_Info_Req_In_Tag EAP_EIS_GW_Info_Req_In) throws Exception;
    private void recv_EAP_EIS_GW_Info_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_GW_Info_Req_In_Tag EAP_EIS_GW_Info_Req_In = new EAP_EIS_GW_Info_Req_In_Tag();

        EISType.transform_EAP_EIS_GW_Info_Req_In_Tag(former, EAP_EIS_GW_Info_Req_In);
        EAP_EIS_GW_Info_Req(EAP_EIS_GW_Info_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_GW_Info_Rep(EIS_EAP_GW_Info_Rep_Out_Tag EIS_EAP_GW_Info_Rep_Out) throws Exception;
    private void recv_EIS_EAP_GW_Info_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_GW_Info_Rep_Out_Tag EIS_EAP_GW_Info_Rep_Out = new EIS_EAP_GW_Info_Rep_Out_Tag();

        EISType.transform_EIS_EAP_GW_Info_Rep_Out_Tag(former, EIS_EAP_GW_Info_Rep_Out);
        EIS_EAP_GW_Info_Rep(EIS_EAP_GW_Info_Rep_Out); /* Call User Procedure */
        
    }

    public abstract void EAP_EIS_GW_Trans_Req(EAP_EIS_GW_Trans_Req_In_Tag EAP_EIS_GW_Trans_Req_In) throws Exception;
    private void recv_EAP_EIS_GW_Trans_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EAP_EIS_GW_Trans_Req_In_Tag EAP_EIS_GW_Trans_Req_In = new EAP_EIS_GW_Trans_Req_In_Tag();

        EISType.transform_EAP_EIS_GW_Trans_Req_In_Tag(former, EAP_EIS_GW_Trans_Req_In);
        EAP_EIS_GW_Trans_Req(EAP_EIS_GW_Trans_Req_In); /* Call User Procedure */
        
    }

    public abstract void EIS_EAP_GW_Trans_Rep(EIS_EAP_GW_Trans_Rep_Out_Tag EIS_EAP_GW_Trans_Rep_Out) throws Exception;
    private void recv_EIS_EAP_GW_Trans_Rep(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        EIS_EAP_GW_Trans_Rep_Out_Tag EIS_EAP_GW_Trans_Rep_Out = new EIS_EAP_GW_Trans_Rep_Out_Tag();

        EISType.transform_EIS_EAP_GW_Trans_Rep_Out_Tag(former, EIS_EAP_GW_Trans_Rep_Out);
        EIS_EAP_GW_Trans_Rep(EIS_EAP_GW_Trans_Rep_Out); /* Call User Procedure */
        
    }

    public abstract void BETSEIS_Lot_Start_Req(BETSEIS_Lot_Start_Req_In_Tag BETSEIS_Lot_Start_Req_In, BETSEIS_Lot_Start_Req_Out_Tag BETSEIS_Lot_Start_Req_Out) throws Exception;
    private void recv_BETSEIS_Lot_Start_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        BETSEIS_Lot_Start_Req_In_Tag BETSEIS_Lot_Start_Req_In = new BETSEIS_Lot_Start_Req_In_Tag();
        BETSEIS_Lot_Start_Req_Out_Tag BETSEIS_Lot_Start_Req_Out = new BETSEIS_Lot_Start_Req_Out_Tag();

        EISType.transform_BETSEIS_Lot_Start_Req_In_Tag(former, BETSEIS_Lot_Start_Req_In);
        BETSEIS_Lot_Start_Req(BETSEIS_Lot_Start_Req_In, BETSEIS_Lot_Start_Req_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Lot_Start_Req_Out_Tag(former, BETSEIS_Lot_Start_Req_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void BETSEIS_Lot_End_Req(BETSEIS_Lot_End_Req_In_Tag BETSEIS_Lot_End_Req_In, BETSEIS_Lot_End_Req_Out_Tag BETSEIS_Lot_End_Req_Out) throws Exception;
    private void recv_BETSEIS_Lot_End_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        BETSEIS_Lot_End_Req_In_Tag BETSEIS_Lot_End_Req_In = new BETSEIS_Lot_End_Req_In_Tag();
        BETSEIS_Lot_End_Req_Out_Tag BETSEIS_Lot_End_Req_Out = new BETSEIS_Lot_End_Req_Out_Tag();

        EISType.transform_BETSEIS_Lot_End_Req_In_Tag(former, BETSEIS_Lot_End_Req_In);
        BETSEIS_Lot_End_Req(BETSEIS_Lot_End_Req_In, BETSEIS_Lot_End_Req_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Lot_End_Req_Out_Tag(former, BETSEIS_Lot_End_Req_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void BETSEIS_Lot_Info_Req(BETSEIS_Lot_Info_Req_In_Tag BETSEIS_Lot_Info_Req_In, BETSEIS_Lot_Info_Req_Out_Tag BETSEIS_Lot_Info_Req_Out) throws Exception;
    private void recv_BETSEIS_Lot_Info_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        BETSEIS_Lot_Info_Req_In_Tag BETSEIS_Lot_Info_Req_In = new BETSEIS_Lot_Info_Req_In_Tag();
        BETSEIS_Lot_Info_Req_Out_Tag BETSEIS_Lot_Info_Req_Out = new BETSEIS_Lot_Info_Req_Out_Tag();

        EISType.transform_BETSEIS_Lot_Info_Req_In_Tag(former, BETSEIS_Lot_Info_Req_In);
        BETSEIS_Lot_Info_Req(BETSEIS_Lot_Info_Req_In, BETSEIS_Lot_Info_Req_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Lot_Info_Req_Out_Tag(former, BETSEIS_Lot_Info_Req_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

    public abstract void BETSEIS_Hold_Req(BETSEIS_Hold_Req_In_Tag BETSEIS_Hold_Req_In, BETSEIS_Hold_Req_Out_Tag BETSEIS_Hold_Req_Out) throws Exception;
    private void recv_BETSEIS_Hold_Req(Session issuer, Message msg) throws Exception
    {
        StreamTransformer former = new StreamTransformerImpl((byte[])msg.getData());
        BETSEIS_Hold_Req_In_Tag BETSEIS_Hold_Req_In = new BETSEIS_Hold_Req_In_Tag();
        BETSEIS_Hold_Req_Out_Tag BETSEIS_Hold_Req_Out = new BETSEIS_Hold_Req_Out_Tag();

        EISType.transform_BETSEIS_Hold_Req_In_Tag(former, BETSEIS_Hold_Req_In);
        BETSEIS_Hold_Req(BETSEIS_Hold_Req_In, BETSEIS_Hold_Req_Out); /* Call User Procedure */
        
        if (DeliveryType.isRequest(msg.getDeliveryMode())) /* Just RequestReply */
        {
            Message rep = msg.createReply();
            former = new StreamTransformerImpl();
            EISType.serialize_BETSEIS_Hold_Req_Out_Tag(former, BETSEIS_Hold_Req_Out);
            rep.putData(former.getBytes());
            h101stub.getInstance().sendReply(issuer, msg, rep, 0, "");
        }
    }

}

