package com.tptech;/* * PROCESSNAME : YieldAnalysis PROCESS SYSTEM * DEVELOPERS    : BongJun Park * EDIT : ISI 추가  */import java.io.File;import java.io.IOException;import java.text.ParseException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Vector;import org.apache.log4j.Logger;import com.tptech.isi.SmtIsi_Process;import com.tptech.log.WriteLogger;import com.tptech.util.FileMoveUtil;import com.tptech.util.Utils;import com.tptech.yieldAnalysis_hist.YieldAnalysis_Hist_BI_FileProcess;import com.tptech.yieldAnalysis_hist.YieldAnalysis_Hist_FileCheck;import com.tptech.yieldAnalysis_hist.YieldAnalysis_Hist_FileProcess;public class YieldAnalysis_Main {    private static Logger logger = WriteLogger.getInstance("YieldAnalysis_Main.java");    public static void main(String args[]) {        while (true) {            try {                WriteLogger.LogFileDelete(30);            } catch (ParseException e) {                logger.error(e.toString());            }            //            Timer timer = new Timer();//            timer.schedule(new TimerRun(), 2*100000);            File fPath = new File(FileMoveUtil.getDirpath("conFile"));            Recursive_File(fPath);            Move_File();            try {                Thread.sleep(5000);            } catch (InterruptedException e) {                logger.error(e.toString());            }        }    }    public static void Move_File() {        // E:\\DataFile\\OSCAR\\TesterData\\RawData        File fMvPath = new File(FileMoveUtil.getDirpath("conFile"));        File[] arrMvFile = fMvPath.listFiles();        int iFile_Cnt = 0;        if (null == arrMvFile || arrMvFile.length == 0) {            return;        }        /* YieldAnalysis 파일이 많을시 30개만 가져온다 */        if (arrMvFile.length > 30) {            iFile_Cnt = 30;        } else {            iFile_Cnt = arrMvFile.length;        }        for (int i = 0; i < iFile_Cnt; i++) {            boolean formartErr = false;            String[] sExt = arrMvFile[i].getName().split("\\.");            try {                Utils.zipping(arrMvFile[i], arrMvFile[i].getAbsolutePath() + ".gz");                if (sExt.length > 1) {                    if (sExt[1].toLowerCase().equals("heada")) {                        File fGzip_File = new File(arrMvFile[i].getAbsolutePath() + ".gz");                        FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conSuccess") + "/" + Utils.getDate("MM", 0) + "Data");                        FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conSuccess") + "/" + Utils.getDate("MM", 0) + "Data");                    } else if (sExt[1].toLowerCase().equals("fls")) {                        File fGzip_File = new File(arrMvFile[i].getAbsolutePath() + ".gz");                        FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conSuccess") + "/" + Utils.getDate("MM", 0) + "Data");                        FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conSuccess") + "/" + Utils.getDate("MM", 0) + "Data");                    } else {                        formartErr = true;                    }                } else {                    formartErr = true;                }                if (formartErr) {                    File fGzip_File = new File(arrMvFile[i].getAbsolutePath() + ".gz");                    FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("rowFormat") + "/" + Utils.getDate("MM", 0) + "Data");                    FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("rowFormat") + "/" + Utils.getDate("MM", 0) + "Data");                }            } catch (IOException e) {                logger.error("[ReName-5]" + e.toString());            }        }    }    /* 파일 체크 */    public static void Recursive_File(File p_file) {        /* 파일이 없을시 return */        if (!p_file.isDirectory()) {            p_file.mkdirs();        }        File[] arrFS = p_file.listFiles();        if (null == arrFS || arrFS.length == 0) {            return;        }                // 파일 읽어 오기        Hist_FileRead fRead = new Hist_FileRead();        // 파일 애러 처리        YieldAnalysis_Hist_FileCheck ocheck = new YieldAnalysis_Hist_FileCheck();        // 파일 gasi, bin, dut 결과를 변수에 저장        YieldAnalysis_Hist_FileProcess oProcess = new YieldAnalysis_Hist_FileProcess();                // 파일 gasi, bin, dut 결과를 변수에 저장        YieldAnalysis_Hist_BI_FileProcess BiProcess = new YieldAnalysis_Hist_BI_FileProcess();                SmtIsi_Process sblProcess = new SmtIsi_Process();                String[] sExt = new String[2];        String sFilename = "";        String sFlag = "true";        int iFile_Cnt = 0;        try {            /* YieldAnalysis 파일이 많을시 30개만 가져온다 */            if (arrFS.length > 30) {                iFile_Cnt = 30;            } else {                iFile_Cnt = arrFS.length;            }            HashMap<String, Long> hFilesize = new HashMap<String, Long>();            for (int i = 0; i < iFile_Cnt; i++) {                hFilesize.put(arrFS[i].getName(), arrFS[i].length());            }            Thread.sleep(5000);            for (int i = 0; i < iFile_Cnt; i++) {                if (arrFS[i].isDirectory()) {                    arrFS[i].delete();                    return;                }                sFilename = arrFS[i].getName();                File fPath_Tmp = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFilename);                //파일 확장자를 를 Split                if (hFilesize.get(sFilename) == fPath_Tmp.length()) {                    sExt = sFilename.split("\\.");                    if (sExt.length > 1) {                        // 파일 확장자가 heada 와 같으면 TRUE                        if (sExt[1].contains("HEAD")) {                            fRead.readTexts(FileMoveUtil.getDirpath("conFile") + "/"+ sFilename);                                                        // Vector 안에 내용을 받는다.                             Vector<?> vFileLine = fRead.getAllLines();                                                        // 파일 사이즈에 이상이 있을시 로직                            if(vFileLine.size()==0){                                ocheck.FormatError(sFilename, vFileLine, "File Check Format Error-14", "File size 0 Error");                                continue;                            }                                                        // 파일 정보에 이상이 있으면 처리 하는 로직 (일단 삭제)                            if (!ocheck.ReadFile(sFilename, vFileLine)) {                                continue;                            }                                                        // 파일 정보를 가공 하는 로직                            if(!oProcess.FileProcess(sFilename, vFileLine)){                                continue;                            }                                                        //SBL Start                            sblProcess.Sbl_Start(sFilename);                                                        Hist_Variable.casiMap.clear();                            Hist_Variable.casiList.clear();                                                        // TEST chipid 데이터                            Hist_Variable.chipId.clear();                                                        // TEST mainBin 데이터                            Hist_Variable.mainMap.clear();                            Hist_Variable.testBinList.clear();                            Hist_Variable.handlerBinList.clear();                            Hist_Variable.opBinList.clear();                                                        // TEST subBin 데이터                            Hist_Variable.ngMap.clear();                            Hist_Variable.ngBinMainList.clear();                            Hist_Variable.ngBinList.clear();                                                    } else if (sExt[1].equals("FLS")) {                                                        fRead.readTexts(FileMoveUtil.getDirpath("conFile") + "/"+ sFilename);                                                        // Vector 안에 내용을 받는다.                             Vector<?> vFileLine = fRead.getAllLines();                                                        // 파일 정보를 가공 하는 로직                            if(!BiProcess.FileProcess(sFilename, vFileLine)){                                continue;                            }                                                        //SBL Start                            sblProcess.Sbl_Start(sFilename);                                                        // 초기화                            Hist_Variable.tdbiMap.clear();                            Hist_Variable.tdbi_bi_List.clear();                            Hist_Variable.tdbi_zon_List.clear();                            Hist_Variable.tdbi_x_List.clear();                            Hist_Variable.tdbi_y_List.clear();                            Hist_Variable.tdbi_map_List.clear();                                                    } else {                            // 확장자가 틀리면 파일 삭제                            Utils.fileDelete(arrFS[i]);                        }                    } else {                        File fFileName = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFilename);                        try {                            Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");                        } catch (IOException e) {                            logger.error("[ReName] " + e.toString());                        }                        File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");                        FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data/");                        logger.error("[Format Error]Format Directory Move");                    }                }            }        } catch (Exception ex) {            logger.error(ex.toString() + " arrFS[i].getName()=" + sFilename);            FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data");            //FileMoveUtil.makeDirectory2(Hist_Variable.sData_Format + "/" + Utils.getDate("MM", 0) + "Data");            File fFileName = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFilename);            try {                Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");            } catch (IOException e) {                logger.error("ReName] " + e.toString());            }            File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");            FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data/");        }    }}