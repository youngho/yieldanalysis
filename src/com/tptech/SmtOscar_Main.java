package com.tptech;/* * PROCESSNAME : SMTOSCAR PROCESS SYSTEM * DEVELOPERS    : BongJun Park * EDIT : ISI 추가  */import java.io.File;import java.io.IOException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.HashMap;import java.util.Vector;import org.apache.log4j.Logger;import com.tptech.isi.SmtIsi_Process;import com.tptech.log.WriteLogger;import com.tptech.smtoscar_hist.SmtOscar_Hist_Dele;import com.tptech.smtoscar_hist.SmtOscar_Hist_FileCheck;import com.tptech.smtoscar_hist.SmtOscar_Hist_FileProcess;import com.tptech.util.FileMoveUtil;import com.tptech.util.Utils;public class SmtOscar_Main {	private static Logger logger = WriteLogger.getInstance("SmtOscar_Main.java");	public static void main(String args[]) {		while (true) {			try {				WriteLogger.LogFileDelete(30);			} catch (ParseException e) {				logger.error(e.toString());			}			//Timer timer = new Timer();			//timer.schedule(new TimerRun(), 2*100000);			File fPath = new File(FileMoveUtil.getDirpath("conFile"));			Recursive_File(fPath);			Move_File();			try {				Thread.sleep(5000);			} catch (InterruptedException e) {				logger.error(e.toString());			}		}	}	public static void Move_File(){		File fMvPath = new File(FileMoveUtil.getDirpath("rowFile"));		File[] arrMvFile = fMvPath.listFiles();		int iFile_Cnt = 0;		if (null == arrMvFile || arrMvFile.length == 0) {			return;		}		/* SMTOSCAR파일이 많을시 30개만 가져온다 */		if (arrMvFile.length > 30) {			iFile_Cnt = 30;		} else {			iFile_Cnt = arrMvFile.length;		}		for(int i=0; i<iFile_Cnt; i++){			boolean formartErr = false;			String[] sExt = arrMvFile[i].getName().split("\\.");			try {								Utils.zipping(arrMvFile[i], arrMvFile[i].getAbsolutePath() + ".gz");				if(sExt.length >1){					if(sExt[1].toLowerCase().equals("asc")){												File fGzip_File = new File(arrMvFile[i].getAbsolutePath() + ".gz");												FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("rowSuccess") + "/" + Utils.getDate("MM", 0) + "Data");						FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("rowSuccess") + "/" + Utils.getDate("MM", 0) + "Data");					}else{						formartErr = true;					}				}else{					formartErr = true;				}				if(formartErr){					File fGzip_File = new File(arrMvFile[i].getAbsolutePath() + ".gz");										FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("rowFormat") + "/" + Utils.getDate("MM", 0) + "Data");					FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("rowFormat") + "/" + Utils.getDate("MM", 0) + "Data");									}			} catch (IOException e) {				logger.error("[ReName-5]" + e.toString());			}		}	}	/* 파일 체크 */	public static void Recursive_File(File p_file) {				/* 파일이 없을시 return */		if (!p_file.isDirectory())		{			p_file.mkdirs();		}		File[] arrFS = p_file.listFiles();		if (null == arrFS || arrFS.length == 0) {			return;		}				Hist_Variable.sData_Format = "SMTOSCAR";				SmtOscar_Hist_Dele odele = new SmtOscar_Hist_Dele();		Hist_FileRead fRead = new Hist_FileRead(); // NG_DESC ¸¦		SmtOscar_Hist_FileCheck ocheck = new SmtOscar_Hist_FileCheck();		SmtOscar_Hist_FileProcess oProcess = new SmtOscar_Hist_FileProcess();		SmtIsi_Process sblProcess = new SmtIsi_Process();		//SimpleDateFormat dateformat = new SimpleDateFormat();		String[] sExt = new String[2];		String sFilename = "";		String sFlag ="true";		int iFile_Cnt = 0;		try {			/* SMTOSCAR파일이 많을시 30개만 가져온다 */			if (arrFS.length > 30) {				iFile_Cnt = 30;			} else {				iFile_Cnt = arrFS.length;			}			HashMap<String,Long> hFilesize = new HashMap<String,Long>();			for(int i=0; i<iFile_Cnt; i++ ){				hFilesize.put(arrFS[i].getName(), arrFS[i].length());			}			Thread.sleep(5000);			for (int i = 0; i < iFile_Cnt; i++) {				if(arrFS[i].isDirectory()){					arrFS[i].delete();					return;				}				Hist_Variable.hs = new HashMap<String,String>();				Hist_Variable.hsint = new HashMap<Integer,Integer>();				sFilename = arrFS[i].getName();				Hist_Variable.sFileName = arrFS[i];				File fPath_Tmp = new File(FileMoveUtil.getDirpath("conFile")+ "/" + sFilename);				//파일 확장자를 를 Split				if(hFilesize.get(sFilename) == fPath_Tmp.length()){					sExt = sFilename.split("\\.");					if(sExt.length >1){						if (sExt[1].toLowerCase().equals("osc")) {														logger.info("[SmtOscar File Read] " + arrFS[i].getName());							oProcess.Init();							fRead.readTexts(FileMoveUtil.getDirpath("conFile") + "/"+ sFilename);							// Vector 안에 내용을 받는다. 							Vector<?> vFileLine = fRead.getAllLines();							//변수 초기화							if(vFileLine.size()==0){								ocheck.FormatError(sFilename, vFileLine, "File Check Format Error-14", "File size 0 Error");								continue;							}							if (!ocheck.ReadFile(sFilename, vFileLine))								continue;							if(!oProcess.FileProcess(sFilename, vFileLine)){								continue;							}							if(Hist_Variable.sFerror.equals("sorterror")){								SmtOscar_Hist_Dele.Insert_Test_History_Err(sFilename);								ocheck.FormatError(sFilename, vFileLine, "File Check Format Error-15", "Retest 0 SORT Data Not");								Hist_Variable.sFerror="";								continue;							}							if(Hist_Variable.sFerror.equals("DUTMAP")){								SmtOscar_Hist_Dele.Insert_Test_History_Err(sFilename);								ocheck.FormatError(sFilename, vFileLine, "File Check Format Error-19", "DUTMAP Format Unconformity");								Hist_Variable.sFerror="";								continue;							}																					for(int j=0;j<=Hist_Variable.Retest;j++){								if(Hist_Variable.Dut_Date[j][2]==null){									ocheck.FormatError(sFilename, vFileLine, "File Check Format Error-17", "End_Date Not");									sFlag = "false";								}							}							if (sFlag.equals("false")){								continue;							}							oProcess.Var_Substitute(sFilename);							//SBL Start							sblProcess.Sbl_Start();							//SBL END														oProcess.Site_Check(sFilename, vFileLine);							//odele.Select_V_Wip();							odele.Select_FRLot();							odele.Select_Last_Table();														//라인정보를 가져옴							//odele.Select_LineId();														//라인 정보를 하드 코딩 							Hist_Variable.LineId = ""; 							odele.Insert_Test_History(arrFS[i].getName());							Hist_Variable.sFerror="";						}else{							Utils.fileDelete(arrFS[i]);						}					}else{						File fFileName = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFilename);						try {							Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");						} catch (IOException e) {							logger.error("[ReName] " + e.toString());						}						File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");						FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conFormat")+ "/"+ Utils.getDate("MM", 0) + "Data/");						logger.error("[Format Error]Format Directory Move");					}				}				/* HashMap  초기화 */				Hist_Variable.hs.clear();				Hist_Variable.hsint.clear();				Hist_Variable.hs = null;				Hist_Variable.hsint = null;			}		} catch (Exception ex) {			logger.error(ex.toString() + " arrFS[i].getName()="+ sFilename);						FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data");			//FileMoveUtil.makeDirectory2(Hist_Variable.sData_Format + "/" + Utils.getDate("MM", 0) + "Data");			File fFileName = new File(FileMoveUtil.getDirpath("conFile") + "/"+ sFilename);			try {				Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");			} catch (IOException e) {				logger.error("ReName] " + e.toString());			}						File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");			FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conFormat")+ "/"+ Utils.getDate("MM", 0) + "Data/");		}	}}