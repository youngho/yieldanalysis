package com.tptech.smtoscar_hist;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.StringTokenizer;import java.util.Vector;import org.apache.log4j.Logger;import com.tptech.Hist_Variable;import com.tptech.log.WriteLogger;import com.tptech.util.FileMoveUtil;import com.tptech.util.Utils;public class SmtOscar_Hist_FileProcess {	private static Logger logger = WriteLogger.getInstance("SmtOscar_Hist_FileProcess.java");	private String[][] Dutemp = new String[5][4];  // DUTMAP에서 SUB, NG, NG_DESC 를 '='을 Split해서 배열에 담는 변수	private String[][] Sort = new String[5][9]; //DUTMAP에서 Sort를 ':'를 Split해서 배열에 담는 변수	private int[] miSum = new int[8]; //Sort를 Sum해서 담는 변수		public boolean FileProcess(String File, Vector<?> vFileLine){		int Flag = 0;		int m = 0;			/* 부분별로 여러 Line으로 된것을 한줄로 만들어주었을때 넣는변수 */		ArrayList<String> aDutMap = new ArrayList<String>();		ArrayList<String> aRetest_Cnt = new ArrayList<String>();		String TotHead_Gamma = "";		String Osversion = "";		String DutMapDate = "";		String DutMapData = "";		try{			int iFileLine = vFileLine.size();			for (int i = 0; i < iFileLine; i++) {				// Vector로 읽어 들인 데이터를 한줄씩 읽는다.				String sTemp = (String) vFileLine.elementAt(i);					if (sTemp.replaceAll(" ", "").equals("<HEAD>")) {					Flag = 0;				} else if (sTemp.replaceAll(" ", "").equals("<GAMMA>")) {					Flag = 1;				} else if (sTemp.replaceAll(" ", "").equals("<DUTMAP>")) {					Flag = 2;				} else if (sTemp.replaceAll(" ", "").equals("<OSVERSION>")) {					Flag = 3;				} else if (sTemp.replaceAll(" ", "").equals("<AQLTEST>")) {					Flag = 4;				}					// 데이터를 한줄씩 읽어와 뒤에 붙여 한줄로 만들어준다. <HEAD>,<GAMMA> <DUTMAP>는 따로 분리				if(Flag == 0 && !sTemp.contains("<")){					TotHead_Gamma = TotHead_Gamma + " " + sTemp;				}else if(Flag == 1 && !sTemp.contains("<")){					TotHead_Gamma = TotHead_Gamma + " " + sTemp;				}else if(Flag == 2 && !sTemp.contains("<")){					if(sTemp.contains("SUB=")){						String[] sDutMapDataTmp = new String[2];						String[] sDutMapSplitTmp = new String[2];						sDutMapDataTmp = sTemp.split(" "); //Retest와 데이터를 공백으로 잘라내서 넣는다.							if(sDutMapDataTmp.length > 1){							//공백으로 잘라낸데이터를 '='잘라서 배열에 저장							sDutMapSplitTmp = sDutMapDataTmp[1].split("=");							if(sDutMapSplitTmp.length < 2){								if( !aRetest_Cnt.contains(sDutMapSplitTmp[0]))									aRetest_Cnt.add(sDutMapSplitTmp[0]);								if(sDutMapDataTmp[0].equals("Retest=0")){									//Hist_Variable.sFerror = "suberror";									//return true;								}							}						}					}else if(sTemp.contains("SORT=")){						String[] sDutMapDataTmp = new String[2];						String[] sDutMapSplitTmp = new String[2];						sDutMapDataTmp = sTemp.split(" "); //Retest와 데이터를 공백으로 잘라내서 넣는다.							if(sDutMapDataTmp.length > 1){							//공백으로 잘라낸데이터를 '='잘라서 배열에 저장							sDutMapSplitTmp = sDutMapDataTmp[1].split("=");								if(sDutMapSplitTmp.length < 2){								if( !aRetest_Cnt.contains(sDutMapSplitTmp[0]))									aRetest_Cnt.add(sDutMapSplitTmp[0]);								//if(sDutMapDataTmp[0].equals("Retest=0")){									Hist_Variable.sFerror = "sorterror";								//	return true;								//}							}						}										}					aDutMap.add(sTemp);								}else if(Flag == 3 && !sTemp.contains("<")){					Osversion = Osversion + " " + sTemp;				}				} //for i				//DutMap에서 데이터와 날짜를 따로 저장한다.						for(int i=0; i<aDutMap.size(); i++){				String str = aDutMap.get(i);					if(aRetest_Cnt.size() > 0){						//for(int j=0; j<aRetest_Cnt.size(); j++){						//	String retest = aRetest_Cnt.get(j);							//if(!str.contains(retest)){					if (str.contains("Start_Date") || str.contains("End_Date")) {						DutMapDate = DutMapDate + " " +  str;					}else{						DutMapData = DutMapData + " " + str;					}		//					}else{		//						System.out.println(i +"  str="+str);		//					}					//	}				}else{						if (str.contains("Start_Date") || str.contains("End_Date")) {						DutMapDate = DutMapDate + " " +  str;					}else{						DutMapData = DutMapData + " " + str;					}				}			} //for i				/* 데이터를 공백으로 자른다. */				DutMapData = DutMapData.toString().replaceAll(" ", "");					DutMapData = DutMapData.replaceAll("Retest", "  Retest");					DutMapData = DutMapData.replaceAll("SORT", " SORT");			DutMapData = DutMapData.replaceAll("SUB", " SUB");					DutMapData = DutMapData.replaceAll("NG", " NG");				for(int i=0; i<5; i++){				for(int l=0; l<2; l++){					Hist_Variable.Fe_Dut_Sub[i][l] = "";						}			}				for(int i=0; i<5; i++){				for(int l=0; l<8; l++){					Hist_Variable.Fe_Dut_Sort[i][l] = "";						}			}				for(int i=0; i<5; i++){				for(int l=0; l<2; l++){					Hist_Variable.Fe_Dut_Ng[i][l] = "";						}			}	//		Utils.makeLog("[Data Space Split]", Hist_Variable.sData_Format + "_Yield_Hist");				StringTokenizer Head_GammaItem = new StringTokenizer(TotHead_Gamma, " ");			int Head_GammaLine = Head_GammaItem.countTokens();		//		Utils.makeLog("[Data Standard HashMap Save]", Hist_Variable.sData_Format + "_Yield_Hist");				for (int i = 0; i < Head_GammaLine; i++) {				/* 공백으로 자른 데이터를 '=' Split 하여 hashMap에 저장 */					String Head_Gamma_split = Head_GammaItem.nextToken();				String[] Dataarr = Head_Gamma_split.split("=");					if(Dataarr.length > 0){					if (Dataarr.length > 1) {						Hist_Variable.hs.put(Dataarr[0], Dataarr[1]);					} else {						Hist_Variable.hs.put(Dataarr[0], "");					}				}			}// for i		//		Utils.makeLog("[OSVERSION]", Hist_Variable.sData_Format + "_Yield_Hist");				//20100705 OSVERSION 추가			StringTokenizer VersionItem = new StringTokenizer(Osversion, " ");				int verLine = VersionItem.countTokens();				if(verLine > 0){				for(int j=0; j<verLine; j++){					/* 공백으로 자른 데이터를 '=' Split 하여 hashMap에 저장 */					String[] Version_arr = new String[2];								String Version_split = VersionItem.nextToken();					Version_arr = Version_split.split("=");							if(Version_arr.length > 0){							if (Version_arr.length > 1) {								Hist_Variable.hs.put(Version_arr[0], Version_arr[1]);							} else {								Hist_Variable.hs.put(Version_arr[0], "");							}						}					}//for j			}else{				Hist_Variable.hs.put("HOS_A", "-");				Hist_Variable.hs.put("TOS_SYSOS", "-");				Hist_Variable.hs.put("TesterIF", "-");			}				// Retest때문에 이동불가 .. 			//###################################################################			StringTokenizer DutMapDate_Item = new StringTokenizer(DutMapDate, " ");			int DutDate_Line = DutMapDate_Item.countTokens();			int Retest_Cnt = 0;				for (int i = 0; i < DutDate_Line; i++) {					/* 공백으로 자른 데이터를 '=' Split  */				String DutDate_split = DutMapDate_Item.nextToken();				String[] Date_arr = DutDate_split.split("=");						if(Date_arr.length > 0){						if (Date_arr[0].equals("Retest")) {							if (Hist_Variable.Retest != Retest_Cnt) {								if( Hist_Variable.Retest < Integer.parseInt(Date_arr[1]))									Hist_Variable.Retest = Integer.parseInt(Date_arr[1]);							}							Retest_Cnt++;						}					}			}			//##################################################################				DutMapData = DutMapData.replaceAll(": ", ":");			DutMapData = DutMapData.replaceAll(" :", ":");			StringTokenizer DutMap_Item = new StringTokenizer(DutMapData, " ");				int DutMap_Line = DutMap_Item.countTokens();			int Retest_Flag = 0;			int Retest_FlagTmp = 0;			int cnt = 0;				//Retest두번째 부터 Sort가 없으면 Retest를 뺀다			for(int i=0; i<DutMap_Line; i++){				String[] sTmp = new String[1];				sTmp = DutMap_Item.nextToken().split("=");				if(sTmp.length < 2 && sTmp[0].equals("SORT")){					Hist_Variable.Retest--;				}			}// for i						/* Sort Sum을 넣는 배열을 초기화, Fe_Dut_Sort,Sort,Dutemp Clear */					for (int k = 0; k < 8; k++) {				miSum[k] = 0;			}				for(int l=0;l<5;l++){							for(int n=0;n<4;n++){					Dutemp[l][n] = "";				}			}				for(int l=0;l<5;l++){				for (int j = 0; j < 8; j++) {					Hist_Variable.Fe_Dut_Sort[l][j] = "0";					Sort[l][j + 1] = "0";				}			}				if( DutMap_Line< 2){				Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = "";				Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = "";				Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][0] = "";				Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][1] = "";			}				//DUTMAP 데이터를 공백으로 자른다.				StringTokenizer DutMap_Item2 = new StringTokenizer(DutMapData, " ");			int DutMap_Cnt = DutMap_Item2.countTokens();				for (int i = 0; i < DutMap_Cnt; i++) {				try{					String DutMap_split = DutMap_Item2.nextToken();					String[] arr = DutMap_split.split("=");														if (arr[0].equals("Retest")) {						if (Retest_FlagTmp != Integer.parseInt(arr[1])) {							Retest_FlagTmp = Integer.parseInt(arr[1]);							Retest_Flag++;							m = 0;						}					} else if (!arr[0].equals("Retest")) {							/* Sort를 , 로 분류 배열에 넣어준다. */						if (arr[0].equals("SORT")) {							if (arr.length > 1) { // Sort값이 없으면 빠져나간다.								logger.info("SORT : "+ arr[1]);								StringTokenizer sort = new StringTokenizer(arr[1]," ,\t\r\n");								String tokbuf="";								int itn=0, icount=0;				/**			* Sort를 ':'로 Split해서 배열에 같은 방번호에 넣어주는 부분			* itn : 방번호 , icount : 값			*/											while (sort.hasMoreElements()) {										tokbuf = sort.nextToken();									String[] split_sort = tokbuf.split(":");									if (DutMap_split != null && split_sort.length == 2) {										if (split_sort[0] != null && split_sort[1] != null) {											try {												itn = Integer.parseInt(split_sort[0]);												icount = Integer.parseInt(split_sort[1]);												if (itn > 0 && itn < 8 + 1) {													Sort[Retest_Flag][itn] = Integer.toString(icount);												}											} catch (Exception ex) {												logger.error(ex.toString());											}										}									}									cnt++;								}									/**								 * Oscar_Hist_Variable.Retest : Retest의 최고 갯수								 * Retest_Flag : Retest의 현재 순번								 * arr[1] : Retest의 현재 순번 Sort 값								 */									Parse_Sum(Hist_Variable.Retest, Retest_Flag, arr[1]);							}else{								try {									int itn=0, icount=0;									itn = 0;									icount = 0;															if (itn > 0 && itn < 8 + 1) {										Sort[Retest_Flag][itn] = Integer.toString(icount);									}									} catch (Exception ex) {									logger.error(ex.toString());								}							}								for (int l = 0; l < 8; l++) {								if (Sort[Retest_Flag][l + 1] == null || Sort[Retest_Flag][l + 1] == "") {									Sort[Retest_Flag][l + 1] = "0";								}												}						} else {							/* '='로 Split했을시 값이없으면 넘 어간다. */							int mod = DutMap_Cnt % 3;							if(mod != 0){								Hist_Variable.sFerror = "DUTMAP";							}														if(m < 4){								if (arr.length > 1) {									Dutemp[Retest_Flag][m] = arr[1];								}else{									Dutemp[Retest_Flag][m] = "";								}							}								/* Sub를 :잘라 배열에 넣는다. */							if (arr[0].equals("SUB")) {								//Retest가 0일때 sub값이있고 1이상일때는 sub값이 없어도 정상 								//Retest가 0일때 sub값이 없으면 에러								if(arr.length > 1){									if(Retest_Flag == 0){										Hist_Variable.hs.put("PRIME_SUBBIN", arr[1]);																		}else if(Retest_Flag > 0){										String subbin = "";										if(null != Hist_Variable.hs.get("RETEST_SUBBIN")){											subbin = Hist_Variable.hs.get("RETEST_SUBBIN") + "!@!" + arr[1];										}else{											subbin = arr[1];										}										Hist_Variable.hs.put("RETEST_SUBBIN", subbin);									}								}																if(Retest_Flag == 0){									if (arr.length > 1) {										StringTokenizer sub = new StringTokenizer(arr[1]," ,\t\r\n");										String toksub="" ,strsub="";										String strsub1="";										String subarr="";										int itnsub=0, subcount=0;											/* PKG_TEST_ITEM_DESC TABLE 에서  NG_TN,NG_DESC data를 가져온다*/												//Vector vNgDesc = dele.getSelect_Ngdesc("SUB");										while (sub.hasMoreElements()) {												toksub = sub.nextToken();												String[] split_sub = toksub.split(":");												strsub = split_sub[0];												if (DutMap_split != null && split_sub.length == 2) {													if (split_sub[0] != null && split_sub[1] != null) {														if (strsub1 != null ){															strsub1 = strsub1.replaceAll(" ", "") ;														}else{															strsub1 = strsub;														}														try {															itnsub = Integer.parseInt(split_sub[0]);															subcount = Integer.parseInt(split_sub[1]);															if (itnsub > 0 && itnsub < 1002) {																Hist_Variable.ReSub[Retest_Flag][itnsub] = subcount;															}														} catch (Exception ex) {															logger.error(ex.toString());														}													}												}												subarr = ""+subarr + strsub1 +":"+ split_sub[1]+",";										}											for ( int k=0; k < 2 ; k++){											Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][k] = "";										}											if (Hist_Variable.RsCnt > 0){											if (subarr.getBytes().length >= 4000) {												String subdesc[] = Utils.strLength(subarr).split("-");												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = subdesc[0];												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = subdesc[1];											} else {												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = subarr;												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = "";											}										}else{											Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = "";											Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = "";										}									}else{ // length가 2 가 아닌경우																		Hist_Variable.sFerror = "sorterror";										Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = "";										Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = "";									}								}else if(Retest_Flag > 0){										if ( arr.length == 2) {										StringTokenizer sub = new StringTokenizer(arr[1]," ,\t\r\n");										String toksub="" ,strsub="";										String strsub1="";										String subarr="";										int itnsub=0, subcount=0;											/* PKG_TEST_ITEM_DESC TABLE 에서  NG_TN,NG_DESC data를 가져온다*/												//Vector vNgDesc = dele.getSelect_Ngdesc("SUB");											while (sub.hasMoreElements()) {												toksub = sub.nextToken();												String[] split_sub = toksub.split(":");												strsub = split_sub[0];												if (DutMap_split != null && split_sub.length == 2) {													if (split_sub[0] != null && split_sub[1] != null) {														if (strsub1 != null ){															strsub1 = strsub1.replaceAll(" ", "") ;														}else{															strsub1 = strsub;														}															try {															itnsub = Integer.parseInt(split_sub[0]);															subcount = Integer.parseInt(split_sub[1]);															if (itnsub > 0 && itnsub < 1002) {																Hist_Variable.ReSub[Retest_Flag][itnsub] = subcount;															}															} catch (Exception ex) {															logger.error(ex.toString());															}													}												}												subarr = ""+subarr + strsub1 +":"+ split_sub[1]+",";										}											for ( int k=0; k < 2 ; k++){											Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][k] = "";										}											if (Hist_Variable.RsCnt > 0){											if (subarr.getBytes().length >= 4000) {												String subdesc[] = Utils.strLength(subarr).split("-");												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = subdesc[0];												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = subdesc[1];											} else {												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = subarr;												Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = "";											}										}else{											Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = "";											Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = "";										}									}else{																			Dutemp[Retest_Flag][0]= "";									}								}							}else if (arr[0].equals("NG") ) {								if ( arr.length == 2) {									StringTokenizer ng = new StringTokenizer(arr[1]," ,\t\r\n");										String tokng="";									String strng="";									String ngarr="";									String strng1="";									try {																/* PKG_TEST_ITEM_DESC TABLE 에서  NG_TN,NG_DESC data를 가지고온다*/											//Vector vNgDesc = dele.getSelect_Ngdesc("NG");								}catch (Exception ex) {									logger.error(ex.toString());								}									while (ng.hasMoreElements()) {									tokng = ng.nextToken();									String[] split_ng = tokng.split(":");									strng = split_ng[0];										if (strng1 != null ){										strng1 = strng1.replaceAll(" ", "") ;									}else{										strng1 = strng;									}									if (DutMap_split != null && split_ng.length == 2) {										if (split_ng[0] != null && split_ng[1] != null) {										}									}										/* split 한 DATA를  다시 한줄로 만들어준다 */									ngarr = ""+ngarr + strng1 +":"+ split_ng[1]+",";								}									for ( int k=0; k < 2 ; k++){									Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][k] = "";								}									if (Hist_Variable.RsCnt > 0){									if (ngarr.getBytes().length >= 4000) {										String ngdesc[] = Utils.strLength(ngarr).split("-");										Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][0] = ngdesc[0];										Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][1] = ngdesc[1];									} else {										Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][0] = ngarr;										Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][1] = "";									}								}else {									Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][0] = "";									Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][1] = "";								}																}else{// length가 2 가 아닌경우									Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][0] = "";									Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][1] = "";								}								}else{// SORT, SUB, NG 도없는경우 									for (int l = 0; l < 8; l++) {									Sort[Retest_Flag][l + 1] = "0";								}									Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][0] = "";								Hist_Variable.Fe_Dut_SUBDesc[Retest_Flag][1] = "";								Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][0] = "";								Hist_Variable.Fe_Dut_NgDesc[Retest_Flag][1] = "";							}							m++;						}					}				}catch(Exception ee){					logger.error(ee.toString());				}			}				// 배열에 SORT 계산된 값을 넣어준다.			for (int f = 0; f < 8; f++) {				Hist_Variable.hsint.put(f + 1, miSum[f]);			}			//BIN 1~8까지			Hist_Variable.Test_Count =  Hist_Variable.hsint.get(1) +  Hist_Variable.hsint.get(2)							+  Hist_Variable.hsint.get(3) +  Hist_Variable.hsint.get(4)							+  Hist_Variable.hsint.get(5) +  Hist_Variable.hsint.get(6)							+  Hist_Variable.hsint.get(7) +  Hist_Variable.hsint.get(8);	        //BIN 1~4까지 양품			Hist_Variable.Pass_Count =  Hist_Variable.hsint.get(1) +  Hist_Variable.hsint.get(2)							+  Hist_Variable.hsint.get(3) +  Hist_Variable.hsint.get(4);				/* 0으로는 나눌수 없기에 Test_Count가 0 이면 Yield는 무조건 0으로 한다. */			if (Hist_Variable.Test_Count == 0) {				Hist_Variable.Yield = 0;			} else {				Hist_Variable.Yield = ((double) Hist_Variable.Pass_Count / (double) Hist_Variable.Test_Count) * 100;			}		} catch (Exception ex) {			logger.error(ex.toString());							SmtOscar_Hist_FileCheck.FormatError(File, vFileLine, ex.toString(), "");						/*			FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("Format") + "/" + Hist_Variable.sData_Format + "/" + Utils.getDate("MM", 0) + "Data");			//FileMoveUtil.makeDirectory2(Hist_Variable.sData_Format + "/" + Utils.getDate("MM", 0) + "Data");			File fFileName = new File(FileMoveUtil.getDirpath("File") + "/"+ File);			try {				Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");			} catch (IOException e) {				logger.error("ReName] " + e.toString());			}						File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");			FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("Format")+ "/"+Hist_Variable.sData_Format+"/"+ Utils.getDate("MM", 0) + "Data/");		*/			}		if(!End_Time_Check(DutMapDate, File, vFileLine)){			return false;		}		return true;	}		//변경될 수 있는 로직 BongJun Park	public boolean Site_Check(String File, Vector<?> vFileLine){		/* Tester의 앞글자에 따라 Site 값이 바뀐다.*/		String Tester =  Hist_Variable.hs.get("Tester");		if(Tester == null || Tester.length()<4 ){			SmtOscar_Hist_Dele.Insert_Test_History_Err(File);			SmtOscar_Hist_FileCheck.FormatError(File, vFileLine, "File Check Format Error-10", "Tester under a 4-digit Error");			return false;					}						String Process =  Hist_Variable.hs.get("ProcessId");		//Site 정보 SMART로 하드 코딩		Hist_Variable.Site = "SMART";//		Utils.makeLog("[Site Input]", Hist_Variable.sData_Format + "_Yield_Hist");/*		if("".equals(Hist_Variable.hs.get("Site")) || null == Hist_Variable.hs.get("Site")){			if(Tester.length() > 1){					if(Tester.substring(0,1).toLowerCase().equals("c") || Tester.substring(0,2).toLowerCase().equals("mg")|| Tester.substring(0,2).toLowerCase().equals("ba")					|| Tester.substring(0,3).toLowerCase().equals("ea0")){						Hist_Variable.Site = "SESS_1";					}else if(Tester.substring(0,2).toLowerCase().equals("em")){						Hist_Variable.Site = "ONYANG";											}else if(Tester.substring(0,1).toLowerCase().equals("d")){						Hist_Variable.Site = "SESS_2";							}else if(Tester.substring(0,2).toLowerCase().equals("tn")){						Hist_Variable.Site = "SPIL";					}else if(Tester.substring(0,2).toLowerCase().equals("th")||Tester.substring(0,1).toLowerCase().equals("e")){						Hist_Variable.Site = "STS";							}else if(Tester.substring(0,1).toLowerCase().equals("t")){						Hist_Variable.Site = "SIGNETICS";					}else if(Tester.substring(0,2).toLowerCase().equals("qa")||Tester.substring(0,2).toLowerCase().equals("qf")||Tester.substring(0,2).toLowerCase().equals("qt")){						Hist_Variable.Site = "QA";					}else if(Tester.substring(0,2).toLowerCase().equals("qs")){						Hist_Variable.Site = "SESS_QA_1";					}else if(Tester.substring(0,2).toLowerCase().equals("qc")){						Hist_Variable.Site = "SESS_QA_2";					}else if(Tester.substring(0,1).toLowerCase().equals("o")){						Hist_Variable.Site = "OSE";					}else if(Tester.substring(0,1).equals("1")){						if(Process.length() > 6){							if(Process.substring(4, 7).equals("PR9")){								Hist_Variable.Site = "PSPC_QA";								}else{								Hist_Variable.Site = "PSPC";							}						}else{							Hist_Variable.Site = "PSPC";						}						}else{						Hist_Variable.Site = "ONYANG";					}				}else{					Oscar_Hist_FileCheck.FormatError(Hist_Variable.sData_Format, File, vFileLine, "File Check Format Error-11", "Digits missing.");					return false;				}		}else{			Hist_Variable.Site = Hist_Variable.hs.get("Site");			}*/		return true;	}	public boolean End_Time_Check(String DutMapDate, String File, Vector<?> vFileLine){		/* 날짜를 Split해서 저장 *///		Utils.makeLog("[Start Date, EndDate]", Hist_Variable.sData_Format + "_Yield_Hist");		StringTokenizer DutMapDate_Item = new StringTokenizer(DutMapDate, " ");		for (int q = 0; q < 5; q++) {			for (int w = 0; w < 4; w++){				Hist_Variable.Dut_Date[q][w]="";			}		}		for (int l = 0; l < 5; l++) {			Hist_Variable.Start_Date[l]="";			Hist_Variable.End_Date[l]="";			Hist_Variable.Start_Time[l]="";			Hist_Variable.End_Time[l]="";		}		Hist_Variable.Retest = 0;		int DutDate_Line = DutMapDate_Item.countTokens();		int Retest_Cnt = 0;		for (int i = 0; i < DutDate_Line; i++) {			/* 공백으로 자른 데이터를 '=' Split  */			String DutDate_split = DutMapDate_Item.nextToken();			String[] Date_arr = DutDate_split.split("=");			try {				if(Date_arr.length > 0){					if (Date_arr[0].equals("Retest")) {						if (Hist_Variable.Retest != Retest_Cnt) {							if( Hist_Variable.Retest < Integer.parseInt(Date_arr[1])){								Hist_Variable.Retest =Integer.parseInt(Date_arr[1]);							}						}						Retest_Cnt++;						/* 날짜데이터가 중복될경우 같은 배열에 넣기위한 조건문 */					} else if (Date_arr[0].equals("Start_Date")) {						if(Date_arr.length > 1){							Hist_Variable.Dut_Date[Hist_Variable.Retest][0] = Date_arr[1];						}else{							Hist_Variable.Dut_Date[Hist_Variable.Retest][0] = "";						}					} else if (Date_arr[0].equals("Start_Time")) {						if(Date_arr.length > 1){							Hist_Variable.Dut_Date[Hist_Variable.Retest][1] = Date_arr[1];						}else{							Hist_Variable.Dut_Date[Hist_Variable.Retest][1] = "";						}					} else if (Date_arr[0].equals("End_Date")) {						Hist_Variable.Dut_Date[Hist_Variable.Retest][2] = Date_arr[1];											} else if (Date_arr[0].equals("End_Time")) {						if(Date_arr.length > 1){							Hist_Variable.Dut_Date[Hist_Variable.Retest][3] = Date_arr[1];						}else{							Hist_Variable.Dut_Date[Hist_Variable.Retest][3] = "";						}					} 				}else{					/* 날짜데이터가 없는경우 파일 이동 */					SmtOscar_Hist_Dele.Insert_Test_History_Err(File);					SmtOscar_Hist_FileCheck.FormatError(File, vFileLine, "File Check Format Error-12", "End_Date Not Error");					return false;									}				/* PKG 인  End_date 가 없는경우  error 처리 */			} catch (Exception ex) {				logger.error(ex.toString());				/* 날짜데이터가 없는경우 파일 이동 */				SmtOscar_Hist_Dele.Insert_Test_History_Err(File);				SmtOscar_Hist_FileCheck.FormatError(File, vFileLine, "File Check Format Error-13"+ex.toString(), "End_Date Not Error");				return false;			}		}		return true;	}	/**	 * Sort를 파싱해서 합을 해준다 . 1부터 4까지는 Sum을 하고 나머지는 마지막 데이터를 넣는다.	 */	public void Parse_Sum(int cnt, int Retest, String strsub) {		int itn=0;		int icount=0;		String tokbuf="";		StringTokenizer strtok = new StringTokenizer(strsub, " ,\t\r\n");		/**		 * strsub ':'로 Split해서 배열에 같은 방번호에 넣어주는 부분		 * itn : 방번호 , icount : 값		 */			while (strtok.hasMoreElements()) {			tokbuf = strtok.nextToken();			String[] split = tokbuf.split(":");				if (split != null && split.length == 2) {						try {							itn = Integer.parseInt(split[0]);							icount = Integer.parseInt(split[1]);							if (itn > 0 && itn < 8 + 1) {								/* Site가 OSE이면 1부터 4까지만 Sum한다 나머지는 마지막 값을 넣는다.								 * Site가 OSE가 아니면 1부터 5까지 Sum 								*//*								if(Hist_Variable.Site.equals("OSE")||Hist_Variable.Site.equals("QA")||Hist_Variable.Site.equals("SESS_QA_1")||Hist_Variable.Site.equals("SESS_QA_2")||Hist_Variable.Site.equals("PSPC_QA")){									if (itn > 0 && itn < 5) {										miSum[itn - 1] += icount;									} else if (Retest == cnt) {										miSum[itn - 1] = icount;									}								}else{*/									//TestCount 1~5까지 수정()									if (itn > 0 && itn < 6) {										miSum[itn - 1] += icount;									} else if (Retest == cnt) {										miSum[itn - 1] = icount;									}										//}							}						} catch (Exception ex) {							logger.error(ex.toString());						}				}else{					try {						itn = Integer.parseInt(split[0]);						icount = Integer.parseInt(split[1]);						if (itn > 0 && itn < 8 + 1) {							/* Site가 OSE이면 1부터 4까지만 Sum한다 나머지는 마지막 값을 넣는다.							 * Site가 OSE가 아니면 1부터 5까지 Sum 							*//*							if(Hist_Variable.Site.equals("OSE")||Hist_Variable.Site.equals("QA")||Hist_Variable.Site.equals("SESS_QA_1")||Hist_Variable.Site.equals("SESS_QA_2")||Hist_Variable.Site.equals("PSPC_QA")){								if (itn > 0 && itn < 5) {									miSum[itn - 1] += icount;								} else if (Retest == cnt) {									miSum[itn - 1] = icount;								}							}else{*/								if (itn > 0 && itn < 6) {									miSum[itn - 1] += icount;								} else if (Retest == cnt) {									miSum[itn - 1] = icount;								}							//}						}					} catch (Exception ex) {						logger.error(ex.toString());					}			}		}	}	public void Var_Substitute(String File) {		try {			/** 			 * Sort를 파싱했을때의 값을 1부터9까지 CATEGORY에 넣는다. 			 * Oscar_Hist_Variable.hs.get(1)...(9) Sort를 ':'로 Split해서 1~4까지 합한 값			 */				Hist_Variable.Category_01 = Hist_Variable.hsint.get(1);			Hist_Variable.Category_02 = Hist_Variable.hsint.get(2);			Hist_Variable.Category_03 = Hist_Variable.hsint.get(3);			Hist_Variable.Category_04 = Hist_Variable.hsint.get(4);			Hist_Variable.Category_05 = Hist_Variable.hsint.get(5);			Hist_Variable.Category_06 = Hist_Variable.hsint.get(6);			Hist_Variable.Category_07 = Hist_Variable.hsint.get(7);			Hist_Variable.Category_08 = Hist_Variable.hsint.get(8);			/**			 *  데이터에 시작 마지막 년도앞에 두자리를 붙여준다. 			 *	날짜는 '/', 시간은 ':'를 빼고 붙여준다.			 */			String YearDate = Utils.getDate("yyyy", 0).substring(0, 2);			for (int i = 0; i <= Hist_Variable.Retest; i++) {				Hist_Variable.Sort_Input[i] = "";			}			for (int i = 0; i <= Hist_Variable.Retest; i++) {				if (Hist_Variable.Dut_Date[i][0] != null) {					if(Hist_Variable.Dut_Date[i][0].length()==10){						Hist_Variable.Start_Date[i] = Hist_Variable.Dut_Date[i][0].replace("/", "");					}else{						Hist_Variable.Start_Date[i] = YearDate + Hist_Variable.Dut_Date[i][0].replace("/", "");					}				}				if (Hist_Variable.Dut_Date[i][1] != null) {					Hist_Variable.Start_Time[i] = Hist_Variable.Dut_Date[i][1].replace(":", "");				}				if (Hist_Variable.Dut_Date[i][2] != null ) {					if(Hist_Variable.Dut_Date[i][2].length()==10){						Hist_Variable.End_Date[i] = Hist_Variable.Dut_Date[i][2].replace("/", "");					}else{						Hist_Variable.End_Date[i] = YearDate + Hist_Variable.Dut_Date[i][2].replace("/", "");					}								}								if (Hist_Variable.Dut_Date[i][3] != null) {					Hist_Variable.End_Time[i] = Hist_Variable.Dut_Date[i][3].replace(":", "");				}				/**				 * 4000자 이상일때 4000자 미만으로 잘라준다.				 */				for (int k = 0; k < 2; k++) {					Hist_Variable.Fe_Dut_Sub[i][k] = "";					Hist_Variable.Fe_Dut_Ng[i][k] = "";				}				if (!Dutemp[i][0].equals("")) {					if (Dutemp[i][0].getBytes().length > 4000) {						String ngsub[] = Utils.strLength(Dutemp[i][0]).split("-");						Hist_Variable.Fe_Dut_Sub[i][0] = ngsub[0];						Hist_Variable.Fe_Dut_Sub[i][1] = ngsub[1];					} else {						Hist_Variable.Fe_Dut_Sub[i][0] = Dutemp[i][0];						Hist_Variable.Fe_Dut_Sub[i][1] = "";					}				}				if (!Dutemp[i][1].equals("")) {					if (Dutemp[i][1].getBytes().length > 4000) {						String ngng[] = Utils.strLength(Dutemp[i][1]).split("-");						Hist_Variable.Fe_Dut_Ng[i][0] = ngng[0];						Hist_Variable.Fe_Dut_Ng[i][1] = ngng[1];					} else {						Hist_Variable.Fe_Dut_Ng[i][0] = Dutemp[i][1];						Hist_Variable.Fe_Dut_Ng[i][1] = "";					}				}				Hist_Variable.Fe_Dut_Sort[i][0] = Sort[i][1];				Hist_Variable.Fe_Dut_Sort[i][1] = Sort[i][2];				Hist_Variable.Fe_Dut_Sort[i][2] = Sort[i][3];				Hist_Variable.Fe_Dut_Sort[i][3] = Sort[i][4];				Hist_Variable.Fe_Dut_Sort[i][4] = Sort[i][5];				Hist_Variable.Fe_Dut_Sort[i][5] = Sort[i][6];				Hist_Variable.Fe_Dut_Sort[i][6] = Sort[i][7];				Hist_Variable.Fe_Dut_Sort[i][7] = Sort[i][8];				int iSortTemp = 0;				for(int j=0; j<8; j++){					iSortTemp += Integer.parseInt(Hist_Variable.Fe_Dut_Sort[i][j]);				}				Hist_Variable.Sort_Input[i] = Integer.toString(iSortTemp);			}		} catch (Exception ex) {			logger.error(ex.toString());		}	}	public void Init(){		Hist_Variable.hs = new HashMap<String,String>();		Hist_Variable.sFerror = "";		Hist_Variable.Retest = 0;		Hist_Variable.Category_01 = 0;		Hist_Variable.Category_02 = 0;		Hist_Variable.Category_03 = 0;		Hist_Variable.Category_04 = 0;		Hist_Variable.Category_05 = 0;		Hist_Variable.Category_06 = 0;		Hist_Variable.Category_07 = 0;		Hist_Variable.Category_08 = 0;		//Hist_Variable.Category_09 = 0;		Hist_Variable.LineId = "";	}}