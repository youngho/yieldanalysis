package com.tptech.smtoscar_hist;import com.tptech.GlobalDao;import com.tptech.Hist_Variable;import com.tptech.isi.SmtIsi_Parameter;import com.tptech.isi.SmtIsi_Stdinfo;import com.tptech.log.WriteLogger;import com.tptech.util.FileMoveUtil;import com.tptech.util.Utils;import org.apache.log4j.Logger;import java.io.File;import java.io.IOException;import java.text.DecimalFormat;import java.text.NumberFormat;import java.util.StringTokenizer;import java.util.Vector;//import java.util.HashMap;/** * @author  Administrator *  LOT_NUMBER, PRODUCT_NAME, PROCESS_NAME, END_DATE, RETEST_COUNT가 같은 데이터가 있는 경우 이전 데이터 Delete후 Insert(기존 유지).   	이전 데이터 Delete후 Insert시 Rework_flag Column에 데이터 입력.    LOTOUTMODE가 SMANUAL인 경우, Rework_flag Column에 "TEND"로 입력.        이전 데이터와 현재 데이터의 end_time이 다를 경우, Rework_flag Column에 "REWORK"으로 입력. */public class SmtOscar_Hist_Dao {		private static Logger logger = WriteLogger.getInstance("SmtOscar_Hist_Dao.java");	/**	 * @uml.property  name="util"	 * @uml.associationEnd  	 */	Utils util = new Utils();	static String Lot_type = "";	public Vector<String[]> getLastTable() {		Vector<String[]> vResult= null;		StringBuffer sSQL = new StringBuffer();		//SBL_Parameter clsParam = new SBL_Parameter();		try{			sSQL.append(" SELECT * FROM (SELECT b.sbl_yield, b.run_sbl, b.yield_sbl, b.new_sub_bin, b.t_lot_sbl, \n");			sSQL.append(" b.except_lot, b.except_input_cnt, b.fail_sum, b.fail_sum_cmd,  b.product \n");			sSQL.append(" FROM ( \n");			sSQL.append(" SELECT a.*  FROM \n"); 			sSQL.append(" (SELECT product, sbl_yield, \n");			sSQL.append(" case when run_sbl = '' or run_sbl is null then  'N' else run_sbl end  run_sbl,  \n"); 			sSQL.append(" case when yield_sbl = '' or yield_sbl is null then  '0' else yield_sbl end yield_sbl, \n");			sSQL.append(" case when new_sub_bin = '' or new_sub_bin is null then  '0' else new_sub_bin end new_sub_bin, \n"); 			sSQL.append(" case when t_lot_sbl = '' or t_lot_sbl is null then  'N' else t_lot_sbl end t_lot_sbl, \n");			sSQL.append(" case when except_lot = '' or except_lot is null then  'NON' else except_lot end except_lot, \n");  			sSQL.append(" case when except_input_cnt = '' or except_input_cnt is null then  '0' else except_input_cnt end except_input_cnt, \n");			sSQL.append(" case when fail_sum = '' or fail_sum is null then  '50' else fail_sum end fail_sum, \n");			sSQL.append(" case when fail_sum_cmd = '' or fail_sum_cmd is null then  'NON' else fail_sum_cmd end fail_sum_cmd \n"); 			sSQL.append("  FROM last_table \n"); 			sSQL.append("  WHERE tester='"+ Hist_Variable.hs.get("System") +"' \n");			sSQL.append("  AND '"+ Hist_Variable.hs.get("ProductId") +"' like product \n");          			sSQL.append("  AND process = '"+ Hist_Variable.hs.get("ProcessId") +"' \n");                                                  			sSQL.append("  AND halt is null) a \n"); 			sSQL.append("  )b \n");			sSQL.append("  ORDER BY length(replace(b.product,'_','')) DESC )  WHERE ROWNUM <= 1 \n");  // 만약 두개이상의 row가 나올 때는 product 의 '_' 가 가장 적은 것으로 쓴다//cho orcle convert ok			vResult = GlobalDao.selectQuery(sSQL.toString());		}catch(Exception e){			logger.error(e.toString() + " : " + sSQL.toString());		}			return vResult;				}		public Vector<String[]> getExceptLot(String pLotid, String pExcept) 	{		Vector<String[]> vResult= null;		StringBuffer sSQL = new StringBuffer();				try{			sSQL.append(" select count(*) where '"+pLotid+"' like '"+pExcept+"'");			vResult = GlobalDao.selectQuery(sSQL.toString());		}catch(Exception e){			logger.error(e.toString());		}			return vResult;					}			public boolean insertResult(SmtIsi_Parameter parameter, SmtIsi_Stdinfo stdinfo) {		StringBuffer sSQL = new StringBuffer();				int size =0;		String sResult = "";		String sAllJudge = "";		try{						String sRetestSubBin="";			String values = "";			if(parameter.rtValue.equals("-") || parameter.rtValue.equals("")){				values = "0";			}else{				values = parameter.rtValue;			}						for(int i=0; i<parameter.rtResultDb.size(); i++)			{				sResult += "<" + parameter.rtResultDb.get(i) + ">,"; 			}						sSQL = new StringBuffer();			sSQL.append(" INSERT INTO sbl_result( \n");			sSQL.append("           event_time     , \n");			sSQL.append("           end_mode       , \n");			sSQL.append("           lotid          , \n");			sSQL.append("           product        , \n");			sSQL.append("           process        , \n");			sSQL.append("           lottype        , \n");			sSQL.append("           operator       , \n");			sSQL.append("           tester         , \n");			sSQL.append("           t_model        , \n");			sSQL.append("           handler        , \n");			sSQL.append("           head           , \n");			sSQL.append("           boardid        , \n");			sSQL.append("           main_pgm       , \n");			sSQL.append("           retest_cnt     , \n");			sSQL.append("           start_date     , \n");			sSQL.append("           end_date     , \n");			sSQL.append("           op_cnt         , \n");			sSQL.append("           handler_cnt    , \n");			sSQL.append("           eqp_cnt        , \n");			sSQL.append("           prime_subbin   , \n");			sSQL.append("           retest_subbin  , \n");			sSQL.append("           limit_yield    , \n");			sSQL.append("           run_sbl        , \n");			sSQL.append("           yield_sbl      , \n");			sSQL.append("           sub_bin        , \n");			sSQL.append("           t_lot_sbl      , \n");			sSQL.append("           except_lot     , \n");			sSQL.append("           except_input_cnt, \n");			sSQL.append("           fail_sum       , \n");			sSQL.append("           fail_sum_cmd   , \n");			sSQL.append("           judge1         , \n");			sSQL.append("           judge2         , \n");			sSQL.append("           real         , \n");			sSQL.append("           pass           , \n");			sSQL.append("           spec           , \n");			sSQL.append("           value          , \n");			sSQL.append("           result         , \n");			sSQL.append("           reason         , \n");			sSQL.append("           sys_date  )      \n");			sSQL.append(" VALUES(                     \n");			sSQL.append("           '" + parameter.Event_Time + "',	\n");			sSQL.append("           '" + Hist_Variable.hs.get("Tmode") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("LotId") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("ProductId") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("ProcessId") + "',			\n");			sSQL.append("           '" + Hist_Variable.hs.get("Type") + "',			\n");			sSQL.append("           '" + Hist_Variable.hs.get("Operator") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("Tester") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("System") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("Handler") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("Head") + "',			\n");			sSQL.append("           '" + Hist_Variable.hs.get("Board_id") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("Program") + "',		\n");			sSQL.append("           '" + Hist_Variable.Retest + "',	\n");			sSQL.append("           '" + Hist_Variable.Start_Date[0] + Hist_Variable.Start_Time[0] + "',	\n");			sSQL.append("           '" + Hist_Variable.End_Date[Hist_Variable.Retest] + Hist_Variable.End_Time[Hist_Variable.Retest] + "',	\n");			sSQL.append("           '" + Hist_Variable.hs.get("OP_CNT") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("HANDLER_CNT") + "',	\n");			sSQL.append("           '" + Hist_Variable.hs.get("EQP_CNT") + "',		\n");			sSQL.append("           '" + Hist_Variable.hs.get("PRIME_SUBBIN") + "',	\n");			sSQL.append("           '" + Hist_Variable.hs.get("RETEST_SUBBIN") + "',	\n");			sSQL.append("           '" + stdinfo.LIMIT_YIELD + "',\n");			sSQL.append("           '" + stdinfo.RUN_SBL + "',	\n");			sSQL.append("           '" + stdinfo.YIELD_SBL + "',	\n");			sSQL.append("           '" + stdinfo.SUB_BIN + "',	\n");			sSQL.append("           '" + stdinfo.T_LOT_SBL + "',	\n");			sSQL.append("           '" + stdinfo.EXCEPT_LOT + "',	\n");			sSQL.append("           '" + stdinfo.EXCEPT_INPUT_CNT + "',	\n");			sSQL.append("           '" + stdinfo.FAIL_SUM + "',	\n");			sSQL.append("           '" + stdinfo.FAIL_SUM_CMD + "',\n");			sSQL.append("           '" + parameter.rtJudge1  + "',\n");			sSQL.append("           '" + parameter.rtJudge2  + "',\n");			sSQL.append("           '" + parameter.rtReal  + "',\n");			sSQL.append("           '" + parameter.rtPass    + "',\n");			sSQL.append("           '" + parameter.rtSpec    + "',\n");			sSQL.append("          round('" + values   + "',2),\n");			sSQL.append("           '" + sResult           + "',\n");			sSQL.append("           '" + parameter.rtReason  + "',\n");			sSQL.append("TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS')) \n");			//cho orcle convert ok			size = GlobalDao.executeUpdate(sSQL.toString());			if(size > 0){				return true;			}else{				return false;			}		}catch(Exception e){			logger.error(e.toString());			return false;		}				}		/* OSCAR */	public int SMTOSCAR_DATA_CHECK(String LotId, String ProcessId, String ProductId){		String sResult = null;		int iCnt = 0;		StringBuffer sSQL = new StringBuffer();		try {			sSQL.append("SELECT COUNT(*) FROM TEST_YIELD_HIST \n");			sSQL.append("WHERE LOT_NUMBER = '"+LotId+"' \n");			sSQL.append("AND PARTNUMBER_NAME = '"+ProductId+"' \n");			sSQL.append("AND PROCESS_NAME = '"+ProcessId+"' \n");			sResult = GlobalDao.selectQuerys(sSQL.toString());			iCnt = Integer.parseInt(sResult);		} catch (Exception ee) {			logger.error(ee.toString());		}			return iCnt;	}	/*public void Select_V_Wip() {		int iWip = 0;		int iCnt = 0;		String sResult = null;		StringBuffer sSQL = new StringBuffer();		sSQL.append("SELECT COUNT(*) FROM V_WIP ");		sSQL.append("WHERE LOTID='" + Hist_Variable.hs.get("LotId")+ "'");		try {			sResult = GlobalDao.selectQuerys(sSQL.toString());			iCnt = Integer.parseInt(sResult);		} catch (Exception ee) {			logger.error(ee.toString());		}		if (iCnt == 1) {			sSQL = new StringBuffer();			sSQL.append(" SELECT  ");			sSQL.append(" LOTTYPE, ");			sSQL.append(" NVL(MC_NCF,'-') MC_NCF, ");			sSQL.append(" NVL(NCACODE,'-') NCACODE, ");			sSQL.append(" NVL(NCECODE,'-') NCECODE, ");			sSQL.append(" NVL(NCFCODE,'-') NCFCODE, ");			sSQL.append(" NVL(NCHCODE,'-') NCHCODE, ");			sSQL.append(" NVL(NCMCODE,'-') NCMCODE, ");			sSQL.append(" NVL(NCQCODE,'-') NCQCODE, ");			sSQL.append(" NVL(NCTCODE,'-') NCTCODE, ");			sSQL.append(" NVL(NCPCODE,'-') NCPCODE, ");			sSQL.append(" NVL(NCSCODE,'-') NCSCODE, ");			sSQL.append(" NVL(NCBCODE,'-') NCBCODE, ");			sSQL.append(" NVL(NCKCODE,'-') NCKCODE, ");			sSQL.append(" NVL(NCRCODE,'-') NCRCODE, ");			sSQL.append(" NVL(RECYCLESTEP,'-') RECYCLESTEP, ");			sSQL.append(" NVL(LOT_ASYSITE,'-') LOT_ASYSITE, ");			sSQL.append(" NVL(LINEID,'-') LINE ");//2013 01 10			sSQL.append(" FROM V_WIP WHERE LOTID='" + Hist_Variable.hs.get("LotId") + "'");			Vector<?> vResult = new Vector<Object>();			try {				vResult = GlobalDao.selectQuery(sSQL.toString());				iWip = vResult.size();				for (int j = 0; j < iWip; j++) {					String[] sTmep = (String[]) vResult.elementAt(j);					Lot_type = sTmep[0];					Hist_Variable.Mc_Ncf = sTmep[1];					Hist_Variable.NcaCode = sTmep[2];					Hist_Variable.NceCode = sTmep[3];					Hist_Variable.NcfCode = sTmep[4];					Hist_Variable.NchCode = sTmep[5];					Hist_Variable.NcmCode = sTmep[6];					Hist_Variable.NcqCode = sTmep[7];					Hist_Variable.NctCode = sTmep[8];					Hist_Variable.NcpCode = sTmep[9];					Hist_Variable.NcsCode = sTmep[10];					Hist_Variable.NcbCode = sTmep[11];					Hist_Variable.NckCode = sTmep[12];					Hist_Variable.NcrCode = sTmep[13];					Hist_Variable.Recyclestep = sTmep[14];					Hist_Variable.Lot_asysite = sTmep[15];					Hist_Variable.line = sTmep[16];//2013 01 10				}			} catch (Exception ee) {				logger.error(ee.toString());			}		} else {			Lot_type = "+";			Hist_Variable.Mc_Ncf = "+";			Hist_Variable.NcaCode = "+";			Hist_Variable.NceCode = "+";			Hist_Variable.NcfCode = "+";			Hist_Variable.NchCode = "+";			Hist_Variable.NcmCode = "+";			Hist_Variable.NcqCode = "+";			Hist_Variable.NctCode = "+";			Hist_Variable.NcpCode = "+";			Hist_Variable.NcsCode = "+";			Hist_Variable.NcbCode = "+";			Hist_Variable.NckCode = "+";			Hist_Variable.NcrCode = "+";			Hist_Variable.Recyclestep = "+";			Hist_Variable.Lot_asysite = "+";			Hist_Variable.line = "+";//2013 01 10		}	}*//*	public void Select_LineId() {		StringBuffer sSQL = new StringBuffer();		sSQL.append(" SELECT NVL(LINE_NAME,'') LINEID ");		sSQL.append(" FROM V_EQUIPMENT_LAYOUT_TEMA WHERE  ");		sSQL.append(" eqpid='" + Hist_Variable.hs.get("Tester") + "'");		String sResult = null;		try {			//sResult = GlobalDao.selectQuerys(sSQL.toString());			if (sResult != null) {				Hist_Variable.LineId = sResult;			} else {				Hist_Variable.LineId = "+";			}		} catch (Exception ee) {			logger.error(ee.toString());		}	}*/	public void Select_Last_Table() {		Vector<?> vResult = new Vector<Object>();		int iTemp = 0, iCount = 0, m = 0, iCate = 0;		int iFlg = 0;		int iWin_sum = 0;		try {			StringBuffer sSQL = new StringBuffer();			sSQL.append(" SELECT tester, product, ");			sSQL.append(" length(product)-length(replace(product, '_', '')) AS Count, ");			sSQL.append(" process,sbl_yield, nvl(cate6_1,'0') AS cate6_1, ");			sSQL.append(" nvl(cate6_2,'0') AS cate6_2,nvl(cate6_3,'0') AS cate6_3, ");			sSQL.append(" nvl(cate6_4,'0') AS cate6_4,nvl(cate6_5,'0') AS cate6_5, ");			sSQL.append(" nvl(cate7_1,'0') AS cate7_1,nvl(cate7_2,'0') AS cate7_2, ");			sSQL.append(" nvl(cate7_3,'0') AS cate7_3,nvl(cate7_4,'0') AS cate7_4, ");			sSQL.append(" nvl(cate7_5,'0') AS cate7_5 ");			sSQL.append(" FROM LAST_TABLE ");			sSQL.append(" WHERE tester = '" + Hist_Variable.hs.get("System")+ "' ");			sSQL.append(" and '" + Hist_Variable.hs.get("ProductId")+ "' like product ");			sSQL.append(" and process = '"+ Hist_Variable.hs.get("ProcessId") + "'");//cho oracle convert ok			vResult = GlobalDao.selectQuery(sSQL.toString());			for (int i = 0; i < vResult.size(); i++) {				String[] sTemp = (String[]) vResult.elementAt(i);				/* product에서 '_'가 적은것을 적용 */				iCount = Integer.parseInt(sTemp[2]);				if (iTemp == 0 && m < 1) {					iTemp = Integer.parseInt(sTemp[2]);					m++;				}				if (iCount < iTemp) {					iTemp = Integer.parseInt(sTemp[2]);					if (sTemp[5].equals("0") || sTemp[5] == null) {						sTemp[5] = "";					}					if (sTemp[6].equals("0") || sTemp[6] == null) {						sTemp[6] = "";					}					if (sTemp[7].equals("0") || sTemp[7] == null) {						sTemp[7] = "";					}					if (sTemp[8].equals("0") || sTemp[8] == null) {						sTemp[8] = "";					}					if (sTemp[9].equals("0") || sTemp[9] == null) {						sTemp[9] = "";					}					if (sTemp[10].equals("0") || sTemp[10] == null) {						sTemp[10] = "";					}					if (sTemp[11].equals("0") || sTemp[11] == null) {						sTemp[11] = "";					}					if (sTemp[12].equals("0") || sTemp[12] == null) {						sTemp[12] = "";					}					if (sTemp[13].equals("0") || sTemp[13] == null) {						sTemp[13] = "";					}					if (sTemp[14].equals("0") || sTemp[14] == null) {						sTemp[14] = "";					}				}				iFlg = 1;			}			for (int i = 0; i <= vResult.size(); i++) {				Hist_Variable.CATE[i][0] = 0;				Hist_Variable.CATE[i][1] = 0;				Hist_Variable.CATE[i][2] = 0;				Hist_Variable.CATE[i][3] = 0;				Hist_Variable.CATE[i][4] = 0;				Hist_Variable.CATE[i][5] = 0;				Hist_Variable.CATE[i][6] = 0;				Hist_Variable.CATE[i][7] = 0;				Hist_Variable.CATE[i][8] = 0;				Hist_Variable.CATE[i][9] = 0;			}			if (iFlg == 1) {				for (int i = 0; i < vResult.size(); i++) {					String[] sTemp = (String[]) vResult.elementAt(i);					for (int j = 5; j < sTemp.length; j++) {						if (sTemp[j].equals(" ")||sTemp[j].equals("")) {							iCate = 0;						} else {							iCate = Integer.parseInt(sTemp[j]);						}						iWin_sum = iWin_sum + iCate;					}					/* CATE[][] Array Clear */					/* 데이터합이 0이상이면 last_table에서 가져온 값과 데이터 파일의 값을 비교 처리한다. */					// 00000e40h: 0D 0A					if (iWin_sum != 0) {						for (int j = 0; j <= Hist_Variable.Retest; j++) {							for (int k = 0; k < 1002; k++) {								if (Integer.parseInt(sTemp[5]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][0] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[6]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][1] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[7]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][2] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[8]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][3] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[9]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][4] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[10]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][5] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[11]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][6] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[12]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][7] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[13]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][8] = Hist_Variable.ReSub[j][k];								if (Integer.parseInt(sTemp[14]) == k										&& Hist_Variable.ReSub[j][k] != 0)									Hist_Variable.CATE[j][9] = Hist_Variable.ReSub[j][k];							}						}					}				}			}		} catch (Exception ee) {			logger.error(ee.toString());		}	}	public void Select_FRLot() {		//Hist_Variable.FRLot		Vector<String[]> vReturn = new Vector<String[]>();		String sTester = "";		if (Hist_Variable.hs.get("Tester") != null) {			sTester = Hist_Variable.hs.get("Tester");		}		try {			StringBuffer sSQL = new StringBuffer();			sSQL.append(" SELECT FR_LOT, CMD FROM ");			sSQL.append(" ISI_EVENT_HIS ");			sSQL.append(" WHERE LOTID='" + Hist_Variable.hs.get("LotId")+ "'");			sSQL.append(" AND PRODUCT='" + Hist_Variable.hs.get("ProductId")+ "'");			sSQL.append(" AND PROCESS='" + Hist_Variable.hs.get("ProcessId")+ "'");			sSQL.append(" AND TESTER='" + sTester+ "'");				sSQL.append(" ORDER BY SYS_DATE DESC");//cho oracle convert ok			vReturn = GlobalDao.selectQuery(sSQL.toString());			if( vReturn != null && vReturn.size() >0){				for( String[] sArr : vReturn){					if( sArr[1].equals("LOT_OUT")){						Hist_Variable.FRLot = sArr[0];						break;					}									}				if( Hist_Variable.FRLot.equals("")){					String[] sArr = vReturn.elementAt(0);											Hist_Variable.FRLot = sArr[0];										}			}					if( Hist_Variable.FRLot == null) Hist_Variable.FRLot= "";		} catch (Exception ee) {			Hist_Variable.FRLot = "";			logger.error(ee.toString());		}	}		/* 데이터를 PKG_Test_History Table에 Update 시킨다. */	public void Insert_Test_History_Err(String sFile) {		DecimalFormat decimal = new DecimalFormat("##.##");		NumberFormat fmt = NumberFormat.getInstance();		StringBuffer sSQL = new StringBuffer();		fmt.setMinimumFractionDigits(2);		double dFbbIbb;		double dFbbEbb;		int size = -1;		String sEnd_date = "";		String sTester = "";		String sHandler = "";		String sHead = "";		String sRetest_Cnt = "";		String sBoard_id ="";		String sFilal_Retest_Cnt = "";		String sInqty = "";		String sOp_Input = "";		String sOp_Cat1 = "";		String sOp_Cat2 = "";		String sOp_Cat3 = "";		String sOp_Cat4 = "";		String sOp_Cat5 = "";		String sOp_Cat6 = "";		String sOp_Cat7 = "";		String sOp_Cat8 = "";		String sOp_Cat9 = "";		String sHd_Input = "";		String sHd_Pass = "";		String sHd_Cat1 = "";		String sHd_Cat2 = "";		String sHd_Cat3 = "";		String sHd_Cat4 = "";		String sHd_Cat5 = "";		String sHd_Cat6 = "";		String sHd_Cat7 = "";		String sHd_Cat8 = "";		String sSub_Program = "";		String sOperator = "";		String sPgmver_Start = "";		String sPgmver_End = "";		String sType = "";		String sSbl_Code = "";		String sSbl_Judge = "";		String sLotinmode = "";		String sLotoutmode = "";		String sMlotlist = "";		String dFbb = "";		String dIbb = "";		String dEbb = "";		String sSbl_cmd = "";		String sRun_sbl_code = "";		String sRun_sbl_cmd = "";		String sRecycle_Flag = "Y";		String sHOS_A = "";		String sHOS_B = "";		String sTOS_OPSYS = "";		String sTOS_ATL = "";		String sTOS_DIAG = "";		String sTOS_SYSOS = "";		String sTOS_GPIB = "";		String sT_IF = "";		String sFsst_Flag = "";		int nSubBin114 = 0;		int nSubBin115 = 0;		int nSubBin116 = 0;		int nFinalSubBin114 = 0;		int nFinalSubBin115 = 0;		int nFinalSubBin116 = 0;		//2013.07.03 박봉준 추가 		String sPurpose_Type = "";				if (Hist_Variable.hs.get("Purpose_Type") != null) {			sPurpose_Type = Hist_Variable.hs.get("Purpose_Type");		}		if(Hist_Variable.Site.equals("STS")||Hist_Variable.Site.equals("SIGNETICS")){			sType = Hist_Variable.hs.get("Type");		}else{			if(Hist_Variable.hs.get("ProcessId").substring(0,1).equals("T")){				sType = Lot_type;				}else{				sType = Hist_Variable.hs.get("Type");			}		}		if(Hist_Variable.hs.get("Board_id") != null && !Hist_Variable.hs.get("Board_id").equals("")){			sBoard_id = Hist_Variable.hs.get("Board_id");		}else{			sBoard_id = "-";		}		if (Hist_Variable.hs.get("FBB") != null && Hist_Variable.hs.get("IBB") != null) {			dFbbIbb = Double.parseDouble(Hist_Variable.hs.get("FBB")) - Double.parseDouble(Hist_Variable.hs.get("IBB"));			Hist_Variable.dGap_IbbFbb = fmt.format(dFbbIbb);			dIbb = Hist_Variable.hs.get("IBB");			dFbb = Hist_Variable.hs.get("FBB");		} else {			Hist_Variable.dGap_IbbFbb = "";		}		if (Hist_Variable.hs.get("EBB") != null) { 			dFbbEbb = Double.parseDouble(Hist_Variable.hs.get("FBB")) - Double.parseDouble(Hist_Variable.hs.get("EBB"));			Hist_Variable.dGap_EbbFbb = fmt.format(dFbbEbb);			dEbb = Hist_Variable.hs.get("EBB");		} else {			Hist_Variable.dGap_EbbFbb = "";		}		if (Hist_Variable.hs.get("Tester") != null) {			sTester = Hist_Variable.hs.get("Tester");		}		if (Hist_Variable.hs.get("Handler") != null) {			sHandler = Hist_Variable.hs.get("Handler");		}		if (Hist_Variable.hs.get("Head") != null) {			sHead = Hist_Variable.hs.get("Head");		}		if (Hist_Variable.hs.get("Inqty") != null) {			sInqty = Hist_Variable.hs.get("Inqty");		}		if (!"".equals(Hist_Variable.hs.get("OP_INPUT")) && Hist_Variable.hs.get("OP_INPUT") != null) {			sOp_Input = Hist_Variable.hs.get("OP_INPUT");		}else{			sOp_Input = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT1")) && Hist_Variable.hs.get("OP_CAT1") != null) {			sOp_Cat1 = Hist_Variable.hs.get("OP_CAT1");		}else{			sOp_Cat1 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT2")) && Hist_Variable.hs.get("OP_CAT2") != null) {			sOp_Cat2 = Hist_Variable.hs.get("OP_CAT2");		}else{			sOp_Cat2 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT3")) && Hist_Variable.hs.get("OP_CAT3") != null) {			sOp_Cat3 = Hist_Variable.hs.get("OP_CAT3");		}else{			sOp_Cat3 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT4")) && Hist_Variable.hs.get("OP_CAT4") != null) {			sOp_Cat4 = Hist_Variable.hs.get("OP_CAT4");		}else{			sOp_Cat4 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT5")) && Hist_Variable.hs.get("OP_CAT5") != null) {			sOp_Cat5 = Hist_Variable.hs.get("OP_CAT5");		}else{			sOp_Cat5 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT6")) && Hist_Variable.hs.get("OP_CAT6") != null) {			sOp_Cat6 = Hist_Variable.hs.get("OP_CAT6");		}else{			sOp_Cat6 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT7")) && Hist_Variable.hs.get("OP_CAT7") != null) {			sOp_Cat7 = Hist_Variable.hs.get("OP_CAT7");		}else{			sOp_Cat7 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT8")) && Hist_Variable.hs.get("OP_CAT8") != null) {			sOp_Cat8 = Hist_Variable.hs.get("OP_CAT8");		}else{			sOp_Cat8 = "0";		}		Hist_Variable.Category_09 = 0;		if (!"".equals(Hist_Variable.hs.get("OP_CAT9")) && Hist_Variable.hs.get("OP_CAT9") != null) {			sOp_Cat9 = Hist_Variable.hs.get("OP_CAT9");			Hist_Variable.Category_09 = Integer.parseInt(Hist_Variable.hs.get("OP_CAT9"));		}else{			sOp_Cat9 = "0";			Hist_Variable.Category_09 = 0;		}		/*		 * 데이터파일에 HD_가 HP_로 된 데이터가 있기때문에 조건문으로 분기 HD_PASS는 없는것도 있기에 기본값이 0이 되어야		 * 되서 분기		 */		if (Hist_Variable.hs.containsKey("HD_INPUT")) {			sHd_Input = Hist_Variable.hs.get("HD_INPUT");		} else if (Hist_Variable.hs.containsKey("HP_INPUT")) {			sHd_Input = Hist_Variable.hs.get("HP_INPUT");		}else{			sHd_Input = "0";		}		if (Hist_Variable.hs.containsKey("HD_PASS")) {			sHd_Pass = Hist_Variable.hs.get("HD_PASS");		} else if (Hist_Variable.hs.containsKey("HP_PASS")) {			sHd_Pass = Hist_Variable.hs.get("HP_PASS");		} else{			sHd_Pass = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT1")) {			sHd_Cat1 = Hist_Variable.hs.get("HD_CAT1");		} else if(Hist_Variable.hs.containsKey("HP_CAT1")){			sHd_Cat1 = Hist_Variable.hs.get("HP_CAT1");		} else{			sHd_Cat1 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT2")) {			sHd_Cat2 = Hist_Variable.hs.get("HD_CAT2");		} else if(Hist_Variable.hs.containsKey("HP_CAT2")){			sHd_Cat2 = Hist_Variable.hs.get("HP_CAT2");		} else{			sHd_Cat2 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT3")) {			sHd_Cat3 = Hist_Variable.hs.get("HD_CAT3");		} else if(Hist_Variable.hs.containsKey("HP_CAT3")){			sHd_Cat3 = Hist_Variable.hs.get("HP_CAT3");		} else{			sHd_Cat3 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT4")) {			sHd_Cat4 = Hist_Variable.hs.get("HD_CAT4");		} else if(Hist_Variable.hs.containsKey("HP_CAT4")){			sHd_Cat4 = Hist_Variable.hs.get("HP_CAT4");		} else{			sHd_Cat4 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT5")) {			sHd_Cat5 = Hist_Variable.hs.get("HD_CAT5");		} else if(Hist_Variable.hs.containsKey("HP_CAT5")){			sHd_Cat5 = Hist_Variable.hs.get("HP_CAT5");		} else{			sHd_Cat5 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT6")) {			sHd_Cat6 = Hist_Variable.hs.get("HD_CAT6");		} else if(Hist_Variable.hs.containsKey("HP_CAT6")){			sHd_Cat6 = Hist_Variable.hs.get("HP_CAT6");		} else{			sHd_Cat6 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT7")) {			sHd_Cat7 = Hist_Variable.hs.get("HD_CAT7");		} else if(Hist_Variable.hs.containsKey("HP_CAT7")){			sHd_Cat7 = Hist_Variable.hs.get("HP_CAT7");		} else{			sHd_Cat7 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT8")) {			sHd_Cat8 = Hist_Variable.hs.get("HD_CAT8");		} else if(Hist_Variable.hs.containsKey("HP_CAT8")){			sHd_Cat8 = Hist_Variable.hs.get("HP_CAT8");		} else{			sHd_Cat8 = "0";		}		if (Hist_Variable.hs.get("Sub_Program") != null) {			sSub_Program = Hist_Variable.hs.get("Sub_Program");		}		if (Hist_Variable.hs.get("Operator") != null) {			sOperator = Hist_Variable.hs.get("Operator");		}		if (Hist_Variable.hs.get("PGMVER_START") != null) {			sPgmver_Start = Hist_Variable.hs.get("PGMVER_START");		}		if (Hist_Variable.hs.get("PGMVER_START") != null) {			sPgmver_End = Hist_Variable.hs.get("PGMVER_END");		}		if (Hist_Variable.hs.get("SBL_CODE") != null) {			sSbl_Code = Hist_Variable.hs.get("SBL_CODE");		}		if (Hist_Variable.hs.get("SBL_JUDGE") != null) {			sSbl_Judge = Hist_Variable.hs.get("SBL_JUDGE");		}		if (Hist_Variable.hs.get("LOTINMODE") != null) {			sLotinmode = Hist_Variable.hs.get("LOTINMODE");		}		if (Hist_Variable.hs.get("LOTOUTMODE") != null) {			sLotoutmode = Hist_Variable.hs.get("LOTOUTMODE");		}		if (Hist_Variable.hs.get("MLOTLIST") != null) {			sMlotlist = Hist_Variable.hs.get("MLOTLIST");		}		if (Hist_Variable.hs.get("SBL_CMD") != null && !Hist_Variable.hs.get("SBL_CMD").equals("")) {			sSbl_cmd = Hist_Variable.hs.get("SBL_CMD");		}		if (Hist_Variable.hs.get("RUN_SBL_CODE") != null && !Hist_Variable.hs.get("RUN_SBL_CODE").equals("")) {			sRun_sbl_code = Hist_Variable.hs.get("RUN_SBL_CODE");		}			if (Hist_Variable.hs.get("RUN_SBL_CMD") != null && !Hist_Variable.hs.get("RUN_SBL_CMD").equals("")) {			sRun_sbl_cmd = Hist_Variable.hs.get("RUN_SBL_CMD");		}							if(Hist_Variable.hs.get("HOS_A") != null){			sHOS_A = Hist_Variable.hs.get("HOS_A");					}		if(Hist_Variable.hs.get("HOS_B") != null){			sHOS_B = Hist_Variable.hs.get("HOS_B");					}		if(Hist_Variable.hs.get("TOS_OPSYS") != null){			sTOS_OPSYS = Hist_Variable.hs.get("TOS_OPSYS");					}		if(Hist_Variable.hs.get("TOS_ATL") != null){			sTOS_ATL = Hist_Variable.hs.get("TOS_ATL");					}		if(Hist_Variable.hs.get("TOS_DIAG") != null){			sTOS_DIAG = Hist_Variable.hs.get("TOS_DIAG");					}		if(Hist_Variable.hs.get("TOS_SYSOS") != null){			sTOS_SYSOS = Hist_Variable.hs.get("TOS_SYSOS");					}		if(Hist_Variable.hs.get("TOS_GPIB") != null){			sTOS_GPIB = Hist_Variable.hs.get("TOS_GPIB");					}		if(Hist_Variable.hs.get("TesterIF") != null){			sT_IF = Hist_Variable.hs.get("TesterIF");					}		if(Hist_Variable.hs.get("FSST_FLAG") != null){			sFsst_Flag = Hist_Variable.hs.get("FSST_FLAG");					}		//int Retest_head = Hist_Variable.Retest;		int Retest_head = 0;//		if(Retest_head > 0){//			for(int i = 0; i <= Hist_Variable.Retest; i++){//				if(Hist_Variable.Fe_Dut_Sort[i][0].equals("") && Hist_Variable.Retest > 0){//					Retest_head--;//				}//			}//		}		try {			for (int i = 0; i < 1; i++) {				sRetest_Cnt = "0" + Integer.toString(i);					String sResult ="";				sSQL = new StringBuffer();				sSQL.append("  SELECT COUNT(*) CNT FROM TEST_YIELD_HIST_ERR ");				sSQL.append("  WHERE ");				sSQL.append("  LOT_NUMBER='" + Hist_Variable.hs.get("LotId") + "' AND ");				sSQL.append("  PRODUCT_NAME='" + Hist_Variable.hs.get("ProductId") + "' AND ");				sSQL.append("  PROCESS_NAME='" + Hist_Variable.hs.get("ProcessId") + "' AND ");				//sSQL.append("  END_DATE='" + Hist_Variable.End_Date[i] + "' AND ");				sSQL.append("  RETEST_COUNT='" + sRetest_Cnt + "' ");				try {					sResult = GlobalDao.selectQuerys(sSQL.toString());				} catch (Exception ex) {					logger.error(ex.toString());				}				if (Integer.parseInt(sResult) > 0) {					sSQL = new StringBuffer();					sSQL.append("  DELETE FROM TEST_YIELD_HIST_ERR WHERE  ");					sSQL.append("  LOT_NUMBER='" + Hist_Variable.hs.get("LotId") + "' AND ");					sSQL.append("  PRODUCT_NAME='" + Hist_Variable.hs.get("ProductId") + "' AND ");					sSQL.append("  PROCESS_NAME='" + Hist_Variable.hs.get("ProcessId") + "' AND ");					//sSQL.append("  END_DATE='" + Hist_Variable.End_Date[i] + "' AND ");					sSQL.append("  RETEST_COUNT='" + sRetest_Cnt + "' ");					try {						GlobalDao.executeUpdate(sSQL.toString());					} catch (Exception ex) {						logger.error(ex.toString());					}				}				// **S**  2012.01.04 114,115,116 Column추가 반영				//Subbin값 중 114, 115, 116에 대한 값을 parsing하여 				//TEST_YIELD_HIST Table의 Subbin114, Subbin115, Sunbbin116 Column에 각각 Insert함				try{					String subBin = Hist_Variable.Fe_Dut_Sub[i][0] + Hist_Variable.Fe_Dut_Sub[i][1] ;					String finalSubBin = Hist_Variable.Fe_Dut_Sub[Retest_head][0] + Hist_Variable.Fe_Dut_Sub[Retest_head][1];					nSubBin114 = 0;					nSubBin115 = 0;					nSubBin116 = 0;										StringTokenizer subSt = new StringTokenizer(subBin, ",");					while(subSt.hasMoreTokens()){						String tokenBin =  subSt.nextToken();						String[] tokenSplit = tokenBin.split(":");						if( tokenSplit.length==2){							if( tokenBin.startsWith("114:") ){								try{ nSubBin114 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nSubBin114 = 0; }								continue;							}else if ( tokenBin.startsWith("115:") ){								try{ nSubBin115 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nSubBin115 = 0; }								continue;							}else if ( tokenBin.startsWith("116:") ){								try{ nSubBin116 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nSubBin116 = 0; }								continue;							}						}					}									if((nFinalSubBin114+nFinalSubBin115+nFinalSubBin116) == 0){						subSt = new StringTokenizer(finalSubBin, ",");						while(subSt.hasMoreTokens()){							String tokenBin =  subSt.nextToken();							String[] tokenSplit = tokenBin.split(":");							if( tokenSplit.length==2){								if( tokenBin.startsWith("114:") ){									try{ nFinalSubBin114 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nFinalSubBin114 = 0; }									continue;								}else if ( tokenBin.startsWith("115:") ){									try{ nFinalSubBin115 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nFinalSubBin115 = 0; }									continue;								}else if ( tokenBin.startsWith("116:") ){									try{ nFinalSubBin116 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nFinalSubBin116 = 0; }									continue;								}							}						}					}				}catch (Exception e) {					logger.error(e.toString());				}				// **E** 114,115,116 Column추가 반영				sSQL = new StringBuffer();				sFilal_Retest_Cnt = "0" + Integer.toString(Hist_Variable.Retest);				sEnd_date = Hist_Variable.End_Date[i] + Hist_Variable.End_Time[i];				sSQL.append(" INSERT INTO TEST_YIELD_HIST_ERR ( ");				sSQL.append(" SYS_DATE, LOT_NUMBER, PROCESS_NAME, PRODUCT_NAME, PROGRAM_NAME, "); //1~5				sSQL.append(" OPERATOR_NAME, TESTER_NAME, TESTER_NUMBER, TESTER_HEAD, HD_MODEL, "); //6~10				sSQL.append(" HD_TEMP, BOARD_ID, LINE, SITE, LOT_TYPE, "); //11~15				sSQL.append(" RETEST_COUNT, FINAL_RETEST_COUNT, YIELD, SIMAX_INQTY, TEST_COUNT, "); //16~20				sSQL.append(" PASS_COUNT, CATEGORY_01, CATEGORY_02, CATEGORY_03, CATEGORY_04, "); //21~25				sSQL.append(" CATEGORY_05, CATEGORY_06, CATEGORY_07, CATEGORY_08, CATEGORY_09, "); //26~30				sSQL.append(" START_DATE, START_TIME, END_DATE, END_TIME, EXECUTE_DATE, "); // 31~35				sSQL.append(" OP_INPUT, OP_CAT1, OP_CAT2, OP_CAT3, OP_CAT4, "); // 36~40				sSQL.append(" OP_CAT5, OP_CAT6, OP_CAT7, OP_CAT8, OP_CAT9, "); // 41~45				sSQL.append(" SORT_INPUT, SORT_01, SORT_02, SORT_03, SORT_04, "); // 46~50				sSQL.append(" SORT_05, SORT_06, SORT_07, SORT_08, HD_INPUT, "); // 51~55				sSQL.append(" HD_CAT1, HD_CAT2, HD_CAT3, HD_CAT4, HD_CAT5, "); // 56~60				sSQL.append(" HD_CAT6, HD_CAT7, HD_CAT8, CAT6_1, CAT6_2, "); // 61~65				sSQL.append(" CAT6_3, CAT6_4, CAT6_5, CAT7_1, CAT7_2, "); // 66~70				sSQL.append(" CAT7_3, CAT7_4, CAT7_5, REVNO, REVNO_END, "); // 71~75				sSQL.append(" LOTIN, LOTOUT, SUB_CNT1, SUB_CNT2, FINAL_SUB_CNT1, "); // 76~80				sSQL.append(" FINAL_SUB_CNT2, NG_CNT1, NG_CNT2, FINAL_NG_CNT1, FINAL_NG_CNT2, "); // 81~85				sSQL.append(" SUB_PROGRAM_NAME, INITIAL_BAD_BLOCK, FINAL_BAD_BLOCK, GAP_IBBFBB, M_LOT_LIST, "); // 86~90				sSQL.append(" RECYCLE_FLAG, SBL_CODE, SBL_JUDGE, "); // 91~95				sSQL.append(" DATA_FORMAT, SBL_CMD, RUN_SBL_CODE, RUN_SBL_CMD, "); // 106~111				sSQL.append(" H_OS_A, H_OS_B, T_OS_OPSYS, T_OS_ATL, T_OS_DIAG, T_OS_SYSOS, T_OS_GPIB, T_IF, FSST_FLAG, FR_LOT, "); // 112~120 , 121								//sSQL.append(" RECYCLE_STEP, RECYCLE_FLAG, SBL_CODE, SBL_JUDGE, MC_NCFCODE, "); // 91~95				//sSQL.append(" NCFCODE_SIMAX, NCACODE_SIMAX, NCECODE_SIMAX, NCQCODE_SIMAX, NCTCODE_SIMAX, "); // 96~100				//sSQL.append(" NCHCODE_SIMAX, NCMCODE_SIMAX, NCPCODE_SIMAX, NCSCODE_SIMAX, NCBCODE_SIMAX, "); // 101~105				//sSQL.append(" NCKCODE_SIMAX, NCRCODE_SIMAX, DATA_FORMAT, SBL_CMD, RUN_SBL_CODE, RUN_SBL_CMD, "); // 106~111				//sSQL.append(" H_OS_A, H_OS_B, T_OS_OPSYS, T_OS_ATL, T_OS_DIAG, T_OS_SYSOS, T_OS_GPIB, T_IF, FSST_FLAG, LOT_ASYSITE, FR_LOT, "); // 112~120 , 121				sSQL.append(" SUBBIN114, FINAL_SUBBIN114, SUBBIN115, FINAL_SUBBIN115, SUBBIN116, FINAL_SUBBIN116, PURPOSE_TYPE");				sSQL.append("  ) VALUES ");				if(!Hist_Variable.End_Date[i].equals("")){					sSQL.append(" ('" + sEnd_date + "', '"							+ Hist_Variable.hs.get("LotId") + "', '"							+ Hist_Variable.hs.get("ProcessId") + "', '"							+ Hist_Variable.hs.get("ProductId") + "', '"							+ Hist_Variable.hs.get("Program") + "', "); // 1 ~ 5				}else{					sSQL.append(" (CONVERT(VARCHAR(8), GETDATE(), 112) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(hh, getdate()))), 2) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(mi, getdate()))), 2) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(ss, getdate()))), 2), '"							+ Hist_Variable.hs.get("LotId") + "', '"							+ Hist_Variable.hs.get("ProcessId") + "', '"							+ Hist_Variable.hs.get("ProductId") + "', '"							+ Hist_Variable.hs.get("Program") + "', "); // 1 ~ 5				}				sSQL.append(" '" + sOperator + "', '" + Hist_Variable.hs.get("System") + "', '" + sTester + "', '" + sHead + "', '" + sHandler + "',"); // 6 ~ 10				sSQL.append(" '', '" + sBoard_id + "', '" + Hist_Variable.LineId + "', '" + Hist_Variable.Site + "', '" + sType + "', "); // 11 ~ 15				sSQL.append(" '" + sRetest_Cnt + "', '00', '" + decimal.format(Hist_Variable.Yield) + "', '" + sInqty + "', '" + Hist_Variable.Test_Count + "', "); // 16 ~ 20				//				sSQL.append(" '" + sRetest_Cnt + "', '" + sFilal_Retest_Cnt//						+ "', '" + decimal.format(Hist_Variable.Yield)//						+ "', '" + sInqty + "', '"//						+ Hist_Variable.Test_Count + "', "); // 16 ~ 20				sSQL.append(" '" + Hist_Variable.Pass_Count + "', '" + Hist_Variable.Category_01 + "', '" + Hist_Variable.Category_02 + "', '" + Hist_Variable.Category_03 + "', '"						+ Hist_Variable.Category_04 + "', "); // 21 ~ 25				sSQL.append(" '" + Hist_Variable.Category_05 + "', '"						+ Hist_Variable.Category_06 + "', '"						+ Hist_Variable.Category_07 + "', '"						+ Hist_Variable.Category_08 + "', '"						+ Hist_Variable.Category_09 + "', "); // 26 ~ 30				if(!Hist_Variable.End_Date[i].equals("")){					sSQL.append(" '" + Hist_Variable.Start_Date[i] + "', '"							+ Hist_Variable.Start_Time[i] + "', '"							+ Hist_Variable.End_Date[i] + "', '"							+ Hist_Variable.End_Time[i] + "', CONVERT(VARCHAR(8), GETDATE(), 112) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(hh, getdate()))), 2) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(mi, getdate()))), 2) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(ss, getdate()))), 2), "); // 31 ~  35				}else{					sSQL.append(" '" + Hist_Variable.Start_Date[i] + "', '"							+ Hist_Variable.Start_Time[i] + "', CONVERT(VARCHAR(8), GETDATE(), 112), replace(CONVERT(VARCHAR(8), GETDATE(), 8),':', ''),"							+ "CONVERT(VARCHAR(8), GETDATE(), 112) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(hh, getdate()))), 2) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(mi, getdate()))), 2) + right(N'0' + rtrim(CONVERT(nchar(2), datepart(ss, getdate()))), 2), "); // 31 ~  35				}				sSQL.append(" '" + sOp_Input + "', '" + sOp_Cat1 + "', '" + sOp_Cat2 + "', '" + sOp_Cat3 + "', '" + sOp_Cat4 + "', "); // 36 ~ 40				sSQL.append(" '" + sOp_Cat5 + "', '" + sOp_Cat6 + "', '" + sOp_Cat7 + "', '" + sOp_Cat8 + "', '" + sOp_Cat9 + "', "); // 41 ~ 45				if(Hist_Variable.Sort_Input[i] != null){					sSQL.append(" '" + Hist_Variable.Sort_Input[i] + "', '"							+ Hist_Variable.Fe_Dut_Sort[i][0] + "', '"							+ Hist_Variable.Fe_Dut_Sort[i][1] + "', '"							+ Hist_Variable.Fe_Dut_Sort[i][2] + "', '"							+ Hist_Variable.Fe_Dut_Sort[i][3] + "', "); // 46 ~  50				}else{					sSQL.append(" '0', '"							+ Hist_Variable.Fe_Dut_Sort[i][0] + "', '"							+ Hist_Variable.Fe_Dut_Sort[i][1] + "', '"							+ Hist_Variable.Fe_Dut_Sort[i][2] + "', '"							+ Hist_Variable.Fe_Dut_Sort[i][3] + "', "); // 46 ~  50				}				sSQL.append(" '" + Hist_Variable.Fe_Dut_Sort[i][4]						+ "', '" + Hist_Variable.Fe_Dut_Sort[i][5]						+ "', '" + Hist_Variable.Fe_Dut_Sort[i][6]						+ "', '" + Hist_Variable.Fe_Dut_Sort[i][7]						+ "', '" + Hist_Variable.hs.get("HD_INPUT")						+ "', "); // 51 ~ 55				sSQL.append(" '" + sHd_Cat1 + "', '" + sHd_Cat2 + "', '" + sHd_Cat3 + "', '" + sHd_Cat4 + "', '" + sHd_Cat5 + "', "); // 56 ~ 60				sSQL.append(" '" + sHd_Cat6 + "', '" + sHd_Cat7 + "', '" + sHd_Cat8 + "', '" + Hist_Variable.CATE[Retest_head][0] + "', '" + Hist_Variable.CATE[Retest_head][1] + "', "); // 61 ~ 65				sSQL.append(" '" + Hist_Variable.CATE[Retest_head][2] + "', '"								+ Hist_Variable.CATE[Retest_head][3] + "', '"								+ Hist_Variable.CATE[Retest_head][4] + "', '"								+ Hist_Variable.CATE[Retest_head][5] + "', '"								+ Hist_Variable.CATE[Retest_head][6] + "', "); // 66 ~ 70				sSQL.append(" '" + Hist_Variable.CATE[Retest_head][7] + "', '"								+ Hist_Variable.CATE[Retest_head][8] + "', '"								+ Hist_Variable.CATE[Retest_head][9] + "', '" + sPgmver_Start + "', '" + sPgmver_End + "', "); // 71 ~ 75				sSQL.append(" '" + sLotinmode + "', '" + Hist_Variable.hs.get("Tmode") + "', '"						+ Hist_Variable.Fe_Dut_Sub[i][0] + "', '"						+ Hist_Variable.Fe_Dut_Sub[i][1] + "', '"						+ Hist_Variable.Fe_Dut_Sub[Retest_head][0]						+ "', "); // 76 ~ 80				sSQL.append(" '" + Hist_Variable.Fe_Dut_Sub[Retest_head][1]								+ "', '" + Hist_Variable.Fe_Dut_Ng[i][0] + "', '" + Hist_Variable.Fe_Dut_Ng[i][1]								+ "', '" + Hist_Variable.Fe_Dut_Ng[Retest_head][0]								+ "', '" + Hist_Variable.Fe_Dut_Ng[Retest_head][1] + "', "); // 81 ~ 85				sSQL.append(" '" + sSub_Program + "', '" + dIbb + "', '" + dFbb + "', '" + Hist_Variable.dGap_IbbFbb + "', '" + sMlotlist + "', "); // 86 ~ 90				sSQL.append(" '" + sRecycle_Flag + "', '" + sSbl_Code + "', '" + sSbl_Judge + "', "); // 91 ~ 95				sSQL.append(" '" + Hist_Variable.sData_Format + "', '" + sSbl_cmd+"', '" + sRun_sbl_code+"', '" + sRun_sbl_cmd+"',"); // 106~111				sSQL.append(" '" + sHOS_A + "', '" + sHOS_B + "', '" + sTOS_OPSYS + "', '" + sTOS_ATL +"', '" + sTOS_DIAG +"', '" + sTOS_SYSOS +"', '" + sTOS_GPIB +"', '" + sT_IF +"', '" + sFsst_Flag +"'"); // 112~120				//sSQL.append(" '" + Hist_Variable.Recyclestep + "', '" + sRecycle_Flag + "', '" + sSbl_Code + "', '" + sSbl_Judge + "', '" + Hist_Variable.Mc_Ncf + "', "); // 91 ~ 95				//sSQL.append(" '" + Hist_Variable.NcfCode + "', '" + Hist_Variable.NcaCode + "', '" + Hist_Variable.NceCode + "', '" + Hist_Variable.NcqCode + "', '" + Hist_Variable.NctCode + "', "); // 96 ~ 100 				//sSQL.append(" '" + Hist_Variable.NchCode + "', '" + Hist_Variable.NcmCode + "', '" + Hist_Variable.NcpCode + "', '" + Hist_Variable.NcsCode + "', '" + Hist_Variable.NcbCode + "', "); // 101 ~ 105				//sSQL.append(" '" + Hist_Variable.NckCode + "', '" + Hist_Variable.NcrCode + "', '" + Hist_Variable.sData_Format + "', '" + sSbl_cmd+"', '" + sRun_sbl_code+"', '" + sRun_sbl_cmd+"',"); // 106~111				//sSQL.append(" '" + sHOS_A + "', '" + sHOS_B + "', '" + sTOS_OPSYS + "', '" + sTOS_ATL +"', '" + sTOS_DIAG +"', '" + sTOS_SYSOS +"', '" + sTOS_GPIB +"', '" + sT_IF +"', '" + sFsst_Flag +"', '" + Hist_Variable.Lot_asysite  +"'"); // 112~120								sSQL.append(" ,'" +Hist_Variable.FRLot+ "'" );// 121   FRLot Column 추가 반영				// 122  2012.01.04 114,115,116 Column추가 반영				sSQL.append(" ," +nSubBin114+ "" );				sSQL.append(" ," +nFinalSubBin114+ "" );				sSQL.append(" ," +nSubBin115+ "" );				sSQL.append(" ," +nFinalSubBin115+ "" );				sSQL.append(" ," +nSubBin116+ "" );				sSQL.append(" ," +nFinalSubBin116+ "" );				sSQL.append(" ,'" +sPurpose_Type+ "'" );									// **E** 2012.01.04 114,115,116 Column추가 반영 				sSQL.append(") "); 				size = GlobalDao.executeUpdate(sSQL.toString());				if(sTester.equals("ax03")){					logger.info(sSQL.toString());				}				logger.info("[SMART_TEST_YIELD_HIST_" + sRetest_Cnt + " Insert Start.]");			}			logger.info("[Insert Data End]");			if (size > -1) {				/* 정상적으로 Insert 됐을때 데이터 파일을 이동시킨다. */				String[] file_split = Hist_Variable.Dut_Date[0][2].split("/");				String sMonth = Utils.getDate("MM", 0);				if(file_split.length > 1) {					sMonth = file_split[1];				}				FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conFormat") + "/" + sMonth + "Data");				File f = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFile);				File sNew_File = SmtOscar_Hist_FileCheck.File_Rename(f, sEnd_date, sFilal_Retest_Cnt);				logger.error("[FORMAT ERROR]" + sNew_File.getName());				File cp_File = new File(FileMoveUtil.getDirpath("conFormat") + "/" + sMonth + "Data/" + sNew_File.getName());				FileMoveUtil.copyFile(sNew_File,cp_File);				sNew_File.delete();				logger.info("[FileMove] SUCCESS \n\n");			}		} catch (Exception ex) {			logger.error(ex.toString());			/* Insert시 에러가 있을경우 파일을 Insert 폴더로 이동시킨다. */			FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conInsert") + "/" + Utils.getDate("MM", 0) + "Data");			File fFileName = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFile);			try {				Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");			} catch (IOException e) {				logger.error(e.toString());			}			FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conInsert") + "/" + Utils.getDate("MM", 0) + "Data");			File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");			FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conInsert") + "/" + Utils.getDate("MM", 0) + "Data/");			logger.error("[Insert_Test_Hist Error]Insert Directory Move \n");		}	}			/* 데이터를 PKG_Test_History Table에 Insert 시킨다. */	public void Insert_Test_History(String sFile) {		DecimalFormat decimal = new DecimalFormat("##.##");		NumberFormat fmt = NumberFormat.getInstance();		StringBuffer sSQL = new StringBuffer();		fmt.setMinimumFractionDigits(2);		double dFbbIbb;		double dFbbEbb;		int size = -1;		String sEnd_date = "";		String sTester = "";		String sHandler = "";		String sHead = "";		String sRetest_Cnt = "";		String sBoard_id ="";		String sFilal_Retest_Cnt = "";		String sInqty = "";		String sOp_Input = "";		String sOp_Cat1 = "";		String sOp_Cat2 = "";		String sOp_Cat3 = "";		String sOp_Cat4 = "";		String sOp_Cat5 = "";		String sOp_Cat6 = "";		String sOp_Cat7 = "";		String sOp_Cat8 = "";		String sOp_Cat9 = "";		String sHd_Input = "";		String sHd_Pass = "";		String sHd_Cat1 = "";		String sHd_Cat2 = "";		String sHd_Cat3 = "";		String sHd_Cat4 = "";		String sHd_Cat5 = "";		String sHd_Cat6 = "";		String sHd_Cat7 = "";		String sHd_Cat8 = "";		String sSub_Program = "";		String sOperator = "";		String sPgmver_Start = "";		String sPgmver_End = "";		String sType = "";		String sSbl_Code = "";		String sSbl_Judge = "";		String sLotinmode = "";		String sLotoutmode = "";		String sMlotlist = "";		String dFbb = "";		String dIbb = "";		String dEbb = "" ;		String sSbl_cmd = "";		String sRun_sbl_code = "";		String sRun_sbl_cmd = "";		String sRecycle_Flag = "Y";		String sHOS_A = "";		String sHOS_B = "";		String sTOS_OPSYS = "";		String sTOS_ATL = "";		String sTOS_DIAG = "";		String sTOS_SYSOS = "";		String sTOS_GPIB = "";		String sT_IF = "";		String sFsst_Flag = "";		String sRework_flag = ""; // 2012 10 10   Rework_flag		int nSubBin114 = 0;		int nSubBin115 = 0;		int nSubBin116 = 0;		int nFinalSubBin114 = 0;		int nFinalSubBin115 = 0;		int nFinalSubBin116 = 0;				//2013.07.03 Bongjun Park Add		String sPurpose_Type = "";				if (Hist_Variable.hs.get("Purpose_Type") != null) {			sPurpose_Type = Hist_Variable.hs.get("Purpose_Type");		}				if(Hist_Variable.Site.equals("STS")||Hist_Variable.Site.equals("SIGNETICS")){			sType = Hist_Variable.hs.get("Type");		}else{			if(Hist_Variable.hs.get("ProcessId").substring(0,1).equals("T")){				sType = Lot_type;				}else{				sType = Hist_Variable.hs.get("Type");			}		}		// Recyclestep과 ProcessId앞4자리가 같지 않으면 Recycle_Flag는 'N'이다./*		if(Hist_Variable.Recyclestep != null){			if (!Hist_Variable.Recyclestep.equals(Hist_Variable.hs.get("ProcessId").substring(0, 4))) {				sRecycle_Flag = "N";			}		}*/		if(Hist_Variable.hs.get("Board_id") != null && !Hist_Variable.hs.get("Board_id").equals("")){			sBoard_id = Hist_Variable.hs.get("Board_id");		}else{			sBoard_id = "-";		}		if (Hist_Variable.hs.get("FBB") != null && Hist_Variable.hs.get("IBB") != null) {			dFbbIbb = Double.parseDouble(Hist_Variable.hs.get("FBB")) - Double.parseDouble(Hist_Variable.hs.get("IBB"));			Hist_Variable.dGap_IbbFbb = fmt.format(dFbbIbb);			dIbb = Hist_Variable.hs.get("IBB");			dFbb = Hist_Variable.hs.get("FBB");		} else {			Hist_Variable.dGap_IbbFbb = "";		}		if (!"".equals(Hist_Variable.hs.get("EBB")) && Hist_Variable.hs.get("EBB") != null) {			dFbbEbb = Double.parseDouble(Hist_Variable.hs.get("FBB")) - Double.parseDouble(Hist_Variable.hs.get("EBB"));			Hist_Variable.dGap_EbbFbb = Double.toString(dFbbEbb);			//Hist_Variable.dGap_EbbFbb = fmt.format(dFbbEbb);			dEbb = Hist_Variable.hs.get("EBB");		} else {			Hist_Variable.dGap_EbbFbb = "";		}				if (!"".equals(Hist_Variable.hs.get("Tester")) && Hist_Variable.hs.get("Tester") != null) {			sTester = Hist_Variable.hs.get("Tester");		}		if (!"".equals(Hist_Variable.hs.get("Handler")) && Hist_Variable.hs.get("Handler") != null) {			sHandler = Hist_Variable.hs.get("Handler");		}		if (!"".equals(Hist_Variable.hs.get("Head")) && Hist_Variable.hs.get("Head") != null) {			sHead = Hist_Variable.hs.get("Head");		}		if (!"".equals(Hist_Variable.hs.get("Inqty")) && Hist_Variable.hs.get("Inqty") != null) {			sInqty = Hist_Variable.hs.get("Inqty");		}		if (!"".equals(Hist_Variable.hs.get("OP_INPUT")) && Hist_Variable.hs.get("OP_INPUT") != null) {			sOp_Input = Hist_Variable.hs.get("OP_INPUT");		}else{			sOp_Input = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT1")) && Hist_Variable.hs.get("OP_CAT1") != null) {			sOp_Cat1 = Hist_Variable.hs.get("OP_CAT1");		}else{			sOp_Cat1 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT2")) && Hist_Variable.hs.get("OP_CAT2") != null) {			sOp_Cat2 = Hist_Variable.hs.get("OP_CAT2");		}else{			sOp_Cat2 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT3")) && Hist_Variable.hs.get("OP_CAT3") != null) {			sOp_Cat3 = Hist_Variable.hs.get("OP_CAT3");		}else{			sOp_Cat3 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT4")) && Hist_Variable.hs.get("OP_CAT4") != null) {			sOp_Cat4 = Hist_Variable.hs.get("OP_CAT4");		}else{			sOp_Cat4 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT5")) && Hist_Variable.hs.get("OP_CAT5") != null) {			sOp_Cat5 = Hist_Variable.hs.get("OP_CAT5");		}else{			sOp_Cat5 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT6")) && Hist_Variable.hs.get("OP_CAT6") != null) {			sOp_Cat6 = Hist_Variable.hs.get("OP_CAT6");		}else{			sOp_Cat6 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT7")) && Hist_Variable.hs.get("OP_CAT7") != null) {			sOp_Cat7 = Hist_Variable.hs.get("OP_CAT7");		}else{			sOp_Cat7 = "0";		}		if (!"".equals(Hist_Variable.hs.get("OP_CAT8")) && Hist_Variable.hs.get("OP_CAT8") != null) {			sOp_Cat8 = Hist_Variable.hs.get("OP_CAT8");		}else{			sOp_Cat8 = "0";		}		Hist_Variable.Category_09 = 0;		if (!"".equals(Hist_Variable.hs.get("OP_CAT9")) && Hist_Variable.hs.get("OP_CAT9") != null) {			sOp_Cat9 = Hist_Variable.hs.get("OP_CAT9");			Hist_Variable.Category_09 = Integer.parseInt(Hist_Variable.hs.get("OP_CAT9"));		}else{			sOp_Cat9 = "0";			Hist_Variable.Category_09 = 0;		}		/*		 * 데이터파일에 HD_가 HP_로 된 데이터가 있기때문에 조건문으로 분기 HD_PASS는 없는것도 있기에 기본값이 0이 되어야		 * 되서 분기		 */		if (Hist_Variable.hs.containsKey("HD_INPUT")) {			sHd_Input = Hist_Variable.hs.get("HD_INPUT");		} else if (Hist_Variable.hs.containsKey("HP_INPUT")) {			sHd_Input = Hist_Variable.hs.get("HP_INPUT");		}else{			sHd_Input = "0";		}		if (Hist_Variable.hs.containsKey("HD_PASS")) {			sHd_Pass = Hist_Variable.hs.get("HD_PASS");		} else if (Hist_Variable.hs.containsKey("HP_PASS")) {			sHd_Pass = Hist_Variable.hs.get("HP_PASS");		} else{			sHd_Pass = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT1")) {			sHd_Cat1 = Hist_Variable.hs.get("HD_CAT1");		} else if(Hist_Variable.hs.containsKey("HP_CAT1")){			sHd_Cat1 = Hist_Variable.hs.get("HP_CAT1");		} else{			sHd_Cat1 = "0";		}				if (Hist_Variable.hs.containsKey("HD_CAT2")) {			sHd_Cat2 = Hist_Variable.hs.get("HD_CAT2");		} else if(Hist_Variable.hs.containsKey("HP_CAT2")){			sHd_Cat2 = Hist_Variable.hs.get("HP_CAT2");		} else{			sHd_Cat2 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT3")) {			sHd_Cat3 = Hist_Variable.hs.get("HD_CAT3");		} else if(Hist_Variable.hs.containsKey("HP_CAT3")){			sHd_Cat3 = Hist_Variable.hs.get("HP_CAT3");		} else{			sHd_Cat3 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT4")) {			sHd_Cat4 = Hist_Variable.hs.get("HD_CAT4");		} else if(Hist_Variable.hs.containsKey("HP_CAT4")){			sHd_Cat4 = Hist_Variable.hs.get("HP_CAT4");		} else{			sHd_Cat4 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT5")) {			sHd_Cat5 = Hist_Variable.hs.get("HD_CAT5");		} else if(Hist_Variable.hs.containsKey("HP_CAT5")){			sHd_Cat5 = Hist_Variable.hs.get("HP_CAT5");		} else{			sHd_Cat5 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT6")) {			sHd_Cat6 = Hist_Variable.hs.get("HD_CAT6");		} else if(Hist_Variable.hs.containsKey("HP_CAT6")){			sHd_Cat6 = Hist_Variable.hs.get("HP_CAT6");		} else{			sHd_Cat6 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT7")) {			sHd_Cat7 = Hist_Variable.hs.get("HD_CAT7");		} else if(Hist_Variable.hs.containsKey("HP_CAT7")){			sHd_Cat7 = Hist_Variable.hs.get("HP_CAT7");		} else{			sHd_Cat7 = "0";		}		if (Hist_Variable.hs.containsKey("HD_CAT8")) {			sHd_Cat8 = Hist_Variable.hs.get("HD_CAT8");		} else if(Hist_Variable.hs.containsKey("HP_CAT8")){			sHd_Cat8 = Hist_Variable.hs.get("HP_CAT8");		} else{			sHd_Cat8 = "0";		}		if (Hist_Variable.hs.get("Sub_Program") != null) {			sSub_Program = Hist_Variable.hs.get("Sub_Program");		}		if (Hist_Variable.hs.get("Operator") != null) {			sOperator = Hist_Variable.hs.get("Operator");		}		if (Hist_Variable.hs.get("PGMVER_START") != null) {			sPgmver_Start = Hist_Variable.hs.get("PGMVER_START");		}		if (Hist_Variable.hs.get("PGMVER_START") != null) {			sPgmver_End = Hist_Variable.hs.get("PGMVER_END");		}		if (Hist_Variable.hs.get("SBL_CODE") != null) {			sSbl_Code = Hist_Variable.hs.get("SBL_CODE");		}		if (Hist_Variable.hs.get("SBL_JUDGE") != null) {			sSbl_Judge = Hist_Variable.hs.get("SBL_JUDGE");		}		if (Hist_Variable.hs.get("LOTINMODE") != null) {			sLotinmode = Hist_Variable.hs.get("LOTINMODE");		}		if (Hist_Variable.hs.get("LOTOUTMODE") != null) {			sLotoutmode = Hist_Variable.hs.get("LOTOUTMODE");		}		if (Hist_Variable.hs.get("MLOTLIST") != null) {			sMlotlist = Hist_Variable.hs.get("MLOTLIST");		}		if (Hist_Variable.hs.get("SBL_CMD") != null && !Hist_Variable.hs.get("SBL_CMD").equals("")) {			sSbl_cmd = Hist_Variable.hs.get("SBL_CMD");		}		if (Hist_Variable.hs.get("RUN_SBL_CODE") != null && !Hist_Variable.hs.get("RUN_SBL_CODE").equals("")) {			sRun_sbl_code = Hist_Variable.hs.get("RUN_SBL_CODE");		}			if (Hist_Variable.hs.get("RUN_SBL_CMD") != null && !Hist_Variable.hs.get("RUN_SBL_CMD").equals("")) {			sRun_sbl_cmd = Hist_Variable.hs.get("RUN_SBL_CMD");		}					if(Hist_Variable.hs.get("HOS_A") != null){			sHOS_A = Hist_Variable.hs.get("HOS_A");					}		if(Hist_Variable.hs.get("HOS_B") != null){			sHOS_B = Hist_Variable.hs.get("HOS_B");					}		if(Hist_Variable.hs.get("TOS_OPSYS") != null){			sTOS_OPSYS = Hist_Variable.hs.get("TOS_OPSYS");					}		if(Hist_Variable.hs.get("TOS_ATL") != null){			sTOS_ATL = Hist_Variable.hs.get("TOS_ATL");					}		if(Hist_Variable.hs.get("TOS_DIAG") != null){			sTOS_DIAG = Hist_Variable.hs.get("TOS_DIAG");					}		if(Hist_Variable.hs.get("TOS_SYSOS") != null){			sTOS_SYSOS = Hist_Variable.hs.get("TOS_SYSOS");					}		if(Hist_Variable.hs.get("TOS_GPIB") != null){			sTOS_GPIB = Hist_Variable.hs.get("TOS_GPIB");					}		if(Hist_Variable.hs.get("TesterIF") != null){			sT_IF = Hist_Variable.hs.get("TesterIF");					}		if(Hist_Variable.hs.get("FSST_FLAG") != null){			sFsst_Flag = Hist_Variable.hs.get("FSST_FLAG");					}		int Retest_head = Hist_Variable.Retest;		for(int i = 0; i <= Hist_Variable.Retest; i++){			if(Hist_Variable.Fe_Dut_Sort[i][0].equals("") && Hist_Variable.Retest > 0){				Retest_head--;			}		}		try {			for (int i = 0; i <= Retest_head; i++) {				sRework_flag = "";				sRetest_Cnt = "0" + Integer.toString(i);					String sResult ="";				sSQL = new StringBuffer();				/*				 *  Rework된 Lot의 경우 해당 Data가 Rework데이터인지 원 Data인지에 대한 구분이 불명확하여 구분을 위해 처리로직을 변경 				 */					//sSQL.append("  SELECT COUNT(*) CNT FROM SMART_TEST_YIELD_HIST ");				sSQL.append("  SELECT NVL(END_TIME,'N') CNT FROM TEST_YIELD_HIST ");				sSQL.append("  WHERE ");				sSQL.append("  LOT_NUMBER='" + Hist_Variable.hs.get("LotId") + "' AND ");				sSQL.append("  PRODUCT_NAME='" + Hist_Variable.hs.get("ProductId") + "' AND ");				sSQL.append("  PROCESS_NAME='" + Hist_Variable.hs.get("ProcessId") + "' AND ");				sSQL.append("  END_DATE='" + Hist_Variable.End_Date[i] + "' AND ");				sSQL.append("  RETEST_COUNT='" + sRetest_Cnt + "' ");					try {					sResult = GlobalDao.selectQuerys(sSQL.toString());					if( sResult == null || sResult.equals("null")) {						sResult = "";					}				} catch (Exception ex) {					logger.error(ex.toString());				}				/*				 * Rework된 Lot의 경우 해당 Data가 Rework데이터인지 원 Data인지에 대한 구분이 불명확하여 구분을 위해 처리로직을 변경 				 */					//if (Integer.parseInt(sResult) > 0) {				//if( sResult != null && !sResult.equals("N")){				try {									if( sResult != null && sResult.length() > 2 ){						sSQL = new StringBuffer();						sSQL.append("  DELETE FROM TEST_YIELD_HIST WHERE  ");						sSQL.append("  LOT_NUMBER='" + Hist_Variable.hs.get("LotId") + "' AND ");						sSQL.append("  PRODUCT_NAME='" + Hist_Variable.hs.get("ProductId") + "' AND ");						sSQL.append("  PROCESS_NAME='" + Hist_Variable.hs.get("ProcessId") + "' AND ");						sSQL.append("  END_DATE='" + Hist_Variable.End_Date[i] + "' AND ");						sSQL.append("  RETEST_COUNT='" + sRetest_Cnt + "' ");							GlobalDao.executeUpdate(sSQL.toString());					}				} catch (Exception ex) {					logger.error(ex.toString());				}								/*				 * Rework된 Lot의 경우 해당 Data가 Rework데이터인지 원 Data인지에 대한 구분이 불명확하여 구분을 위해 처리로직을 변경				 * LOTOUTMODE가 SMANUAL인 경우, Rework_flag Column에 "TEND"로 입력				 * 이전 데이터와 현재 데이터의 end_time이 다를 경우, Rework_flag Column에 "REWORK"으로 입력 				 */				if(sLotoutmode.equals("SMANUAL")){					sRework_flag = "TEND";				}				if(!sResult.equals("") && !sResult.equals(Hist_Variable.End_Time[i])){					//Utils.makeLog(" sResult(END_TIME) = "+sResult + " / Now EndTime = " + Hist_Variable.End_Time[i] ,Hist_Variable.sData_Format + "_Yield_Hist");					if(sRework_flag.equals("TEND")){						sRework_flag = sRework_flag +",";					}					sRework_flag = sRework_flag+"REWORK";				}				// **S**  2012.01.04 114,115,116 Column추가 반영				//Subbin값 중 114, 115, 116에 대한 값을 parsing하여 				//SMART_TEST_YIELD_HIST Table의 Subbin114, Subbin115, Sunbbin116 Column에 각각 Insert함				try{					String subBin = Hist_Variable.Fe_Dut_Sub[i][0] + Hist_Variable.Fe_Dut_Sub[i][1] ;					String finalSubBin = Hist_Variable.Fe_Dut_Sub[Retest_head][0] + Hist_Variable.Fe_Dut_Sub[Retest_head][1];					nSubBin114 = 0;					nSubBin115 = 0;					nSubBin116 = 0;					StringTokenizer subSt = new StringTokenizer(subBin, ",");					while(subSt.hasMoreTokens()){						String tokenBin =  subSt.nextToken();						String[] tokenSplit = tokenBin.split(":");						if( tokenSplit.length==2){							if( tokenBin.startsWith("114:") ){								try{ nSubBin114 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nSubBin114 = 0; }								continue;							}else if ( tokenBin.startsWith("115:") ){								try{ nSubBin115 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nSubBin115 = 0; }								continue;							}else if ( tokenBin.startsWith("116:") ){								try{ nSubBin116 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nSubBin116 = 0; }								continue;							}						}					}					if((nFinalSubBin114+nFinalSubBin115+nFinalSubBin116) == 0){						subSt = new StringTokenizer(finalSubBin, ",");						while(subSt.hasMoreTokens()){							String tokenBin =  subSt.nextToken();							String[] tokenSplit = tokenBin.split(":");							if( tokenSplit.length==2){								if( tokenBin.startsWith("114:") ){									try{ nFinalSubBin114 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nFinalSubBin114 = 0; }									continue;								}else if ( tokenBin.startsWith("115:") ){									try{ nFinalSubBin115 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nFinalSubBin115 = 0; }									continue;								}else if ( tokenBin.startsWith("116:") ){									try{ nFinalSubBin116 = Integer.parseInt(tokenSplit[1]);}catch(NullPointerException e) { nFinalSubBin116 = 0; }									continue;								}							}						}					}				}catch (Exception e) {					logger.error(e.toString());				}				// **E** 114,115,116 Column추가 반영				sSQL = new StringBuffer();				sFilal_Retest_Cnt = "0" + Integer.toString(Hist_Variable.Retest);				sEnd_date = Hist_Variable.End_Date[i] + Hist_Variable.End_Time[i];				sSQL.append(" INSERT INTO TEST_YIELD_HIST ( ");				sSQL.append(" SYS_DATE, LOT_NUMBER, PROCESS_NAME, PRODUCT_NAME, PROGRAM_NAME, "); //1~5				sSQL.append(" OPERATOR_NAME, TESTER_NAME, TESTER_NUMBER, TESTER_HEAD, HD_MODEL, "); //6~10				sSQL.append(" HD_TEMP, BOARD_ID, LINE, SITE, LOT_TYPE, "); //11~15				sSQL.append(" RETEST_COUNT, FINAL_RETEST_COUNT, YIELD, SIMAX_INQTY, TEST_COUNT, "); //16~20				sSQL.append(" PASS_COUNT, CATEGORY_01, CATEGORY_02, CATEGORY_03, CATEGORY_04, "); //21~25				sSQL.append(" CATEGORY_05, CATEGORY_06, CATEGORY_07, CATEGORY_08, CATEGORY_09, "); //26~30				sSQL.append(" START_DATE, START_TIME, END_DATE, END_TIME, EXECUTE_DATE, "); // 31~35				sSQL.append(" OP_INPUT, OP_CAT1, OP_CAT2, OP_CAT3, OP_CAT4, "); // 36~40				sSQL.append(" OP_CAT5, OP_CAT6, OP_CAT7, OP_CAT8, OP_CAT9, "); // 41~45				sSQL.append(" SORT_INPUT, SORT_01, SORT_02, SORT_03, SORT_04, "); // 46~50				sSQL.append(" SORT_05, SORT_06, SORT_07, SORT_08, HD_INPUT, "); // 51~55				sSQL.append(" HD_CAT1, HD_CAT2, HD_CAT3, HD_CAT4, HD_CAT5, "); // 56~60				sSQL.append(" HD_CAT6, HD_CAT7, HD_CAT8, CAT6_1, CAT6_2, "); // 61~65				sSQL.append(" CAT6_3, CAT6_4, CAT6_5, CAT7_1, CAT7_2, "); // 66~70				sSQL.append(" CAT7_3, CAT7_4, CAT7_5, REVNO, REVNO_END, "); // 71~75				sSQL.append(" LOTIN, LOTOUT, SUB_CNT1, SUB_CNT2, FINAL_SUB_CNT1, "); // 76~80				sSQL.append(" FINAL_SUB_CNT2, NG_CNT1, NG_CNT2, FINAL_NG_CNT1, FINAL_NG_CNT2, "); // 81~85				sSQL.append(" SUB_PROGRAM_NAME, INITIAL_BAD_BLOCK, FINAL_BAD_BLOCK, GAP_IBBFBB, M_LOT_LIST, "); // 86~90				sSQL.append(" RECYCLE_FLAG, SBL_CODE, SBL_JUDGE,  "); // 91~95				sSQL.append(" DATA_FORMAT, SBL_CMD, RUN_SBL_CODE, RUN_SBL_CMD, "); // 106~111				sSQL.append(" H_OS_A, H_OS_B, T_OS_OPSYS, T_OS_ATL, T_OS_DIAG, T_OS_SYSOS, T_OS_GPIB, T_IF, FSST_FLAG, "); // 112~121				//sSQL.append(" RECYCLE_STEP, RECYCLE_FLAG, SBL_CODE, SBL_JUDGE, MC_NCFCODE, "); // 91~95				//sSQL.append(" NCFCODE_SIMAX, NCACODE_SIMAX, NCECODE_SIMAX, NCQCODE_SIMAX, NCTCODE_SIMAX, "); // 96~100				//sSQL.append(" NCHCODE_SIMAX, NCMCODE_SIMAX, NCPCODE_SIMAX, NCSCODE_SIMAX, NCBCODE_SIMAX, "); // 101~105				//sSQL.append(" NCKCODE_SIMAX, NCRCODE_SIMAX, DATA_FORMAT, SBL_CMD, RUN_SBL_CODE, RUN_SBL_CMD, "); // 106~111				//sSQL.append(" H_OS_A, H_OS_B, T_OS_OPSYS, T_OS_ATL, T_OS_DIAG, T_OS_SYSOS, T_OS_GPIB, T_IF, FSST_FLAG, LOT_ASYSITE, "); // 112~121				sSQL.append(" EDS_BAD_BLOCK, GAP_EBBFBB, FR_LOT, "); // 122~123, 124				sSQL.append(" SUBBIN114, FINAL_SUBBIN114, SUBBIN115, FINAL_SUBBIN115, SUBBIN116, FINAL_SUBBIN116 "); // 125~130				sSQL.append(" ,REWORK_FLAG");				sSQL.append(" ,TEST_LINE");				sSQL.append(" ,PURPOSE_TYPE");				sSQL.append(") VALUES ");				sSQL.append(" ('" + sEnd_date + "', '"						+ Hist_Variable.hs.get("LotId") + "', '"						+ Hist_Variable.hs.get("ProcessId") + "', '"						+ Hist_Variable.hs.get("ProductId") + "', '"						+ Hist_Variable.hs.get("Program") + "', "); // 1 ~ 5				sSQL.append(" '" + sOperator + "', '"						+ Hist_Variable.hs.get("System") + "', '"						+ sTester + "', '" + sHead + "', '" + sHandler + "',"); // 6 ~ 10				// sSQL.append(" '"+HD_TEMP+"', '"+Oscar_Hist_Variable.hs.get("BoardId")+"', '"+LINE+"', '"+Oscar_Hist_Variable.hs.get("Site")+"', '"+sType+"', ");				// // 11 ~ 15				sSQL.append(" '', '" + sBoard_id						+ "', '" + Hist_Variable.LineId + "', '"						+ Hist_Variable.Site + "', '" + sType + "', "); // 11 ~ 15				sSQL.append(" '" + sRetest_Cnt + "', '" + sFilal_Retest_Cnt						+ "', '" + decimal.format(Hist_Variable.Yield)						+ "', '" + sInqty + "', '"						+ Hist_Variable.Test_Count + "', "); // 16 ~ 20				sSQL.append(" '" + Hist_Variable.Pass_Count + "', '"						+ Hist_Variable.Category_01 + "', '"						+ Hist_Variable.Category_02 + "', '"						+ Hist_Variable.Category_03 + "', '"						+ Hist_Variable.Category_04 + "', "); // 21 ~ 25				sSQL.append(" '" + Hist_Variable.Category_05 + "', '"						+ Hist_Variable.Category_06 + "', '"						+ Hist_Variable.Category_07 + "', '"						+ Hist_Variable.Category_08 + "', '"						+ Hist_Variable.Category_09 + "', "); // 26 ~ 30				sSQL.append(" '" + Hist_Variable.Start_Date[i] + "', '"						+ Hist_Variable.Start_Time[i] + "', '"						+ Hist_Variable.End_Date[i] + "', '"						+ Hist_Variable.End_Time[i] + "', TO_CHAR(SYSDATE,'YYYYMMDDHH24MISS'), "); // 31 ~				// 35				sSQL.append(" '" + sOp_Input + "', '" + sOp_Cat1 + "', '"						+ sOp_Cat2 + "', '" + sOp_Cat3 + "', '" + sOp_Cat4						+ "', "); // 36 ~ 40				sSQL.append(" '" + sOp_Cat5 + "', '" + sOp_Cat6 + "', '"						+ sOp_Cat7 + "', '" + sOp_Cat8 + "', '" + sOp_Cat9						+ "', "); // 41 ~ 45				sSQL.append(" '" + Hist_Variable.Sort_Input[i] + "', '"						+ Hist_Variable.Fe_Dut_Sort[i][0] + "', '"					+ Hist_Variable.Fe_Dut_Sort[i][1] + "', '"						+ Hist_Variable.Fe_Dut_Sort[i][2] + "', '"						+ Hist_Variable.Fe_Dut_Sort[i][3] + "', "); // 46 ~  50				sSQL.append(" '" + Hist_Variable.Fe_Dut_Sort[i][4]						+ "', '" + Hist_Variable.Fe_Dut_Sort[i][5]						+ "', '" + Hist_Variable.Fe_Dut_Sort[i][6]						+ "', '" + Hist_Variable.Fe_Dut_Sort[i][7]						+ "', '" + Hist_Variable.hs.get("HD_INPUT")						+ "', "); // 51 ~ 55				sSQL.append(" '" + sHd_Cat1 + "', '" + sHd_Cat2 + "', '"						+ sHd_Cat3 + "', '" + sHd_Cat4 + "', '" + sHd_Cat5						+ "', "); // 56 ~ 60				sSQL.append(" '"								+ sHd_Cat6								+ "', '"								+ sHd_Cat7								+ "', '"								+ sHd_Cat8								+ "', '"								+ Hist_Variable.CATE[Retest_head][0]								+ "', '"								+ Hist_Variable.CATE[Retest_head][1]								+ "', "); // 61 ~ 65				sSQL.append(" '"								+ Hist_Variable.CATE[Retest_head][2]								+ "', '"								+ Hist_Variable.CATE[Retest_head][3]								+ "', '"								+ Hist_Variable.CATE[Retest_head][4]								+ "', '"								+ Hist_Variable.CATE[Retest_head][5]								+ "', '"								+ Hist_Variable.CATE[Retest_head][6]								+ "', "); // 66 ~ 70				sSQL.append(" '"								+ Hist_Variable.CATE[Retest_head][7]								+ "', '"								+ Hist_Variable.CATE[Retest_head][8]								+ "', '"								+ Hist_Variable.CATE[Retest_head][9]								+ "', '" + sPgmver_Start + "', '" + sPgmver_End								+ "', "); // 71 ~ 75				sSQL.append(" '" + sLotinmode + "', '" + Hist_Variable.hs.get("Tmode") + "', '"					+ Hist_Variable.Fe_Dut_Sub[i][0] + "', '"						+ Hist_Variable.Fe_Dut_Sub[i][1] + "', '"						+ Hist_Variable.Fe_Dut_Sub[Retest_head][0]						+ "', "); // 76 ~ 80				sSQL.append(" '"								+ Hist_Variable.Fe_Dut_Sub[Retest_head][1]								+ "', '" + Hist_Variable.Fe_Dut_Ng[i][0]								+ "', '" + Hist_Variable.Fe_Dut_Ng[i][1]								+ "', '"								+ Hist_Variable.Fe_Dut_Ng[Retest_head][0]								+ "', '"								+ Hist_Variable.Fe_Dut_Ng[Retest_head][1]								+ "', "); // 81 ~ 85				sSQL.append(" '" + sSub_Program + "', '" + dIbb + "', '" + dFbb						+ "', '" + Hist_Variable.dGap_IbbFbb + "', '"						+ sMlotlist + "', "); // 86 ~ 90				sSQL.append(" '" + sRecycle_Flag + "', '" + sSbl_Code + "', '" + sSbl_Judge + "', "); // 91 ~ 95				sSQL.append(" '" + Hist_Variable.sData_Format + "', '" + sSbl_cmd+"', '" + sRun_sbl_code+"', '" + sRun_sbl_cmd+"',"); // 106~111				sSQL.append(" '" + sHOS_A + "', '" + sHOS_B + "', '" + sTOS_OPSYS + "', '" + sTOS_ATL +"', '" + sTOS_DIAG +"', '" + sTOS_SYSOS +"', '" + sTOS_GPIB +"', '" + sT_IF +"', '" + sFsst_Flag +"', "); // 112~121				//sSQL.append(" '" + Hist_Variable.Recyclestep + "', '" + sRecycle_Flag + "', '" + sSbl_Code + "', '" + sSbl_Judge + "', '" + Hist_Variable.Mc_Ncf + "', "); // 91 ~ 95				//sSQL.append(" '" + Hist_Variable.NcfCode + "', '" + Hist_Variable.NcaCode + "', '" + Hist_Variable.NceCode + "', '" + Hist_Variable.NcqCode + "', '" + Hist_Variable.NctCode + "', "); // 96 ~ 100				//sSQL.append(" '" + Hist_Variable.NchCode + "', '"  + Hist_Variable.NcmCode + "', '" + Hist_Variable.NcpCode + "', '" + Hist_Variable.NcsCode + "', '" + Hist_Variable.NcbCode + "', "); // 101 ~ 105				//sSQL.append(" '" + Hist_Variable.NckCode + "', '" + Hist_Variable.NcrCode + "', '" + Hist_Variable.sData_Format + "', '" + sSbl_cmd+"', '" + sRun_sbl_code+"', '" + sRun_sbl_cmd+"',"); // 106~111				//sSQL.append(" '" + sHOS_A + "', '" + sHOS_B + "', '" + sTOS_OPSYS + "', '" + sTOS_ATL +"', '" + sTOS_DIAG +"', '" + sTOS_SYSOS +"', '" + sTOS_GPIB +"', '" + sT_IF +"', '" + sFsst_Flag +"', '" + Hist_Variable.Lot_asysite  +"', "); // 112~121				sSQL.append(" '" + dEbb + "', '"+ Hist_Variable.dGap_EbbFbb + "'"); // 122~123						sSQL.append(" ,'" +Hist_Variable.FRLot+ "' "); // 124   FRLot Column 추가								//2012.01.04 114,115,116 Column추가 반영								sSQL.append(" ," +nSubBin114+ "" );				sSQL.append(" ," +nFinalSubBin114+ "" );				sSQL.append(" ," +nSubBin115+ "" );				sSQL.append(" ," +nFinalSubBin115+ "" );				sSQL.append(" ," +nSubBin116+ "" );				sSQL.append(" ," +nFinalSubBin116+ "" );											//2012.01.04 114,115,116 Column추가 반영 end				//REWORK_FALG						sSQL.append(" ,'" +sRework_flag+ "'" );				//REWORK_FALG Column추가 반영						//TEST_LINE				sSQL.append(" ,'" +Hist_Variable.line+ "'" );				//TEST_LINE Column추가 반영					sSQL.append(" ,'" +sPurpose_Type+ "'" );				sSQL.append(")" );				//logger.info(sSQL.toString());				//cho oracle convert ok				size = GlobalDao.executeUpdate(sSQL.toString());				size = 1;				if(sTester.equals("ax03")){					logger.info("[SQL]" + sSQL.toString());				}				logger.info("[SMART_TEST_YIELD_HIST_" + sRetest_Cnt+ " Insert Start.]");			}			logger.info("[Insert Data End]");			if (size > -1) {				/* 정상적으로 Insert 됐을때 데이터 파일을 이동시킨다. */				String[] file_split = Hist_Variable.Dut_Date[0][2].split("/");				// No Directory make				String FilePath = FileMoveUtil.getDirpath("conSuccess") + "/" + file_split[1] + "Data";								FileMoveUtil.makeDirectory(FilePath);				File f = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFile);				File sNew_File = SmtOscar_Hist_FileCheck.File_Rename(f, sEnd_date, sFilal_Retest_Cnt);				logger.info("[MOVE]" + sNew_File.getName());				File cp_File = new File(FilePath + "/" + sNew_File.getName());				FileMoveUtil.copyFile(sNew_File,cp_File);				sNew_File.delete();				logger.info("[FileMove] SUCCESS \n");			}		} catch (Exception ex) {			logger.error(ex.toString() + " : " + sSQL.toString());			/* Insert시 에러가 있을경우 파일을 Insert 폴더로 이동시킨다. */			FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conInsert") + "/" + Utils.getDate("MM", 0) + "Data");			File fFileName = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFile);			try {				Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");			} catch (IOException e) {				logger.error(e.toString());			}			FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conInsert") + "/" + Utils.getDate("MM", 0) + "Data");			File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");			FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conInsert") + "/" + Utils.getDate("MM", 0) + "Data/");		}	}} 