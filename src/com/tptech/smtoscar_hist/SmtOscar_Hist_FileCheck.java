/** * SMTOSCAR File Format Check   */package com.tptech.smtoscar_hist;import java.io.File;import java.io.IOException;import java.util.*;import org.apache.log4j.Logger;import com.tptech.Hist_Variable;import com.tptech.log.WriteLogger;import com.tptech.util.*;public class SmtOscar_Hist_FileCheck {	private static Logger logger = WriteLogger.getInstance("SmtOscar_Hist_FileCheck.java");		public boolean ReadFile(String File, Vector<?> vFileLine) {		int iFileLine = vFileLine.size();		/* 파일 데이터내용이 없거나 형식이 틀릴경우 파일을 이동시킨다. */		if (iFileLine == 0) {			FormatError(File, vFileLine, "File Check Format Error-1", "File Open Error");			return false;		}		String sMlcl = (String) vFileLine.elementAt(0);		if (!sMlcl.replaceAll(" ", "").equals("<MLCT>")) {			FormatError(File, vFileLine, "File Check Format Error-2", "Data Not <MLCT> Error");			return false;		}		String sMlclEnd = (String) vFileLine.elementAt(iFileLine - 1);		if (!sMlclEnd.replaceAll(" ", "").equals("</MLCT>")) {			FormatError(File, vFileLine, "File Check Format Error-3", "Data Not </MLCT> Error");			return false;		}				String[] sSplitT = new String[6]; 		String[] sSplitT2 = new String[2];		int Cnt = 0;		for(int i=0; i<8; i++){			String slotid = (String) vFileLine.elementAt(i);			if(slotid.contains("Retest")) Cnt++; 			if(slotid.contains("LotId")) Cnt++;			if(slotid.contains("ProductId")) Cnt++;			if(slotid.contains("ProcessId")) Cnt++;			if(slotid.contains("Tester")) Cnt++;		}		if(Cnt < 5){			FormatError(File, vFileLine, "File Check Format Error-4", "No Column Error");			return false;									}				boolean sTmodeCheck = false;		for(int i=0; i<8; i++){			String slotid = (String) vFileLine.elementAt(i);			if(slotid.contains("Retest")){				sSplitT = slotid.split(" ");				sSplitT2 = sSplitT[1].split("=");				//Retest  				if(sSplitT2.length <= 1){					FormatError(File, vFileLine, "File Check Format Error-5", "Retest Error");					return false;							}			}						if(slotid.contains("Tmode")){				sSplitT = slotid.split(" ");				sSplitT2 = sSplitT[3].split("=");				if(sSplitT2.length <= 1){					FormatError(File, vFileLine, "File Check Format Error-10", "Tmode Error");					return false;											}else{					sTmodeCheck = true;				}			}			if(slotid.contains("Lotid")){				sSplitT = slotid.split(" ");				sSplitT2 = sSplitT[0].split("=");				//Lotid  				if(sSplitT2.length <= 1){					FormatError(File, vFileLine, "File Check Format Error-6", "Lotid Error");					return false;							}									}						if(slotid.contains("ProductId")){				sSplitT = slotid.split(" ");				sSplitT2 = sSplitT[1].split("=");				//ProductId  				if(sSplitT2.length <= 1){					FormatError(File, vFileLine, "File Check Format Error-7", "ProductId Error");					return false;							}									}						if(slotid.contains("ProcessId")){				sSplitT = slotid.split(" ");				sSplitT2 = sSplitT[2].split("=");				//ProcessId가 4자리 미만일때 				if(sSplitT2.length > 1){					if(sSplitT2[1] == null || sSplitT2[1].length()<4 ){						FormatError(File, vFileLine, "File Check Format Error-8", "ProcessId less than a 4-digit Error");						return false;								}				}else{					FormatError(File, vFileLine, "File Check Format Error-9", "ProcessId less than a 4-digit Error");					return false;												}			}					}//cho 정대표님과 의논하여 주석처리//		if(!sTmodeCheck){//			FormatError(File, vFileLine, "File Check Format Error-10", "Tmode Error");//			return false;//		}				logger.info("[FileCheck] NORMAL");		return true;	}		//파일형식 에러 파일이동	public static void FormatError(String sFile, Vector<?> vFileLine, String format_error, String format_error2){		logger.error(format_error + " : " + format_error2);		for(int j=0; j<vFileLine.size(); j++){			String sFormatErr = (String) vFileLine.elementAt(j);			logger.error(sFormatErr);		}		FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data");		//FileMoveUtil.makeDirectory2(data_format + "/" + Utils.getDate("MM", 0) + "Data");		File fFileName =  new File(FileMoveUtil.getDirpath("conFile") + "/"+ sFile);		try {			Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");		} catch (IOException e) {			logger.error("[ReName-3]" + e.toString());		}		File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");		FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data/");	}	//파일명을 변경한다.	public static File File_Rename(File fFile, String sSysDate, String sF_Retest_Cnt) {		String[] sExt = new String[2];		sExt = fFile.getName().split("\\.");		String sReName = Hist_Variable.hs.get("Head") + "_" + Hist_Variable.hs.get("LotId") + "_" + Hist_Variable.hs.get("ProcessId") + "_" + Hist_Variable.hs.get("Tester") + "_" + sSysDate + "_" + sF_Retest_Cnt+"."+sExt[1];		File sNew_File = new File(fFile.getParent()+"/"+sReName);		fFile.renameTo(new File(fFile.getParent()+"/"+sReName));		try {			Utils.zipping(sNew_File, sNew_File.getAbsolutePath() + ".gz");		} catch (IOException e) {			logger.error("[ReName-4]" + e.toString());		}		File fGzip_File = new File(sNew_File.getAbsolutePath() + ".gz");		return fGzip_File;	}	}