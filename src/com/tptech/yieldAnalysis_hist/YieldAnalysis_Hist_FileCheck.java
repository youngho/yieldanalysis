/** * YieldAnalysis File Format Check   */package com.tptech.yieldAnalysis_hist;import java.io.File;import java.io.IOException;import java.util.ArrayList;import java.util.List;import java.util.Vector;import org.apache.log4j.Logger;import com.tptech.Hist_Variable;import com.tptech.log.WriteLogger;import com.tptech.util.FileMoveUtil;import com.tptech.util.Utils;public class YieldAnalysis_Hist_FileCheck {    private static Logger logger = WriteLogger.getInstance("YieldAnalysis_Hist_FileCheck.java");    // 파일 애러 처리    public boolean ReadFile(String File, Vector<?> vFileLine) {        int iFileLine = vFileLine.size();        /* 파일 데이터내용이 없거나 형식이 틀릴경우 파일을 이동시킨다. */        if (iFileLine == 0) {            FormatError(File, vFileLine, "File Check Format Error-1", "File Open Error");            return false;        }                int mainBinElement = 0;        int subBinElement = 0;        int dutBinElement = 0;        int casiElement = 0;        int testBinElement = 0;        int handlerBinElement = 0;        int opBinElement = 0;                for (int i = 0; i < iFileLine; i++) {            String elementData = (String) vFileLine.elementAt(i);                        if (elementData.contains("<CASI>")) {                mainBinElement++;            }            if (elementData.contains("</CASI>")) {                mainBinElement++;            }            if (elementData.contains("<TEST_BIN>")) {                mainBinElement++;            }            if (elementData.contains("</TEST_BIN>")) {                mainBinElement++;            }            if (elementData.contains("<HANDLER_BIN>")) {                mainBinElement++;            }            if (elementData.contains("</HANDLER_BIN>")) {                mainBinElement++;            }            if (elementData.contains("<OP_BIN>")) {                mainBinElement++;            }            if (elementData.contains("</OP_BIN>")) {                mainBinElement++;            }            if (elementData.contains("<MAIN_BIN>")) {                mainBinElement++;            }            if (elementData.contains("</MAIN_BIN>")) {                mainBinElement++;            }            if (elementData.contains("<NG_BIN>")) {                subBinElement++;            }            if (elementData.contains("</NG_BIN>")) {                subBinElement++;            }            if (elementData.contains("<DUT_BIN>")) {                dutBinElement++;            }            if (elementData.contains("</DUT_BIN>")) {                dutBinElement++;            }        }                if (casiElement == 1) {            FormatError(File, vFileLine, "File Check Format Error-4", " CASI Element No Column Error");            return false;        }                if (mainBinElement == 1) {            FormatError(File, vFileLine, "File Check Format Error-4", "MAIN_BIN Element No Column Error");            return false;        }                if (subBinElement == 1) {            FormatError(File, vFileLine, "File Check Format Error-4", "NG_BIN Element No Column Error");            return false;        }                if (dutBinElement == 1) {            FormatError(File, vFileLine, "File Check Format Error-4", "DUT_BIN Element No Column Error");            return false;        }                if (testBinElement == 1) {            FormatError(File, vFileLine, "File Check Format Error-4", "TEST_BIN Element No Column Error");            return false;        }                if (handlerBinElement == 1) {            FormatError(File, vFileLine, "File Check Format Error-4", "HANDLER_BIN Element No Column Error");            return false;        }                if (opBinElement == 1) {            FormatError(File, vFileLine, "File Check Format Error-4", "OP_BIN Element No Column Error");            return false;        }                return true;    }    //파일형식 에러 파일이동    public static void FormatError(String sFile, Vector<?> vFileLine, String format_error, String format_error2) {        logger.error(format_error + " : " + format_error2);        for (int j = 0; j < vFileLine.size(); j++) {            String sFormatErr = (String) vFileLine.elementAt(j);            logger.error(sFormatErr);        }        FileMoveUtil.makeDirectory(FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data");        //FileMoveUtil.makeDirectory2(data_format + "/" + Utils.getDate("MM", 0) + "Data");        File fFileName = new File(FileMoveUtil.getDirpath("conFile") + "/" + sFile);        try {            Utils.zipping(fFileName, fFileName.getAbsolutePath() + ".gz");        } catch (IOException e) {            logger.error("[ReName-3]" + e.toString());        }        File fGzip_File = new File(fFileName.getAbsolutePath() + ".gz");        FileMoveUtil.moveFile(fGzip_File, FileMoveUtil.getDirpath("conFormat") + "/" + Utils.getDate("MM", 0) + "Data/");    }}